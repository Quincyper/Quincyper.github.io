{"meta":{"title":"Quincyper","subtitle":"","description":"此生逍遥君子意 一壶温酒向长空","author":"系小鹏鹏吖","url":"http://quincyper.github.io","root":"/"},"pages":[{"title":"404 Not Found","date":"2020-05-02T15:13:20.160Z","updated":"2020-02-27T09:28:27.758Z","comments":true,"path":"404.html","permalink":"http://quincyper.github.io/404.html","excerpt":"","text":"404 �ܱ�Ǹ�������ʵ�ҳ�治���� �����������ַ�����õ�ַ�ѱ�ɾ��"},{"title":"404 Not Found","date":"2020-05-02T08:55:23.772Z","updated":"2020-05-02T08:55:23.772Z","comments":true,"path":"404/index.html","permalink":"http://quincyper.github.io/404/index.html","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除 要不咱们来玩点小游戏吧 2048小游戏 2048小游戏 最高分： 1345612 电脑：请用键盘的方向键进行操作 手机：请划动屏幕进行操作 得分：0 分 刷新"},{"title":"","date":"2020-05-02T08:37:04.936Z","updated":"2018-02-10T00:09:21.000Z","comments":true,"path":"404/main.js","permalink":"http://quincyper.github.io/404/main.js","excerpt":"","text":"$(function () { //是否产生新元素 var isNewRndItem = false; var gameScore = 0; //最高分 var maxScore = 0; if (localStorage.maxScore) { maxScore = localStorage.maxScore - 0; } else { maxScore = 0; } //游戏初始化 gameInit(); function refreshGame() { var items = $('.gameBody .row .item'); for (var i = 0; i < items.length; i++) { items.eq(i).html('').removeClass('nonEmptyItem').addClass('emptyItem'); } gameScore = 0; //分数清零 $('#gameScore').html(gameScore); //随机生成两个新元素 newRndItem(); newRndItem(); //刷新颜色 refreshColor(); $('#gameOverModal').modal('hide'); } function getSideItem(currentItem, direction) { //当前元素的位置 var currentItemX = currentItem.attr('x') - 0; var currentItemY = currentItem.attr('y') - 0; //根据方向获取旁边元素的位置 switch (direction) { case 'left': var sideItemX = currentItemX; var sideItemY = currentItemY - 1; break; case 'right': var sideItemX = currentItemX; var sideItemY = currentItemY + 1; break; case 'up': var sideItemX = currentItemX - 1; var sideItemY = currentItemY; break; case 'down': var sideItemX = currentItemX + 1; var sideItemY = currentItemY; break; } //旁边元素 var sideItem = $('.gameBody .row .x' + sideItemX + 'y' + sideItemY); return sideItem; } function itemMove(currentItem, direction) { var sideItem = getSideItem(currentItem, direction); if (sideItem.length == 0) {//当前元素在最边上 //不动 } else if (sideItem.html() == '') { //当前元素不在最后一个且左（右、上、下）侧元素是空元素 sideItem.html(currentItem.html()).removeClass('emptyItem').addClass('nonEmptyItem'); currentItem.html('').removeClass('nonEmptyItem').addClass('emptyItem'); itemMove(sideItem, direction); isNewRndItem = true; } else if (sideItem.html() != currentItem.html()) {//左（右、上、下）侧元素和当前元素内容不同 //不动 } else {//左（右、上、下）侧元素和当前元素内容相同 //向右合并 sideItem.html((sideItem.html() - 0) * 2); currentItem.html('').removeClass('nonEmptyItem').addClass('emptyItem'); gameScore += (sideItem.text() - 0) * 10; $('#gameScore').html(gameScore); // itemMove(sideItem, direction); maxScore = maxScore < gameScore ? gameScore : maxScore; $('#maxScore').html(maxScore); localStorage.maxScore = maxScore; isNewRndItem = true; return; } } function move(direction) { //获取所有非空元素 var nonEmptyItems = $('.gameBody .row .nonEmptyItem'); //如果按下的方向是左或上，则正向遍历非空元素 if (direction == 'left' || direction == 'up') { for (var i = 0; i < nonEmptyItems.length; i++) { var currentItem = nonEmptyItems.eq(i); itemMove(currentItem, direction); } } else if (direction == 'right' || direction == 'down') {//如果按下的方向是右或下，则反向遍历非空元素 for (var i = nonEmptyItems.length - 1; i >= 0; i--) { var currentItem = nonEmptyItems.eq(i); itemMove(currentItem, direction); } } //是否产生新元素 if (isNewRndItem) { newRndItem(); refreshColor(); } } function isGameOver() { //获取所有元素 var items = $('.gameBody .row .item'); //获取所有非空元素 var nonEmptyItems = $('.gameBody .row .nonEmptyItem'); if (items.length == nonEmptyItems.length) {//所有元素的个数 == 所有非空元素的个数 即没有空元素 //遍历所有非空元素 for (var i = 0; i < nonEmptyItems.length; i++) { var currentItem = nonEmptyItems.eq(i); if (getSideItem(currentItem, 'up').length != 0 && currentItem.html() == getSideItem(currentItem, 'up').html()) { //上边元素存在 且 当前元素中的内容等于上边元素中的内容 return; } else if (getSideItem(currentItem, 'down').length != 0 && currentItem.html() == getSideItem(currentItem, 'down').html()) { //下边元素存在 且 当前元素中的内容等于下边元素中的内容 return; } else if (getSideItem(currentItem, 'left').length != 0 && currentItem.html() == getSideItem(currentItem, 'left').html()) { //左边元素存在 且 当前元素中的内容等于左边元素中的内容 return; } else if (getSideItem(currentItem, 'right').length != 0 && currentItem.html() == getSideItem(currentItem, 'right').html()) { //右边元素存在 且 当前元素中的内容等于右边元素中的内容 return; } } } else { return; } $('#gameOverModal').modal('show'); } //游戏初始化 function gameInit() { //初始化分数 $('#gameScore').html(gameScore); //最大分值 $('#maxScore').html(maxScore); //为刷新按钮绑定事件 $('.refreshBtn').click(refreshGame); //随机生成两个新元素 newRndItem(); newRndItem(); //刷新颜色 refreshColor(); } //随机生成新元素 function newRndItem() { //随机生成新数字 var newRndArr = [2, 2, 4]; var newRndNum = newRndArr[getRandom(0, 2)]; console.log('newRndNum: ' + newRndNum); //随机生成新数字的位置 var emptyItems = $('.gameBody .row .emptyItem'); var newRndSite = getRandom(0, emptyItems.length - 1); emptyItems.eq(newRndSite).html(newRndNum).removeClass('emptyItem').addClass('nonEmptyItem'); } //产生随机数，包括min、max function getRandom(min, max) { return min + Math.floor(Math.random() * (max - min + 1)); } //刷新颜色 function refreshColor() { var items = $('.gameBody .item'); for (var i = 0; i < items.length; i++) { // console.log(items.eq(i).parent().index()); switch (items.eq(i).html()) { case '': items.eq(i).css('background', ''); break; case '2': items.eq(i).css('background', 'rgb(250, 225, 188)'); break; case '4': items.eq(i).css('background', 'rgb(202, 240, 240)'); break; case '8': items.eq(i).css('background', 'rgb(117, 231, 193)'); break; case '16': items.eq(i).css('background', 'rgb(240, 132, 132)'); break; case '32': items.eq(i).css('background', 'rgb(181, 240, 181)'); break; case '64': items.eq(i).css('background', 'rgb(182, 210, 246)'); break; case '128': items.eq(i).css('background', 'rgb(255, 207, 126)'); break; case '256': items.eq(i).css('background', 'rgb(250, 216, 216)'); break; case '512': items.eq(i).css('background', 'rgb(124, 183, 231)'); break; case '1024': items.eq(i).css('background', 'rgb(225, 219, 215)'); break; case '2048': items.eq(i).css('background', 'rgb(221, 160, 221)'); break; case '4096': items.eq(i).css('background', 'rgb(250, 139, 176)'); break; } } } // 电脑的方向键监听事件 $('body').keydown(function (e) { switch (e.keyCode) { case 37: // left console.log('left'); isNewRndItem = false; move('left'); isGameOver(); break; case 38: // up console.log('up'); isNewRndItem = false; move('up'); isGameOver(); break; case 39: // right console.log('right'); isNewRndItem = false; move('right'); isGameOver(); break; case 40: // down console.log('down'); isNewRndItem = false; move('down'); isGameOver(); break; } }); // 手机屏幕划动触发 (function () { mobilwmtouch(document.getElementById(\"gameBody\")) document.getElementById(\"gameBody\").addEventListener('touright', function (e) { e.preventDefault(); // alert(\"方向向右\"); console.log('right'); isNewRndItem = false; move('right'); isGameOver(); }); document.getElementById(\"gameBody\").addEventListener('touleft', function (e) { // alert(\"方向向左\"); console.log('left'); isNewRndItem = false; move('left'); isGameOver(); }); document.getElementById(\"gameBody\").addEventListener('toudown', function (e) { // alert(\"方向向下\"); console.log('down'); isNewRndItem = false; move('down'); isGameOver(); }); document.getElementById(\"gameBody\").addEventListener('touup', function (e) { // alert(\"方向向上\"); console.log('up'); isNewRndItem = false; move('up'); isGameOver(); }); function mobilwmtouch(obj) { var stoux, stouy; var etoux, etouy; var xdire, ydire; obj.addEventListener(\"touchstart\", function (e) { stoux = e.targetTouches[0].clientX; stouy = e.targetTouches[0].clientY; //console.log(stoux); }, false); obj.addEventListener(\"touchend\", function (e) { etoux = e.changedTouches[0].clientX; etouy = e.changedTouches[0].clientY; xdire = etoux - stoux; ydire = etouy - stouy; chazhi = Math.abs(xdire) - Math.abs(ydire); //console.log(ydire); if (xdire > 0 && chazhi > 0) { console.log(\"right\"); //alert(evenzc('touright',alerts)); obj.dispatchEvent(evenzc('touright')); } else if (ydire > 0 && chazhi < 0) { console.log(\"down\"); obj.dispatchEvent(evenzc('toudown')); } else if (xdire < 0 && chazhi > 0) { console.log(\"left\"); obj.dispatchEvent(evenzc('touleft')); } else if (ydire < 0 && chazhi < 0) { console.log(\"up\"); obj.dispatchEvent(evenzc('touup')); } }, false); function evenzc(eve) { if (typeof document.CustomEvent === 'function') { this.event = new document.CustomEvent(eve, {//自定义事件名称 bubbles: false,//是否冒泡 cancelable: false//是否可以停止捕获 }); if (!document[\"evetself\" + eve]) { document[\"evetself\" + eve] = this.event; } } else if (typeof document.createEvent === 'function') { this.event = document.createEvent('HTMLEvents'); this.event.initEvent(eve, false, false); if (!document[\"evetself\" + eve]) { document[\"evetself\" + eve] = this.event; } } else { return false; } return document[\"evetself\" + eve]; } } })(); });"},{"title":"","date":"2020-05-02T08:37:04.935Z","updated":"2018-02-10T00:09:21.000Z","comments":true,"path":"404/main.css","permalink":"http://quincyper.github.io/404/main.css","excerpt":"","text":"* { margin: 0; padding: 0; font-family: \"YouYuan\"; } body { background: #d7d3b6; } .container { /*padding-top: 30px;*/ width: 100%; height: 100%; } .main { width: 100%; height: 100%; margin: 0 auto; overflow: hidden; text-align: center; } .main .gameName { font-size: 35px; font-weight: bold; } .main .maxScore { font-size: 20px; } .main .maxScore span { color: red; font-weight: bold; } .main .gameBody { /*width: 100%;*/ height: 50%; margin: 0 auto; display: flex; flex-direction: column; justify-content: space-between; padding: 15px; background: #999; border-radius: 8px; padding-top: 5px; padding-bottom: 5px; } .main .gameBody .row { display: flex; justify-content: space-between; } .main .gameBody .row .item { width: 70px; height: 70px; border-radius: 10px; background: #fff; text-align: center; line-height: 70px; font-size: 30px; font-weight: bold; margin: 5px; color: #666; font-family: \"microsoft yahei\"; } .main .gameRule { font-size: 16px; font-weight: bold; margin-top: 5px; } .main .gameScore { font-size: 20px; font-weight: bold; margin-top: 0px; } .main .gameScore span { color: red; font-size: 30px; } .main .scoreAndRefresh { display: flex; justify-content: space-around; width: 280px; margin: 0 auto; } .main .scoreAndRefresh .refreshBtn { height: 30px; margin-top: 8px; } .modal { margin-top: 150px; } .modal .modal-header h4 { text-align: left; font-weight: bold; } .modal .modal-dialog { width: 300px; margin: 0 auto; } .modal .modal-body { font-size: 18px; font-weight: bold; color: red; }"},{"title":"分类","date":"2019-12-16T10:57:35.000Z","updated":"2020-05-01T11:48:58.273Z","comments":true,"path":"categories/index.html","permalink":"http://quincyper.github.io/categories/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2019-12-14T14:20:36.000Z","updated":"2020-05-01T11:47:44.629Z","comments":false,"path":"tags/index.html","permalink":"http://quincyper.github.io/tags/index.html","excerpt":"","text":""},{"title":"关于","date":"2020-05-02T15:26:57.675Z","updated":"2020-05-02T15:19:46.372Z","comments":true,"path":"about/index.html","permalink":"http://quincyper.github.io/about/index.html","excerpt":"","text":"ID LINK 江湖人称 秦门鹏少 性别 男 爱好 女 特长 是的 ID LINK QQ 794508491 学历 合肥某本科生 现状 有梦想的咸鱼 其他 虽然很菜，但是在努力学习中… 老古董店了，有事砸门请轻点噢"}],"posts":[{"title":"Markdown使用手册","slug":"markdown使用手册 ","date":"2020-04-04T10:21:00.000Z","updated":"2020-05-02T10:53:21.870Z","comments":true,"path":"2020/04/04/markdown使用手册 /","link":"","permalink":"http://quincyper.github.io/2020/04/04/markdown%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C%20/","excerpt":"Markdown使用手册前序Markdown 能被使用来撰写电子书，如：Gitbook。当前许多网站都广泛使用 Markdown 来撰写帮助文档或是用于论坛上发表消息。例如：GitHub、简书、reddit、Diaspora、Stack Exchange、OpenStreetMap 、SourceForge等。 本教程将使用 Typora 编辑器来讲解 Markdown 的语法，Typora 支持 MacOS 、Windows、Linux 平台，且包含多种主题，编辑后直接渲染出效果。支持导出HTML、PDF、Word、图片等多种类型文件。 Typora 官网：https://typora.io/ 参考书籍：《了不起的Markdown》","text":"Markdown使用手册前序Markdown 能被使用来撰写电子书，如：Gitbook。当前许多网站都广泛使用 Markdown 来撰写帮助文档或是用于论坛上发表消息。例如：GitHub、简书、reddit、Diaspora、Stack Exchange、OpenStreetMap 、SourceForge等。 本教程将使用 Typora 编辑器来讲解 Markdown 的语法，Typora 支持 MacOS 、Windows、Linux 平台，且包含多种主题，编辑后直接渲染出效果。支持导出HTML、PDF、Word、图片等多种类型文件。 Typora 官网：https://typora.io/ 参考书籍：《了不起的Markdown》 一、标题 使用#号标记 123# 一级标题## 二级标题### 三级标题 使用=和-标记一级和二级标题 12345这是一级标题&#x3D;&#x3D;&#x3D;这是二级标题--- 二、段落格式1. 段落 段落换行 段落的换行是使用两个以上空格加回车 当然也可以再段落后面使用一个空行来表示重新开始一个段落 段落居中 | 左对齐 | 右对齐 居中： 1&lt;center&gt;诶嘿&lt;&#x2F;center&gt; 左对齐： 1&lt;p align&#x3D;&quot;left&quot;&gt;诶嘿&lt;&#x2F;p&gt; 右对齐： 1&lt;p align&#x3D;&quot;right&quot;&gt;诶嘿&lt;&#x2F;p&gt; 2. 字体 斜体 12*斜体文本*_斜体文本_ 粗体 12**粗体文本**__粗体文本__ 粗斜体 12***粗斜体文本***___粗斜体文本___ 下划线 下划线可以通过 HTML 的 &lt;u&gt; 标签来实现： 1&lt;u&gt;下划线&lt;&#x2F;u&gt; 3. 分隔线你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线： 1234567*** （最少使用三个及其以上的*）* * * （插入空格）- - - （减号）---------- （底线） 4. 删除线如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 ~~ 即可， 例如BAIDU.COM ： 123RUNOOB.COMGOOGLE.COM~~BAIDU.COM~~ 5. 脚注脚注是对文本的补充说明。Markdown 脚注的格式如下: 1[^要注明的文本] 以下实例演示了脚注的用法： 123创建脚注格式类似这样 [^RUNOOB]。[^qzp]: qzp牛批 - - 这里称之为qzp广场 全体起立！ 结果显示： 创建脚注格式类似于这样 [^qzp] [^qzp]: qzp牛批 - - 这里称之为qzp广场 全体起立! 三、列表1. 常规列表 Markdown 支持有序列表和无序列表。 无序列表 使用星号(*)、加号(+)或是减号(-)作为列表标记： 1​ 第一项 第二项 第三项 第一项 第二项 第三项 第一项 第二项 第三项1 有序表 使用数字并加上 . 号来表示，如： 1231. 第一项2. 第二项3. 第三项 2. 列表嵌套列表嵌套只需在子列表中的选项添加四个空格即可： 示例代码： 1234561. 第一项： - 第一项嵌套的第一个元素 - 第一项嵌套的第二个元素2. 第二项： - 第二项嵌套的第一个元素 - 第二项嵌套的第二个元素 效果展示： 1. 第一项： - 第一项嵌套的第一个元素 - 第一项嵌套的第二个元素 2. 第二项： - 第二项嵌套的第一个元素 - 第二项嵌套的第二个元素四、区块1. 常规区块Markdown 区块引用是在段落开头使用 &gt; 符号 ，然后后面紧跟一个空格符号： 示例代码： 123&gt; 区块1引用&gt; 区块2引用&gt; 区块3引用 效果展示： 区块1引用 区块2引用 区块3引用 2. 区块嵌套区块是的引用也是可以嵌套的，一个 &gt; 符号是最外层，两个 &gt; 符号是第一层嵌套，以此类推。示例代码： 123&gt; 最外层&gt; &gt; 第一层嵌套&gt; &gt; &gt; 第二层嵌套 效果展示： 最外层 第一层嵌套 第二层嵌套 3. 区块中使用列表区块中使用列表实例如下：示例代码： 123456&gt; 区块中使用列表&gt; 1. 第一项&gt; 2. 第二项&gt; + 第一项&gt; + 第二项&gt; + 第三项 效果展示： 区块中使用列表 第一项 第二项 第一项 第二项 第三项 4. 列表中使用区块如果要在列表项目内放进区块，那么就需要在 &gt; 前添加四个空格的缩进。 区块中使用列表实例如下： 1234- 第一项 &gt; qzpnb &gt; 全体起立哈哈哈- 第二项 效果展示： 第一项 qzpnb全体起立哈哈哈 第二项 五、代码1. 函数|代码片段​ 如果是段落上的一个函数或片段的代码可以用反引号把它包起来（`）。 示例代码： 12这里显示&#96;printf()&#96; 函数这里显示printf()&#96;函数&#96; 效果展示： ​ 这里显示printf()函数 ​ 这里显示printf()函数 2. 代码区块 常用表示 你可以用 ``` 包裹一段代码，并指定一种语言（也可以不指定）： 代码展示 1234​&#96;&#96;&#96;javascript$(document).ready(function () &#123; alert(&#39;RUNOOB&#39;);&#125;); 1 效果展示 123$(document).ready(function () &#123; alert('RUNOOB');&#125;); 其他表示代码区块使用 4 个空格或者一个制表符（Tab 键）。 代码展示 12345&lt;?phpechofunctionecho&#125; 效果展示 1234echofunctionecho&#125; 六、链接1. 直接使用直接引用链接地址的使用方法如下： 1&lt;链接地址&gt; 示例代码： 1&lt;https:&#x2F;&#x2F;quincyper.github.io&gt; 显示结果 https://quincyper.github.io 2. 文本上链接常规的文本上使用超链接的使用方法如下： 1[链接名称](链接地址) 示例代码： 1这是一个链接 [qzp的博客](https:&#x2F;&#x2F;quincyper.github.io) 显示结果 这是一个链接 qzp的博客 3. 高级链接类似于使用脚注的方式进行链接。 我们可以通过变量来设置一个链接，变量赋值在文档末尾进行： 123[链接名称][脚注][脚注]：网址 示例代码 123456这个链接用 1 作为网址变量 [Google][1]这个链接用 quincyper 作为网址变量 [qzp的博客][quincyper]然后在文档的结尾为变量赋值（网址） [1]: http:&#x2F;&#x2F;www.google.com&#x2F; [quincyper]: http:&#x2F;&#x2F;quincyper.github.io&#x2F; 显示结果 这个链接用 1 作为网址变量 Google这个链接用 quincyper 作为网址变量 qzp的博客然后在文档的结尾为变量赋值（网址） 七、图片1. 常规使用常规使用，Markdown 图片语法格式如下： 123![alt 属性文本](图片地址)![alt 属性文本](图片地址 &quot;可选标题&quot;) 1234注：- 开头一个感叹号 !- 接着一个方括号，里面放上图片的替代文字- 接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 &#39;title&#39; 属性的文字 示例代码 123![RUNOOB 图标](http:&#x2F;&#x2F;static.runoob.com&#x2F;images&#x2F;runoob-logo.png)![RUNOOB 图标](http:&#x2F;&#x2F;static.runoob.com&#x2F;images&#x2F;runoob-logo.png &quot;RUNOOB&quot;) 显示结果 2. 链接网址使用同样的也可以用类似于脚注的方式对图片网址使用变量。 123 [文本文字][脚注].[脚注]: 含有图片的网址 示例代码 1234这个链接用 1 作为网址变量 [RUNOOB][1].然后在文档的结尾为变量赋值（网址）[1]: http:&#x2F;&#x2F;static.runoob.com&#x2F;images&#x2F;runoob-logo.png 显示结果 这个链接用 2 作为网址变量 RUNOOB.然后在文档的结尾为变量赋值（网址） 注： 123Markdown 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的 &lt;img&gt; 标签。例如：&lt;img src&#x3D;&quot;http:&#x2F;&#x2F;static.runoob.com&#x2F;images&#x2F;runoob-logo.png&quot; width&#x3D;&quot;50%&quot;&gt; 八、表格1.表格建立Markdown 制作表格使用 |来分隔不同的单元格，使用 - 来分隔表头和其他行。 语法格式如下： 1234| 表头 | 表头 || ---- | ---- || 单元格 | 单元格 || 单元格 | 单元格 | 以上代码显示结果如下： 表头 表头 单元格 单元格 单元格 单元格 2.表格对齐方式我们可以按照以下方式来设置表格的对齐方式： 123-: 设置内容和标题栏居右对齐。:- 设置内容和标题栏居左对齐。:-: 设置内容和标题栏居中对齐。 示例代码 1234| 左对齐 | 右对齐 | 居中对齐 || :-----| ----: | :----: || 单元格 | 单元格 | 单元格 || 单元格 | 单元格 | 单元格 | 显示结果 左对齐 右对齐 居中对齐 单元格 单元格 单元格 单元格 单元格 单元格 九、其他技巧正在学习ing… 持续更新，敬请期待！ 1. HTML元素2. 转义3. 公式4. 流程图|时序图（顺序图）|甘特图","categories":[{"name":"Markdown","slug":"Markdown","permalink":"http://quincyper.github.io/categories/Markdown/"}],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"http://quincyper.github.io/tags/Markdown/"}]},{"title":"Python | 函数 | ch_08","slug":"ch_08 Python 函数","date":"2020-04-03T13:19:16.000Z","updated":"2020-05-02T10:39:54.226Z","comments":true,"path":"2020/04/03/ch_08 Python 函数/","link":"","permalink":"http://quincyper.github.io/2020/04/03/ch_08%20Python%20%E5%87%BD%E6%95%B0/","excerpt":"Python | 函数 | ch_08前言：假如需要完成一个任务，需要很复杂的逻辑写很多的程序，那么这时我们就需要把它当成工程来做。工程中有个重要的思想是模块化，也就是分模块。我们把一个大的工程项目拆分成很多小模块，把很复杂的功能分成是很多小功能的集成，让大家一起参与进来每人完成一个模块也就是一个功能，最后进行整合，这样可以大大的提高效率。这样的小功能模块就是我们的函数。函数就是组织代码的一个形式，我们把需要的功能分块打包封装起来就成了函数。","text":"Python | 函数 | ch_08前言：假如需要完成一个任务，需要很复杂的逻辑写很多的程序，那么这时我们就需要把它当成工程来做。工程中有个重要的思想是模块化，也就是分模块。我们把一个大的工程项目拆分成很多小模块，把很复杂的功能分成是很多小功能的集成，让大家一起参与进来每人完成一个模块也就是一个功能，最后进行整合，这样可以大大的提高效率。这样的小功能模块就是我们的函数。函数就是组织代码的一个形式，我们把需要的功能分块打包封装起来就成了函数。 简介 代码的一种组织形式 一个函数一般完成一项特定的功能 函数使用 函数需要先定义 使用函数，俗称调用 1234567891011121314# 定义一个函数# 只是定义的话不会执行# 1. def关键字，后跟一个空格# 2. 函数名，自己定义，起名需要遵循便令命名规则，约定俗成，大驼峰命名只给类用# 3. 后面括号和冒号不能省，括号内可以由参数# 4. 函数内所有代码缩进def func(): print(\"我是一个函数\") print(\"我要完成一定功能\")print(\"我结束了\")# 显示结果我结束了 1234567# 函数的调用# 直接函数名后面跟括号func()# 显示结果我是一个函数我要完成一定功能 12345678910for i in range(1,3): func() # 结果显示我是一个函数我要完成一定功能我结束了我是一个函数我要完成一定功能我结束了 函数的参数和返回值 参数： 负责给函数传递一些必要的数据或者信息 形参（形式参数）： 在函数定义的时候用到的参数没有具体值，只是一个占位的符号，成为形参 实参（实际参数）： 在调用函数的时候输入的值 返回值： 函数的执行结果 使用return关键字 如果没有return，默认返回一个None 函数一旦执行return语句，则无条件返回，即结束函数的执行 1234567891011121314# 参数的定义和使用# 参数person只是一个符号，代表的是调用的时候的某一个数据# 调用的时候，会用p的值代替函数中所有的persondef hello(person): print(\"&#123;0&#125;, 你肿么咧\".format(person)) print(\"Sir, 你不理额额就走咧\") p = \"明月\"hello(p)# 结果显示明月, 你肿么咧Sir, 你不理额额就走咧 1234567891011121314151617# return语句的基本使用# 函数打完招呼后返回一句话def hello(person): print(\"&#123;0&#125;, 你肿么咧\".format(person)) print(\"Sir, 你不理额额就走咧\") return \"我已经跟&#123;0&#125;打招呼了，&#123;1&#125;不理我\".format(person, person) p = \"明月\"rst = hello(p)print(rst)# 结果显示明月, 你肿么咧Sir, 你不理额额就走咧我已经跟明月打招呼了，明月不理我 123456789101112131415# return案例2def hello(person): print(\"&#123;0&#125;, 你肿么咧\".format(person)) return \"哈哈，我提前结束了\" print(\"Sir, 你不理额额就走咧\") return \"我已经跟&#123;0&#125;打招呼了，&#123;1&#125;不理我\".format(person, person)p = \"LiYing\"rst = hello(p)print(rst)# 结果显示LiYing, 你肿么咧哈哈，我提前结束了 12345678910111213141516171819# 九九乘法表# version 1.0for row in range(1,10): # 打印一行 for col in range(1, row+1): # print函数默认任务打印完毕后换行 print( row * col, end=\" \") print(\"-------------------\") # 结果显示1 -------------------2 4 -------------------3 6 9 -------------------4 8 12 16 -------------------5 10 15 20 25 -------------------6 12 18 24 30 36 -------------------7 14 21 28 35 42 49 -------------------8 16 24 32 40 48 56 64 -------------------9 18 27 36 45 54 63 72 81 ------------------- 1234567891011121314151617181920212223# 定义一个函数，打印一行九九乘法表def printLine(row): for col in range(1, row+1): # print函数默认任务打印完毕后换行 num = row * col print(\"%3d\" %num , end=\" \") print(\" \") # 九九乘法表s# version 2.0for row in range(1,10): printLine(row)# 结果显示： 1 2 4 3 6 9 4 8 12 16 5 10 15 20 25 6 12 18 24 30 36 7 14 21 28 35 42 49 8 16 24 32 40 48 56 64 9 18 27 36 45 54 63 72 81 具体的函数参数 及 函数的返回值将在之后详细介绍","categories":[{"name":"Python","slug":"Python","permalink":"http://quincyper.github.io/categories/Python/"},{"name":"函数","slug":"Python/函数","permalink":"http://quincyper.github.io/categories/Python/%E5%87%BD%E6%95%B0/"}],"tags":[{"name":"人生苦短我学Python","slug":"人生苦短我学Python","permalink":"http://quincyper.github.io/tags/%E4%BA%BA%E7%94%9F%E8%8B%A6%E7%9F%AD%E6%88%91%E5%AD%A6Python/"}]},{"title":"Python|变量和数据类型| 变量 | ch_01","slug":"ch_07 Python 程序结构 循环结构_while","date":"2020-04-02T15:57:32.000Z","updated":"2020-05-02T10:38:14.524Z","comments":true,"path":"2020/04/02/ch_07 Python 程序结构 循环结构_while/","link":"","permalink":"http://quincyper.github.io/2020/04/02/ch_07%20Python%20%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84%20%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84_while/","excerpt":"Python | 程序结构| 循环结构_while | ch_07一、while循环1.while语法12while 条件表达式： 执行语句 执行语句可以是单个语句或语句块。条件表达式可以是任何表达式，任何非零、或非空（null）的值均为true。 当判断条件假 false 时，循环结束。","text":"Python | 程序结构| 循环结构_while | ch_07一、while循环1.while语法12while 条件表达式： 执行语句 执行语句可以是单个语句或语句块。条件表达式可以是任何表达式，任何非零、或非空（null）的值均为true。 当判断条件假 false 时，循环结束。 注意： 一个循环语句 表示当某条件成立的时候，就循环 不知道具体循环次数，但能确定循环的成立条件的时候用while循环 练习： 12345678910111213141516171819# 练习1count = 0while (count &lt; 9): print (\"The count is:\", count) count = count + 1 print (\"Good bye!\")# 运行结果The count is: 0The count is: 1The count is: 2The count is: 3The count is: 4The count is: 5The count is: 6The count is: 7The count is: 8Good bye! 1234567891011121314151617181920212223# 练习2# 如果说年利率是6.7%，本利是每年翻滚， 则多少年后本钱会翻倍benqian = 100000year = 0while benqian &lt; 200000: benqian = benqian * (1+0.067) year += 1 # year = year + 1 print(\"第 &#123;0&#125; 年拿了 &#123;1&#125; 块钱\".format(year, benqian)) # 运行结果第 1 年拿了 106700.0 块钱第 2 年拿了 113848.9 块钱第 3 年拿了 121476.77629999998 块钱第 4 年拿了 129615.72031209998 块钱第 5 年拿了 138299.97357301068 块钱第 6 年拿了 147566.07180240238 块钱第 7 年拿了 157452.99861316333 块钱第 8 年拿了 168002.34952024528 块钱第 9 年拿了 179258.5069381017 块钱第 10 年拿了 191268.8269029545 块钱第 11 年拿了 204083.83830545243 块钱 2. while-else语法12345#另外一种表达方法while 条件表达式： 执行语句1else： 执行语句2 在 python 中，while … else 在循环条件为 false 时执行 else 语句块 练习： 123456789101112131415# 练习1count = 0while count &lt; 5: print (count, \" is less than 5\") count = count + 1else: print (count, \" is not less than 5\")# 运行结果0 is less than 51 is less than 52 is less than 53 is less than 54 is less than 55 is not less than 5 123456789101112131415161718192021222324252627# 练习2# 如果说年利率是6.7%，本利是每年翻滚， 则多少年后本钱会翻倍# 如果拿到的钱翻倍，则用print庆祝一下benqian = 100000year = 0while benqian &lt; 200000: benqian = benqian * (1+0.067) year += 1 # year = year + 1 print(\"第 &#123;0&#125; 年拿了 &#123;1&#125; 块钱\".format(year, benqian))else: print(\"终于翻倍了\") print(\"666\") # 运行结果第 1 年拿了 106700.0 块钱第 2 年拿了 113848.9 块钱第 3 年拿了 121476.77629999998 块钱第 4 年拿了 129615.72031209998 块钱第 5 年拿了 138299.97357301068 块钱第 6 年拿了 147566.07180240238 块钱第 7 年拿了 157452.99861316333 块钱第 8 年拿了 168002.34952024528 块钱第 9 年拿了 179258.5069381017 块钱第 10 年拿了 191268.8269029545 块钱第 11 年拿了 204083.83830545243 块钱终于翻倍了666 二、while与 循环控制语句while 语句时还有另外两个重要的命令 continue，break 来跳过循环。 continue 用于跳过该次循环 break 则是用于退出循环 此外”判断条件”还可以是个常值，表示循环必定成立，具体用法如下： 123456789# continue 用法 i = 1while i &lt; 10: i += 1 if i%2 &gt; 0: # 非双数时跳过输出 continue print (i) # 输出双数2、4、6、8、10# 运行结果 ：2 4 6 8 10 1234567891011121314151617181920# break 用法 1i = 1while 1: # 循环条件为1必定成立 print (i) # 输出1~10 i += 1 if i &gt; 10: # 当i大于10时跳出循环 break# 运行结果 ：1 2 3 4 5 6 7 8 9 10# break 用法 2var = 10while var &gt; 0: print (\"当前变量值 :\", var) var = var -1 if var == 5: # 当变量 var 等于 5 时退出循环 break print \"Good bye!\"#运行结果 ： 10 9 8 7 6 \"Good bye!\" 三、while的无限循环在while中，如果条件判断语句永远为 true，循环将会无限的执行下去，如下实例： 12345678910111213141516171819202122232425262728# 练习1# 无限输入var = 1while var == 1 : # 该条件永远为true，循环将无限执行下去 num = input(\"请输入一个数字 :\") print (\"你的输入: \", num) print (\"Good bye!\")# 运行结果请输入一个数字 :1你的输入: 1请输入一个数字 :2你的输入: 2请输入一个数字 :3你的输入: 3 . . .# 练习2# 当输入为 qzpnb 时，退出程序while 1 : read = input(\"Enter your code:\") if read == \"qzpnb\" : breakprint(\" Goodbye \") 四、循环嵌套Python 语言允许在一个循环体里面嵌入另一个循环。 1. for 循环嵌套语法123456for 变量1 in 序列1: for 变量2 in 变量2: 语句2-1 语句2-2 语句1-1 语句1-2 2. while 循环嵌套语法1234while 条件表达式1: while 条件表达式2: 执行语句2-1 执行语句1-1 练习： 12345678910111213141516171819# 循环输出2~10之间的素数i = 2while (i &lt; 10): j = 2 while (j &lt;= (i / j)): if not (i % j): break j = j + 1 if (j &gt; i / j): print(i, \" 是素数\") i = i + 1print(\"Good bye!\")# 运行结果2 是素数3 是素数5 是素数7 是素数Good bye!","categories":[{"name":"Python","slug":"Python","permalink":"http://quincyper.github.io/categories/Python/"},{"name":"程序结构","slug":"Python/程序结构","permalink":"http://quincyper.github.io/categories/Python/%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84/"},{"name":"循环结构","slug":"Python/程序结构/循环结构","permalink":"http://quincyper.github.io/categories/Python/%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84/%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"人生苦短我学Python","slug":"人生苦短我学Python","permalink":"http://quincyper.github.io/tags/%E4%BA%BA%E7%94%9F%E8%8B%A6%E7%9F%AD%E6%88%91%E5%AD%A6Python/"}]},{"title":"Python | 程序结构| 循环结构_for | ch_06","slug":"ch_06 Python 程序结构 循环结构_for","date":"2020-04-02T14:31:00.000Z","updated":"2020-05-02T10:36:04.567Z","comments":true,"path":"2020/04/02/ch_06 Python 程序结构 循环结构_for/","link":"","permalink":"http://quincyper.github.io/2020/04/02/ch_06%20Python%20%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84%20%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84_for/","excerpt":"Python | 程序结构| 循环结构_for | ch_06循环语句循环语句允许我们执行一个语句或语句组多次。","text":"Python | 程序结构| 循环结构_for | ch_06循环语句循环语句允许我们执行一个语句或语句组多次。 重复执行某些固定动作或者处理基本固定的事物 分类 for循环 while循环 嵌套循环 循环类型 描述 while 循环 在给定的判断条件为 true 时执行循环体，否则退出循环体。 for 循环 重复执行语句 嵌套循环 你可以在while循环体中嵌套for循环 一、for循环1. for语句:for 循环格式 1234for 变量 in 序列： 语句1 语句2 ... 练习： 12345678910111213# 练习1# 列表就是一列数字或者其他值，一般用中括号表示# 例如 ['zhangsan', 'lisi', 'qzp','lbw']# 打印学生列表姓名for name in ['zhangsan', 'lisi', 'qzp','lbw']: print(name) # 运行结果zhangsanlisiqzplbw 123456789101112131415161718# 练习2# 打印学生列表姓名for name in ['zhangsan', 'lisi', 'qzp','lbw']: print(name) if name == \"lbw\": print(\"我的最爱&#123;0&#125;出现了\".format(name)) else: print(\"同学我们不约，不约，同学请自重\")# 运行结果zhangsan同学我们不约，不约，同学请自重lisi同学我们不约，不约，同学请自重qzp同学我们不约，不约，同学请自重lbw我的最爱lbw出现了 123456789101112131415161718192021# 练习3for letter in \"Python\": # 第一个实例 print (\"当前字母 :\", letter) fruits = ['banana', 'apple', 'mango']for fruit in fruits: # 第二个实例 print (\"当前水果 :\", fruit) print(\"Good bye!\" ) # 运行结果当前字母 : P当前字母 : y当前字母 : t当前字母 : h当前字母 : o当前字母 : n当前水果 : banana当前水果 : apple当前水果 : mangoGood bye! 2. for-else 语句 当for循环结束的时候，会执行else语句 else语句是可选语句 for-else 语句格式： 12345678for 变量 in 序列： 语句1 语句2 ...else： 语句1 语句2 ... 练习： 1234567891011121314151617181920212223242526# 练习1# 打印列表中的同学，# 如果没有在列表中，或者列表结束了，我们需要打印提示语句，666# 打印学生列表姓名# 如果是jingjign，那肯定是我的最爱呀，# 如果是别的学生，那要冷酷的拒绝他for name in ['zhangsan', 'lisi', 'qzp','lbw']: print(name) if name == \"jingjing\": print(\"我的最爱&#123;0&#125;出现了\".format(name)) else: print(\"同学我们不约，不约，同学请自重\")else: print(\"666\")# 运行结果zhangsan同学我们不约，不约，同学请自重lisi同学我们不约，不约，同学请自重qzp同学我们不约，不约，同学请自重lbw我的最爱lbw出现了666 123456789101112131415161718192021# 练习2# 计算1-10之间所有的质数for num in range(1,10): # 迭代 1 到 10 之间的数字 for i in range(2,num): # 根据因子迭代 if num%i == 0: # 确定第一个因子 j=num/i # 计算第二个因子 print (\"%d 等于 %d * %d\" % (num,i,j)) break # 跳出当前循环 else: # 循环的 else 部分 print (num, \"是一个质数\") # 运行结果1 是一个质数2 是一个质数3 是一个质数4 等于 2 * 25 是一个质数6 等于 2 * 37 是一个质数8 等于 2 * 49 等于 3 * 3 二、循环控制语句循环控制语句可以更改语句执行的顺序。Python支持以下循环控制语句： break： 无条件结束整个循环，简称循环猝死 continue：无条件结束本次循环，从新进入下一轮循环 pass：表示略过，通常用于站位 控制语句 描述 break 语句 在语句块执行过程中终止循环，并且跳出整个循环 continue 语句 在语句块执行过程中终止当前循环，跳出该次循环，执行下一次循环。 pass 语句 pass是空语句，是为了保持程序结构的完整性。 练习： break语句 1234567891011# 练习1 for letter in \"Python\": if letter == 'h': break print (\"当前字母 :\", letter)print(\"Good bye!\")# 运行结果pytGood bye! 1234567891011121314151617181920# 练习2 # 在数字1-10中，寻找数字7，一旦找到，打印出来，其余则什么都不做# for 循环中的变量表示，一般用i，k，m，n，或者indx，idx，item之类# 在python中，如果循环变量名称不重要，可以用下划线（_)代替for i in range(1,11): if i == 7: print(\"我找到了\") break else: print(i)# 运行结果123456我找到了 continue语句 12345678910111213# 练习1for letter in \"Python\": if letter == 'h': continue print (\"当前字母 :\", letter)print (\"Good bye!\")# 运行结果pyton 12345678910111213141516171819202122# 练习2 # 在数字1-10中，寻找所有偶数，找到偶数后打印偶数for i in range(1,11): if i % 2 &#x3D;&#x3D; 1: continue else: print(&quot;&#123;0&#125; 是偶数&quot;.format(i)) # 以上程序与下面程序运行结果一致for i in range(1,11): if i % 2 &#x3D;&#x3D; 0: print(&quot;&#123;0&#125; 是偶数&quot;.format(i)) # 运行结果2 是偶数4 是偶数6 是偶数8 是偶数10 是偶数 pass语句 12345678910111213141516171819# 练习1# 输出 Python 的每个字母for letter in \"Python\": if letter == 'h': pass print (\"这是 pass 块\") print (\"当前字母 :\", letter) print (\"Good bye!\")# 运行结果当前字母 :p当前字母 :y当前字母 :t这是 pass 块当前字母 :h当前字母 :o当前字母 :nGood bye! 12345678# 练习 2for i in range(1,3): pass print(\"wo zai zhe li\") # 运行结果wo zai zhe liwo zai zhe li","categories":[{"name":"Python","slug":"Python","permalink":"http://quincyper.github.io/categories/Python/"},{"name":"程序结构","slug":"Python/程序结构","permalink":"http://quincyper.github.io/categories/Python/%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84/"},{"name":"循环结构","slug":"Python/程序结构/循环结构","permalink":"http://quincyper.github.io/categories/Python/%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84/%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"人生苦短我学Python","slug":"人生苦短我学Python","permalink":"http://quincyper.github.io/tags/%E4%BA%BA%E7%94%9F%E8%8B%A6%E7%9F%AD%E6%88%91%E5%AD%A6Python/"}]},{"title":"Python | 程序结构|分支结构| 条件语句_if | ch_05","slug":"ch_05 Python 程序结构 分支结构_if","date":"2020-04-01T10:20:00.000Z","updated":"2020-05-02T10:34:53.261Z","comments":true,"path":"2020/04/01/ch_05 Python 程序结构 分支结构_if/","link":"","permalink":"http://quincyper.github.io/2020/04/01/ch_05%20Python%20%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84%20%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84_if/","excerpt":"Python | 程序结构|分支结构| 条件语句_if | ch_05分支结构分支结构也叫条件语句。Python条件语句是通过一条或多条语句的执行结果（True或者False）来决定执行的代码块。","text":"Python | 程序结构|分支结构| 条件语句_if | ch_05分支结构分支结构也叫条件语句。Python条件语句是通过一条或多条语句的执行结果（True或者False）来决定执行的代码块。 1.if的基本语法12345if 条件表达式： 语句1 语句2 语句3 ...... 其中”条件表达式”成立时（非零），则执行后面的语句，而执行内容可以多行，以缩进来区分表示同一范围。 注意： 条件表达式就是计算结果必须为布尔值的表达式 表达式后面的冒号不能少 注意if后面的出现的语句，如果属于if语句块，则必须同一个缩进等级 条件表达式结果为True执行if后面的缩进的语句块 练习： 123456789101112# if语句练习1# 如果age小于18岁，则打印信息“去叫家长”age = 17if age &lt; 18: print(\"1\") print(\"2\") print(\"3\")# 输出结果123 123456789101112# if语句练习2# 如果age小于18岁，则打印信息“去叫家长”age = 19if age &lt; 18: print(\"1\") print(\"2\") print(\"3\") print(\"4\")# 输出结果4 1234567891011121314# if语句练习3# 如果age小于18岁，则打印信息“去叫家长”age = 19if age &lt; 18: print(\"1\")print(\"2\")print(\"3\") print(\"4\")# 输出结果234 2.if双向分支if…else…语句 else 为可选语句，当需要在条件不成立时执行内容则可以执行相关语句。 12345678if 条件表达式: 语句1 语句2 ...else: 语句1 语句2 ..... 注意： 双向分支有两个分支，当程序执行到if … else…语句的时候，一定会执行if或else中的一个，也仅执行一个 缩进问题，if和else一个层级，其余语句一个层级 练习： 123456789101112131415161718192021# input的作用是# 1. 在屏幕上输出括号内的字符串# 2. 接受用户输入的内容并返回到程序# 3. input返回的内容一定是字符串类型gender = input(\"请输入性别：\")print(\"你输入的性别是：&#123;0&#125;\".format(gender))if gender == \"nan\": print(\"1\")else: print(\"2\") print(\"3\") print(\"666\")# 输出结果请输入性别：asdfg你输入的性别是：asdfg23666 3.if多路分支很多分支的情况，简称多路分支。 if 语句的判断条件可以用&gt;（大于）、&lt;(小于)、==（等于）、&gt;=（大于等于）、&lt;=（小于等于）来表示其关系。 当判断条件为多个值时，可以使用多路分支形式： if 条件表达式： 语句1 .... elif 条件表达式： 语句1 ... elif 条件表达式： 语句1 ... ..... else: 语句1 ....由于 python 并不支持 switch 语句，所以多个条件判断，只能用 elif 来实现，如果判断需要多个条件需同时判断时，可以使用 or （或），表示两个条件有一个成立时判断条件成功；使用 and （与）时，表示只有两个条件同时成立的情况下，判断条件才成功。 注意： elif 可以有很多个 else可选 多路分支只会选一个执行 练习： 123456789101112131415161718192021# 练习1# score 存放学生成绩# 注意input的返回值类型 都是字符串score = input(\"请输入学生成绩：\")# 需要把str转换成intscore = int(score)if score&gt;=90: print(\"A\")elif score&gt;= 80: print(\"B\")elif score &gt;= 70: print(\"C\")elif score &gt;=60 : print(\"D\")else: print(\"退学咯\")# 运行结果请输入学生成绩：59退学咯 123456789101112131415161718192021# 练习2 num = 9if num &gt;= 0 and num &lt;= 10: # 判断值是否在0~10之间 print 'hello'# 输出结果: hello num = 10if num &lt; 0 or num &gt; 10: # 判断值是否在小于0或大于10 print 'hello'else: print 'undefine'# 输出结果: undefine num = 8# 判断值是否在0~5或者10~15之间if (num &gt;= 0 and num &lt;= 5) or (num &gt;= 10 and num &lt;= 15): print 'hello'else: print 'undefine'# 输出结果: undefine","categories":[{"name":"Python","slug":"Python","permalink":"http://quincyper.github.io/categories/Python/"},{"name":"程序结构","slug":"Python/程序结构","permalink":"http://quincyper.github.io/categories/Python/%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84/"},{"name":"分支结构","slug":"Python/程序结构/分支结构","permalink":"http://quincyper.github.io/categories/Python/%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84/%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"人生苦短我学Python","slug":"人生苦短我学Python","permalink":"http://quincyper.github.io/tags/%E4%BA%BA%E7%94%9F%E8%8B%A6%E7%9F%AD%E6%88%91%E5%AD%A6Python/"}]},{"title":"Python | 表达式_运算符 | ch_04","slug":"ch_04 Python 表达式_运算符","date":"2020-03-30T04:13:00.000Z","updated":"2020-05-02T10:33:33.568Z","comments":true,"path":"2020/03/30/ch_04 Python 表达式_运算符/","link":"","permalink":"http://quincyper.github.io/2020/03/30/ch_04%20Python%20%E8%A1%A8%E8%BE%BE%E5%BC%8F_%E8%BF%90%E7%AE%97%E7%AC%A6/","excerpt":"Python | 表达式_运算符 | ch_04一、表达式 由一个或者几个数字或者变量和运算符组合成的一行代码 通常会返回一个结果 二、运算符 由一个以上的值经过变化得到新值的过程就叫运算 用于运算的符号叫运算符","text":"Python | 表达式_运算符 | ch_04一、表达式 由一个或者几个数字或者变量和运算符组合成的一行代码 通常会返回一个结果 二、运算符 由一个以上的值经过变化得到新值的过程就叫运算 用于运算的符号叫运算符 运算符分类： 算数运算符 比较或者关系运算符 赋值运算符 逻辑运算符 位运算 成员运算 身份运算符 1. 算术运算符进行算术运算的符号，通常用来表示加减乘除。 注：Python中没有自增自减运算符 加 + 、减 - 123456# 加减 + - 跟正常算术运算符一模一样a1 &#x3D; 9+3-2print(a1)###结果显示###10 ###------### 乘 * 123456# 乘号用星号(*)代替a2 &#x3D; 9 * 4print(a2)###结果显示###36 ###------### 除 / 1234567# 除号用斜杠(&#x2F;)代替# 在Python2.x 和python3.x 中，除号(&#x2F;)结果可能不一致，此处以3系列为准a3 &#x3D; 9&#x2F;4print(a3)###结果显示###2.25 ###------### 取余 % 12345678# % 取余运算# 两个数字相除应该有商数有余数# % 只会得到余数a4 &#x3D; 9 % 4print(a4)###结果显示###1 ###------### 地板除 // 123456# &#x2F;&#x2F; 表示取商运算，也叫地板除a5 &#x3D; 9 &#x2F;&#x2F; 4print(a5)###结果显示###2 ###------### 幂运算 ** 123456# ** 表示幂运算a6 &#x3D; 2 ** 3print(a6)###结果显示###8 ###------### 小结： 运算符 描述 实例 + 加 - 两个对象相加 a + b 输出结果 30 - 减 - 得到负数或是一个数减去另一个数 a - b 输出结果 -10 * 乘 - 两个数相乘或是返回一个被重复若干次的字符串 a * b 输出结果 200 / 除 - x除以y b / a 输出结果 2 % 取模 - 返回除法的余数 b % a 输出结果 0 ** 幂 - 返回x的y次幂 a**b 为10的20次方， 输出结果 100000000000000000000 // 取整除 - 返回商的整数部分（向下取整） 9//2 输出结果为 4 2. 比较运算符对两个变量或者值进行比较的运算符，比较的结果值是布尔值，即True/False 比较运算符一般有： 等于== | 不等于 ！= 大于 &gt; | 小于 &lt; 大于等于 &gt;= | 小于等于 &lt;= 1234567# == , 等于号a = 3 == 4print(a)# != 不等于a = 3 != 4print(b) 1234###结果显示###FalseTrue###------### 小结： 运算符 描述 实例 == 等于 - 比较对象是否相等 (a == b) 返回 False。 != 不等于 - 比较两个对象是否不相等 (a != b) 返回 true. &lt;&gt; 不等于 - 比较两个对象是否不相等。python3 已废弃。 (a &lt;&gt; b) 返回 true。这个运算符类似 != 。 &gt; 大于 - 返回x是否大于y (a &gt; b) 返回 False。 &lt; 小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。 (a &lt; b) 返回 true。 &gt;= 大于等于 - 返回x是否大于等于y。 (a &gt;= b) 返回 False。 &lt;= 小于等于 - 返回x是否小于等于y。 (a &lt;= b) 返回 true。 3. 赋值运算符把一个值放到变量里面去 普通赋值 123# 赋值符号 &#x3D; a &#x3D; 0c &#x3D; a &#x3D; 4 复杂赋值 123# 复杂赋值 a &#x3D; b &#x3D; 9a,b &#x3D; 1,2 赋值缩写 123456# 赋值的缩写 +&#x3D; a &#x3D; 0a +&#x3D; 7 # a &#x3D; a+ 7 的缩写# 所有数学运算符都有缩写形式# -&#x3D;， ×&#x3D;， &#x2F;&#x3D;, &#x2F;&#x2F;&#x3D;, %&#x3D;, **&#x3D;,都是缩写形式 小结： 运算符 描述 实例 = 简单的赋值运算符 c = a + b 将 a + b 的运算结果赋值为 c += 加法赋值运算符 c += a 等效于 c = c + a -= 减法赋值运算符 c -= a 等效于 c = c - a *= 乘法赋值运算符 c *= a 等效于 c = c * a /= 除法赋值运算符 c /= a 等效于 c = c / a %= 取模赋值运算符 c %= a 等效于 c = c % a **= 幂赋值运算符 c * *= a 等效于 c = c * * a //= 取整除赋值运算符 c //= a 等效于 c = c // a 4. 逻辑运算符逻辑运算符是对布尔值进行计算的符号，通常分有：逻辑与 and | 逻辑或 or | 逻辑非 not 。这些英文单词在python中是逻辑运算符。 逻辑运算规则 and看作乘法，or看作加法 布尔值跟数字的转换 布尔值转换成数字 True 看作1 ，False 看作0 数字转换成布尔值 0 = False， 其余是 True 由此将逻辑运算转换成整数数学运算，最后结果是0则为False，其余情况则为True 1234567891011121314# 逻辑运算符案例a &#x3D; Trueb &#x3D; Falsec &#x3D; True# 以下式子等价于 d &#x3D; 1 * 0 + 1d &#x3D; a and b or cprint(d)d &#x3D; a or b and aprint(d)e &#x3D; 100 and cprint(e) 12345###结果展示###TrueTrueTrue###-------### 短路问题 逻辑运算的短路问题是语言中常见的问题。逻辑运算规则通常是从左往右，但是存在特殊情况，当运算到某一步时可以不用往后运算了，那么在运行中就不会往后继续运算了。 123456# 逻辑运算的短路问题解释# 下面的逻辑表达式，a的值一定是True，则运行到or的时候# 不论其后为何值最后结果都为True，# 因此整个表达式不再向下计算a &#x3D; True or xxxxxxxxxxx 12345678# 逻辑运算的短路问题案例1# 下面表达式，如果xxx中包含赋值表达式，则结果很难预期# 代码示例（伪代码)b &#x3D; 0a &#x3D; a or (b&#x3D;9) and 6# 假定上面表达式如果没有语法错误# 则b最终的值应该是0而不是9 12345678910111213141516# 逻辑运算的短路问题案例2def a(): print('a') return Truedef b(): print('b') return Trueif a() and b(): printf('AAAAAA') #字符串乘以数字n，表示对这个字符串重复n遍print(\"*\" * 10)if a() or b(): printf('BBBBBB') 1234567###结果展示###abTrue**********aTrue 小结： 运算符 逻辑表达式 描述 实例 and x and y 布尔”与” - 如果 x 为 False，x and y 返回 False，否则它返回 y 的计算值。 (a and b) 返回 20。 or x or y 布尔”或” - 如果 x 是非 0，它返回 x 的值，否则它返回 y 的计算值。 (a or b) 返回 10。 not not x 布尔”非” - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。 not(a and b) 返回 False 5. 成员运算 用来检测某一个变量是否是另一个变量的成员 in not in 1234567891011# 案例l &#x3D; [1,2,3,4,5]a &#x3D; 7b &#x3D; a in lprint(b)a &#x3D; 4print(a in l)print(a not in l) 12345###结果展示###FalseTrueFalse###-------### 小结： 运算符 描述 实例 in 如果在指定的序列中找到值返回 True，否则返回 False。 x 在 y 序列中 , 如果 x 在 y 序列中返回 True。 not in 如果在指定的序列中没有找到值返回 True，否则返回 False。 x 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。 6. 身份运算符 is: 用来检测两个变量是否是同一个变量 语法就是 var1 is var2 is not: 两个变量不是同一个变量 1234567a &#x3D; 9b &#x3D; 9print( a is b)a &#x3D; &quot;I love wangxiaojing&quot;b &#x3D; &quot;I love wangxiaojing&quot;print( a is b) 1234###结果展示###TrueFalse###-------### 小结： 运算符 描述 实例 is is 是判断两个标识符是不是引用自一个对象 x is y, 类似 id(x) == id(y) , 如果引用的是同一个对象则返回 True，否则返回 False is not is not 是判断两个标识符是不是引用自不同对象 x is not y ， 类似 id(a) != id(b)。如果引用的不是同一个对象则返回结果 True，否则返回 False。 三、运算符优先级问题 永远记住，括号具有最高优先级 优先级表格： 运算符 描述 ** 指数 (最高优先级) ~ + - 按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@) * / % // 乘，除，取模和取整除 + - 加法减法 &gt;&gt; &lt;&lt; 右移，左移运算符 &amp; 位 ‘AND’ ^ | 位运算符 &lt;= &lt; &gt; &gt;= 比较运算符 &lt;&gt; == != 等于运算符 = %= /= //= -= += = *= 赋值运算符 is is not 身份运算符 in not in 成员运算符 not and or 逻辑运算符 实例： 1234567891011121314151617181920#!/usr/bin/python# -*- coding: UTF-8 -*- a = 20b = 10c = 15d = 5e = 0 e = (a + b) * c / d #( 30 * 15 ) / 5print \"(a + b) * c / d 运算结果为：\", e e = ((a + b) * c) / d # (30 * 15 ) / 5print \"((a + b) * c) / d 运算结果为：\", e e = (a + b) * (c / d); # (30) * (15/5)print \"(a + b) * (c / d) 运算结果为：\", e e = a + (b * c) / d; # 20 + (150/5)print \"a + (b * c) / d 运算结果为：\", e 输出结果： 1234(a + b) * c / d 运算结果为： 90((a + b) * c) / d 运算结果为： 90(a + b) * (c / d) 运算结果为： 90a + (b * c) / d 运算结果为： 50","categories":[{"name":"Python","slug":"Python","permalink":"http://quincyper.github.io/categories/Python/"},{"name":"运算符","slug":"Python/运算符","permalink":"http://quincyper.github.io/categories/Python/%E8%BF%90%E7%AE%97%E7%AC%A6/"}],"tags":[{"name":"人生苦短我学Python","slug":"人生苦短我学Python","permalink":"http://quincyper.github.io/tags/%E4%BA%BA%E7%94%9F%E8%8B%A6%E7%9F%AD%E6%88%91%E5%AD%A6Python/"}]},{"title":"Python|变量和数据类型|数据类型| 数据类型_ 字符串 |ch_03","slug":"ch_03 Python 变量和数据类型 数据类型_字符串","date":"2020-03-29T09:13:00.000Z","updated":"2020-05-02T10:29:48.054Z","comments":true,"path":"2020/03/29/ch_03 Python 变量和数据类型 数据类型_字符串/","link":"","permalink":"http://quincyper.github.io/2020/03/29/ch_03%20Python%20%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B_%E5%AD%97%E7%AC%A6%E4%B8%B2/","excerpt":"Python|变量和数据类型|数据类型| 数据类型_ 字符串 |ch_03一 、Number|数字二、String|字符串1. 基本定义定义：字符串或串(String)是由数字、字母、下划线组成的一串字符。它是编程语言中表示文本的数据类型。 也可以理解为：通过引号引起来的字符的集合（单引号，双引号，三引号）","text":"Python|变量和数据类型|数据类型| 数据类型_ 字符串 |ch_03一 、Number|数字二、String|字符串1. 基本定义定义：字符串或串(String)是由数字、字母、下划线组成的一串字符。它是编程语言中表示文本的数据类型。 也可以理解为：通过引号引起来的字符的集合（单引号，双引号，三引号） 用来表示一串文字信息 表示方式： 单引号 只能表示一行的信息 双引号 只能表示一行的信息 三引号（三个单引号或者三个双引号） 可以用来表示多行信息 单双引号交错使用 12345678910111213141516171819202122# 单引号nb1 &#x3D; &#39;qzp 牛批&#39;print(nb1)# 双引号nb2 &#x3D; &quot;qzp 牛批&quot;print(nb2)# 三引号nb3 &#x3D; &#39;&#39;&#39;qzp nbqzp 牛批全体起立哈哈哈哈哈&#39;&#39;&#39;print(nb3)# 单双引号交错使用的例子# &lt;a style&#x3D;&quot;color:red&quot;&gt; 哈哈哈&lt;&#x2F;a&gt;# 用引单号表示上面字符串html &#x3D; &#39;a style&#x3D;&quot;color:red&quot;&gt;哈哈哈&lt;&#x2F;a&gt;&#39;print(htmls) 2.基本原理 取值顺序。 python的字串列表有2种取值顺序: 从左到右索引默认0开始的，最大范围是字符串长度少1 从右到左索引默认-1开始的，最大范围是字符串开头 1234 # 原理 P Y T H O N #字符串 &quot;PYTHON&quot; 0 1 2 3 4 5 #从左到右索引-6 -5 -4 -3 -2 -1 #从右到左索引 1234# 举例&gt;&gt;&gt; s = 'abcdef'&gt;&gt;&gt; s[1:5]'bcde' 运算方式。 加号（+）是字符串连接运算符，星号（*）是重复操作 123456789# 实例str = 'Hello World!' print str # 输出完整字符串print str[0] # 输出字符串中的第一个字符print str[2:5] # 输出字符串中第三个至第六个之间的字符串print str[2:] # 输出从第三个字符开始的字符串print str * 2 # 输出字符串两次print str + \"TEST\" # 输出连接的字符串 输出结果： 123456Hello World!Hllollo World!Hello World!Hello World!Hello World!TEST 关于字符串的转义字符、字符串的格式化问题、字符串的内建函数（后延），在往后的学习中再继续更新。 3. 转义字符用一个特殊的方法表示出一系列不方便写出的内容，比如回车键，换行键，退格键 借助反斜杠字符，一旦字符串中出现反斜杠，则反斜杠后面一个或几个字符表示已经不是原来的意思了，进行了转义 在字符串中，一旦出现反斜杠就要加倍小心，可能由转义字符出现 不同系统对换行操作有不同的表示 windows： \\n Linux: \\r\\n 12345678910111213141516171819202122232425262728293031# 如果想表示出Let's go来# 1. 可以使用嵌套引号，即外层使用双引号# 2. 转义字符---------------------------# 双引号号嵌套s = \"Let's go\"print(s)# 结果显示：Let's go---------------------------# 单引号嵌套 用转义字符#\\' == 'ss = 'Let\\'s go'print(ss)# \\\\ == \\s1 = \"c:\\\\user\"print(s1)# 结果显示：Let's goc:\\user---------------------------# 回车换行符s2 = \"I love \\r\\n qzp\"print(s2)# 结果显示：I love qzp 常见的转义字符： 在需要在字符中使用特殊字符时，python 用反斜杠\\转义字符。如下表： 转义字符 描述 (在行尾时) 续行符 \\ 反斜杠符号 &#39; 单引号 &quot; 双引号 \\a 响铃 \\b 退格(Backspace) \\e 转义 \\000 空 \\n 换行 \\v 纵向制表符 \\t 横向制表符 \\r 回车 \\f 换页 \\oyy 八进制数，yy代表的字符，例如：\\o12代表换行 \\xyy 十六进制数，yy代表的字符，例如：\\x0a代表换行 \\other 其它的字符以普通格式输出 4. 字符串的格式化把字符串按照一定格式打印或者填充. python 字符串格式化符号: 符 号 描述 %c 格式化字符及其ASCII码 %s 格式化字符串 %d 格式化整数 %u 格式化无符号整型 %o 格式化无符号八进制数 %x 格式化无符号十六进制数 %X 格式化无符号十六进制数（大写） %f 格式化浮点数字，可指定小数点后的精度 %e 用科学计数法格式化浮点数 %E 作用同%e，用科学计数法格式化浮点数 %g %f和%e的简写 %G %F 和 %E 的简写 %p 用十六进制数格式化变量的地址 格式化操作符辅助指令: 符号 功能 * 定义宽度或者小数点精度 - 用做左对齐 + 在正数前面显示加号( + ) 在正数前面显示空格 # 在八进制数前面显示零(‘0’)，在十六进制前面显示’0x’或者’0X’(取决于用的是’x’还是’X’) 0 显示的数字前面填充’0’而不是默认的空格 % ‘%%’输出一个单一的’%’ (var) 映射变量(字典参数) m.n. m 是显示的最小总宽度,n 是小数点后的位数(如果可用的话) 格式化由两种方法 利用百分号（%） 在字符串中，利用%表示一个特殊的含义，表示对字符进行格式化 1234# 案例1 ：s = \"I love %s\"print(s)# 结果显示 ：I love %s 1234567# 案例2 ：s = \"I love %s\"print(\"I love %s\" %\"qzp\")# 结果显示 ：I love qzpprint( s %\"qzp\")# 结果显示 ：I love qzp 123456789# 案例3 ：# 留意下面两句print的区别和结果s = \"I am %d years old\"print(s)print(s %18)# 结果显示： I am %d years oldI am 18 years old 12345678910# 案例4 ：# 如果出现多个占位符，则相应内容需要用括号括起来s = \"I am %s, i am %d years old\"s1 = \"I am %.2fKG, i am %.2fm Heigh\"print(s)print(s %(\"qzp\", 18))print(s1 %(50.1, 1.84))# 结果显示：I am %s, i am %d years oldI am 50.1KG, i am 1.84 Heigh 利用format函数 直接用format函数进行格式化，代替以前的百分号 推荐使用这种方法 在使用上，以{}和：代替%号，后面用format带参数完成 12345678910# 案例1：# 在字符串中调用s = \"I love &#123;&#125;\".format(\"qzp\")print(s)# 结果显示I love qzpi am 18 years old, I love qzp and i am 18 years old 1234567# 案例2# 在print中调用s = \"&#123;&#125; &#123;&#125;!\"print(s.format(\"Hello\",\"World\"))# 结果显示Hello World！ 1234567# 案例3# 设置指定位置s = \"i am &#123;1&#125; years old, I love &#123;0&#125; and i am &#123;1&#125; years old\".format(\"qzp\", 18)print(s)# 结果显示i am 18 years old, I love qzp and i am 18 years old format数字格式化： 12print(\"&#123;:.2f&#125;\".format(3.1415926));3.14 数字 格式 输出 描述 3.1415926 {:.2f} 3.14 保留小数点后两位 3.1415926 {:+.2f} +3.14 带符号保留小数点后两位 -1 {:+.2f} -1.00 带符号保留小数点后两位 2.71828 {:.0f} 3 不带小数 5 {:0&gt;2d} 05 数字补零 (填充左边, 宽度为2) 5 {:x&lt;4d} 5xxx 数字补x (填充右边, 宽度为4) 10 {:x&lt;4d} 10xx 数字补x (填充右边, 宽度为4) 1000000 {:,} 1,000,000 以逗号分隔的数字格式 0.25 {:.2%} 25.00% 百分比格式 1000000000 {:.2e} 1.00e+09 指数记法 13 {:&gt;10d} 13 右对齐 (默认, 宽度为10) 13 {:&lt;10d} 13 左对齐 (宽度为10) 13 {:^10d} 13 中间对齐 (宽度为10) 11 ‘{:b}’.format(11)‘{:d}’.format(11)‘{:o}’.format(11)‘{:x}’.format(11)‘{:#x}’.format(11)‘{:#X}’.format(11) 10111113b 0xb0xB 进制 ^, &lt;, &gt; 分别是居中、左对齐、右对齐，后面带宽度， : 号后面带填充的字符，只能是一个字符，不指定则默认是用空格填充。 + 表示在正数前显示 +，负数前显示 -； （空格）表示在正数前加空格 b、d、o、x分别是二进制、十进制、八进制、十六进制。 5.内建函数 很多语言字符串使用string表示，但是python中用str表示字符串 巧用help函数 1help（str） 内建函数实现了string模块的大部分使用方法，如下表所示列出了目前字符串内建支持的方法。 方法 描述 string.capitalize() 把字符串的第一个字符大写 string.center(width) 返回一个原字符串居中,并使用空格填充至长度 width 的新字符串 string.count(str, beg=0, end=len(string)) 返回 str 在 string 里面出现的次数，如果 beg 或者 end 指定则返回指定范围内 str 出现的次数 string.decode(encoding=’UTF-8’, errors=’strict’) 以 encoding 指定的编码格式解码 string，如果出错默认报一个 ValueError 的 异 常 ， 除非 errors 指 定 的 是 ‘ignore’ 或 者’replace’ string.encode(encoding=’UTF-8’, errors=’strict’) 以 encoding 指定的编码格式编码 string，如果出错默认报一个ValueError 的异常，除非 errors 指定的是’ignore’或者’replace’ string.endswith(obj, beg=0, end=len(string)) 检查字符串是否以 obj 结束，如果beg 或者 end 指定则检查指定的范围内是否以 obj 结束，如果是，返回 True,否则返回 False. string.expandtabs(tabsize=8) 把字符串 string 中的 tab 符号转为空格，tab 符号默认的空格数是 8。 string.find(str, beg=0, end=len(string)) 检测 str 是否包含在 string 中，如果 beg 和 end 指定范围，则检查是否包含在指定范围内，如果是返回开始的索引值，否则返回-1 string.format() 格式化字符串 string.index(str, beg=0, end=len(string)) 跟find()方法一样，只不过如果str不在 string中会报一个异常. string.isalnum() 如果 string 至少有一个字符并且所有字符都是字母或数字则返回 True,否则返回 False string.isalpha() 如果 string 至少有一个字符并且所有字符都是字母则返回 True,否则返回 False string.isdecimal() 如果 string 只包含十进制数字则返回 True 否则返回 False. string.isdigit() 如果 string 只包含数字则返回 True 否则返回 False. string.islower() 如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回 True，否则返回 False string.isnumeric() 如果 string 中只包含数字字符，则返回 True，否则返回 False string.isspace() 如果 string 中只包含空格，则返回 True，否则返回 False. string.istitle() 如果 string 是标题化的(见 title())则返回 True，否则返回 False string.isupper() 如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回 True，否则返回 False string.join(seq) 以 string 作为分隔符，将 seq 中所有的元素(的字符串表示)合并为一个新的字符串 string.ljust(width) 返回一个原字符串左对齐,并使用空格填充至长度 width 的新字符串 string.lower() 转换 string 中所有大写字符为小写. string.lstrip() 截掉 string 左边的空格 string.maketrans(intab, outtab]) maketrans() 方法用于创建字符映射的转换表，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。 max(str) 返回字符串 str 中最大的字母。 min(str) 返回字符串 str 中最小的字母。 string.partition(str) 有点像 find()和 split()的结合体,从 str 出现的第一个位置起,把 字 符 串 string 分 成 一 个 3 元 素 的 元 组 (string_pre_str,str,string_post_str),如果 string 中不包含str 则 string_pre_str == string. string.replace(str1, str2, num=string.count(str1)) 把 string 中的 str1 替换成 str2,如果 num 指定，则替换不超过 num 次. string.rfind(str, beg=0,end=len(string) ) 类似于 find()函数，不过是从右边开始查找. string.rindex( str, beg=0,end=len(string)) 类似于 index()，不过是从右边开始. string.rjust(width) 返回一个原字符串右对齐,并使用空格填充至长度 width 的新字符串 string.rpartition(str) 类似于 partition()函数,不过是从右边开始查找 string.rstrip() 删除 string 字符串末尾的空格. string.split(str=””, num=string.count(str)) 以 str 为分隔符切片 string，如果 num 有指定值，则仅分隔 num+ 个子字符串 string.splitlines([keepends]) 按照行(‘\\r’, ‘\\r\\n’, \\n’)分隔，返回一个包含各行作为元素的列表，如果参数 keepends 为 False，不包含换行符，如果为 True，则保留换行符。 string.startswith(obj, beg=0,end=len(string)) 检查字符串是否是以 obj 开头，是则返回 True，否则返回 False。如果beg 和 end 指定值，则在指定范围内检查. string.strip([obj]) 在 string 上执行 lstrip()和 rstrip() string.swapcase() 翻转 string 中的大小写 string.title() 返回”标题化”的 string,就是说所有单词都是以大写开始，其余字母均为小写(见 istitle()) string.translate(str, del=””) 根据 str 给出的表(包含 256 个字符)转换 string 的字符,要过滤掉的字符放到 del 参数中 string.upper() 转换 string 中的小写字母为大写 string.zfill(width) 返回长度为 width 的字符串，原字符串 string 右对齐，前面填充0 三、List|列表四、Tuple|元组五、Dictionary|字典六、Sets|集合","categories":[{"name":"Python","slug":"Python","permalink":"http://quincyper.github.io/categories/Python/"},{"name":"变量和数据类型","slug":"Python/变量和数据类型","permalink":"http://quincyper.github.io/categories/Python/%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"},{"name":"数据类型","slug":"Python/变量和数据类型/数据类型","permalink":"http://quincyper.github.io/categories/Python/%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"}],"tags":[{"name":"人生苦短我学Python","slug":"人生苦短我学Python","permalink":"http://quincyper.github.io/tags/%E4%BA%BA%E7%94%9F%E8%8B%A6%E7%9F%AD%E6%88%91%E5%AD%A6Python/"}]},{"title":"Shell","slug":"shell","date":"2020-03-29T03:08:38.000Z","updated":"2020-05-02T10:38:33.170Z","comments":true,"path":"2020/03/29/shell/","link":"","permalink":"http://quincyper.github.io/2020/03/29/shell/","excerpt":"Chapter 4 shell编程 笔记","text":"Chapter 4 shell编程 笔记 shell编程 简介： Shell是一种具备特殊功能的程序，是使用者和kernel间的一个接口 Shell 是一种功能强大的解释型编程语言 Shell 脚本语言非常擅长处理文本类型的数据 规范： 以#!开头：表示系统用解释器执行此脚本 12#!/bin/bash#!/bin/ksh 以#注释： 通常注释包括 123456# 脚本名称# 脚本功能# 作者及联系方式# 版本更新记录# 版权声明# 对算法做简要说明（如果是复杂脚本） 执行： 方式1 ： source filename 或者 . filename 12source filename . filename 在当前shell环境下读取并执行 方式2 ： sh(或bash、ksh…) filename 1sh(或bash、ksh…) filename 新建一个子shell读取并执行filename中的命令 子shell继承父shell的环境变量，但子shell新建的、改变的变量不会被带回父shell 方式3 ： ./filename 1.&#x2F;filename 打开一个子shell来读取并执行filename中命令 子shell必须有可执行的权限 一、shell变量1. 变量的使用Shell编程中，使用变量无需事先声明 变量的赋值 1变量名=变量值 #（注意：不能留空格） 变量的引用 1$var #引用var变量 2. shell变量类型 1）用户自定义变量 有用户自己定义、修改和使用 shell的默认赋值是字符串赋值 1234var=1 var=$var+1 echo $var#打印的结果是var的地址值加一后的值 为了达到var的值加1的效果 通常有下面三种方式 1234567let \"var+=1\"var=$[$var+1]#前两种方式在bash下有效，在sh下会出错var=`expr $var + 1` #注意加号两边的空格 2）环境变量 Shell环境变量由系统维护，用于设置用户的Shell工作环境 只有少数的变量用户可以修改其值 在声明或赋值时使用export 123export 变量名export 变量名=变量值 使用export说明的变量，在Shell以后运行的所有命令或程序中都可以访问 子shell更改的环境变量并不会带回到父shell 常用的环境变量 意义 HOME 当前用户的主目录 PATH 用冒号分隔的目录路径名Shell将顺序搜索这些目录，找到的第一个与命令名称一致的可执行文件将被执行 TERM 终端的类型 HOSTNAME 主机名称 SHELL 当前使用的是哪种shell PWD 当前工作目录的绝对路径名，该变量的取值随cd命令的使用而变化 3） 位置参数变量 位置参数变量是一组特殊的内置变量 跟在脚本名后面的用空格隔开的字符串 12345$1 # 表示第1个参数值$9 # 表示第9个参数值$&#123;10&#125; # 表示第10个参数值$&#123;11&#125; # 表示第11个参数值 用途： 从shell命令/脚本的命令行接受参数 在调用shell 函数时为其传递参数 4） 专用参数变量 命令行参数相关 命令行参数相关 作用 $* 将所有位置参量看成一个字符串(以空格间隔) $@ 将每个位置参量看成单独的字符串(以空格间隔) $0 命令行上输入的Shell程序名 $# 表示命令行上参数的个数 进程状态相关 进程状态相关 作用 $? 表示上一条命令执行后的返回值 $$ 当前进程的进程号 $! 显示运行在后台的最后一个作业的 PID $? 返回状态 $? 返回值 状态 0 成功 1-255 不成功 1 通用错误 126 命令或脚本没有执行权限 127 命令没有找到 123456789101112## 二、shell常用内置命令### 1.常规常用命令- &#96;echo&#96; | 显示 在屏幕上显示出由 arg 指定的字串 &#96;&#96;&#96;shell # 命令格式 echo arg export | 变量赋值 1234# 命令格式export 变量[=变量值]export shell可以用export把他的变量向下带入子shell，从而让子进程继承父进程中的环境变量 不带任何变量名的export语句将显示出当前所有的export变量 eval| 执行表达式 对参数进行两次扫描和替换 将所有的参数连接成一个表达式，并计算或者执行该表达式 参数中的任何变量都将被展开 12345678# 示例listpage=\"ls -l | more\"eval $listpageeval $(ssh-agent)eval newstr=\\$$str2eval echo \\$$&#123;x&#125;_URL 123456789# 思考以下三组命令的区别myfile=“cat file1.txt” echo $myfilemyfile=“cat file1.txt” eval echo $myfile myfile=“cat file1.txt” eval $myfile read| 键盘输入赋值 从键盘输入内容为变量赋值 12# 命令格式read -p \"信息\" [var1 var2 ...] 123# 示例read -p \"Enter you name:\"echo \"I know your name is $REPLY\" 若省略变量名，则将输出的内容默认存入RELPLY变量中 readonly | 只读的变量赋值 不能被清除或重新赋值的变量 12# 命令格式readonly variable 12345678# 示例echo -e \"What is your name? \\c\"read nameecho \"Hello $name\"readonly nameecho -e \"What is your another name? \\c\"read nameecho \"Oh $name\" 2.重要编程命令 shift|左移 12# 命令格式shift [n] 将位置参量列表依次左移n次（缺省为左移一次） 一旦位置参量列表被移动，最左端的那个参数就会从列表中删除 经常与循环结构语句一起使用，以便遍历每一个位置参数 123456789101112131415# 示例#!/bin/#!/bin/shsh# ScriptName: pp_s_shift.shsh# To test Positional Pararameters &amp; Shift.echo \"The script name is: $0\"echo '$1'=$1,'$2'=$2,'$3'=$3,'$4'=$4 -- '$#'=\"$#\"echo '$@': \"$@\"shitf # 向左移动所有的位置1次echo '$1'=$1,'$2'=$2,'$3'=$3,'$4'=$4 -- '$#'=\"$#\"echo '$@': \"$@\"shitf 2 # 向左移动所有的位置2次echo '$1'=$1,'$2'=$2,'$3'=$3,'$4'=$4 -- '$#'=\"$#\"echo '$@': \"$@\"$./pp_shift.sh 1 b 3 d 5 f declare | 声明变量 内置命令 declare 可用来声明变量 1declare [选项] variable[=value] 选项 含义 -r 将变量设为只读( readonly ) -x 将变量输出到子shell 中（export 为全局变量） -i 将变量设为整型( integer ) -a 将变量设置为一个数组( array ) -f 列出函数的名字和定义( function ) -F 只列出函数名 12345678910111213# 示例declare myname=lbwdeclare -r myname=lbwunset mynamedeclare mynanme=\"lbw NB\"declare -x myname2=mafeifeimyname2=mafeifeideclare -x myname2declare 3.数字运算相关命令 let | 算术运算 expr | 通用的表达式计算 printf | 按照指定格式输出 在之后的整数运算中对运算相关的内置命令会详细介绍 4.退出与读入 exit|退出 退出脚本或当前shell 12# 示例exit n n 是一个 0-255 的整数 0 表示成功退出，非零表示遇到某种失败 返回值 被保存在状态变量$?中 .(点) | 读入 使Shell读入指定的Shell程序文件并依次执行文件中的所有语句 12# 示例. Shell程序文件名 三、特殊字符1.一般通配符可以同时使用多个通配符 一般通配符 功能 备注 * 匹配不限长度的多个字符 ? 匹配任意一个字符 [] 匹配字符组所限定的任何一个字符 ▪ 字符组可以由直接给出的字符组成，也可以由字符和连字符(-)组成▪ f[a-d]与f[abcd]作用相同 ! 表示不在方括号中所列出的字符 f[!1-9].c 表示以f打头，后面一个字符不是数字1至9的.c文件名，它匹配fa.c、fb.c、fm.c等 2.模式表达式bash除支持一般通配符外，还提供扩展模式匹配表达式 模式表达式 作用 示例 *(模式表) 匹配给定模式表中 “模式” 的0次或多次出现，各模式之间以 “ | ” 分开 file*(.c|.o)将匹配文件file、file.c、file.o、file.c.c、file.o.o、file.c.o、file.o.c等 +(模式表) 匹配给定模式表中 “模式” 的1次或多次出现，各模式之间以 “ | ” 分开 file(.c|.o)将匹配ile.c、file.o、file.c.o、file.c.c等。*但不匹配file**。 ?(模式表) 匹配模式表中 任何一种“模式” 的0次或1次出现，各模式之间以“ |”分开 file?(.c|.o)匹配file、file.c和file.o，不匹配file. c. c、file. c.o等。 @(模式表) 匹配模式表中 给定“模式” 的1次出现，各模式之间以“|”分开 file@(.c|.0)只匹配file.c和file.o !(模式表) 除给定模式表中的一个“模式”之外，它可以匹配其它任何东西 3.引号Shell中引号有3种：单引号、双引号和倒引号。 双引号 如果在赋给变量的值中要含有空格、制表符或换行符，要用双引号 1names=\"Zhangsan Lisi Wangwu\" 在双引号内除 $ ，` ， \\ 仍保留其特殊功能外，其余字符均作为普通字符对待。 $ 表示变量替换 ` 倒引号表示命令替换 \\ 为转义字符 1echo “Dir is `pwd` and logname is $LOGNAME” 单引号 由单引号括起来的字符都作为普通字符出现，即使是$，`，\\ 123echo ' The time is ` date ` , the file is $HOME/abc 'The time is ` date ` , the file is $HOME/abc 倒引号 倒引号括起来的字符串被shell解释为命令行，在执行时，Shell会先执行该命令行，并以它的标准输出结果取代整个倒引号部分。 1234echo “current directory is ` pwd `”# 结果显示current directory is /home/mengqc 因此倒引号有命令替换的作用，可以将一个命令的执行结果赋值给变量。 命令替换一共有两种形式：倒引号、$ ` 命令表 ` 12# 将当前工作目录的全路径名存放到变量dir中dir=`pwd` $(命令表) 12345# 将当前工作目录的全路径名存放到变量dir中dir=$(pwd) #注意#shell中不能随意添加和去掉括号 4.括号 括号类型 作用 () 1.命令组2.结合$进行命令替换3.初始化数组array=(a b c d) [] 1.字符范围2.数组编号3.算术运算4.条件判断 {} 替换 ( () ) 1.算术运算2.for循环中的算术运算比较for((i=0;i&lt;5;i++)) [ [] ] 条件判断等 5. 特殊字符的组合使用在实际运用中 假如我们想把 str1中的字符串复制到 str2中，然后用str2来显示，那么直接使用用以下的方法是不能成功的 123456789# 案例1# 把 str1中的字符串复制到 str2中# 显示str2中的值str1=\"Hello World\"str2=str1echo $str2# 结果展示：str1 因此我们得需要使用一定的符号与其他符号相结合对变量进行间接的引用，这样才能达到案例中想要得到的效果。这样的方法我们称之为变量的间接引用 。 123456789101112131415# 实例1-1# 通过 str2的值来引用 str1的值# bash2.0以上才支持str1=\"Hello World\"str2=str1newstr=$&#123;!str2&#125; echo $newstr # 方法1echo \" 1 \"echo $&#123;!str2&#125; # 方法2# 结果展示：Hello World 1 Hello World 12345678910111213# 实例1-2# 通过 str2的值来引用 str1的值# bash都支持eval newstr=\\$$str2 echo $newstrHello World # 方法1echo \" 1 \"eval echo \\$$str2 # 方法2# 结果展示：Hello World 1 Hello World 12345678910111213# 实例2-1# 通过 x的值来引用 CENTOS_URL的值# bash2.0以上才支持x=\"CENTOS\" CENTOS_URL=\"http://mirrors.163.com/centos/\"newstr=$&#123;x&#125;_URLecho $newstrecho $&#123;!newstr&#125;# 结果展示：CENTOS_URLhttp://mirrors.163.com/centos/ 123456789101112# 实例2-2# 通过 x的值来引用 CENTOS_URL的值# bash都支持x=\"CENTOS\" CENTOS_URL=\"http://mirrors.163.com/centos/\"eval newstr=\\$$&#123;x&#125;_URL # 方法1echo $newstreval echo \\$$&#123;x&#125;_URL # 方法2# 结果展示：http://mirrors.163.com/centos/http://mirrors.163.com/centos/ 四、整数运算1.定义 bash上的变量没有严格的类型定义，本质上bash变量都是字符串。 若一个字面常量或变量的值是纯数字的（不包含字母或其他字符），bash可以将其当作长整型值，并可做算术运算和比较运算。 bash允许显式地声明整型变量 1declare -i 变量名 常见的算术运算符： 运算方式 运算符号 四则运算 +、 -、 *、 / 幂运算、模运算、取余 **、 % 按位左移、按位右移 &lt;&lt;、 &gt;&gt; 按位与、按位异或、按位或 &amp;、 ^、 赋值运算 =、 +=、 -= 、 *=、 /= 、 %=、 &lt;&lt;= 、 &gt;&gt;= 、 &amp;=、 ^=、|= 比较操作符 &lt;、 &gt;、 &lt;=、 &gt;=、 ==、 != 逻辑与、逻辑或 &amp;&amp;、|| 注：按位运算是以二进制形式进行的。 2.$[] 运算拓展用 $[···]，$((···))进行整数运算时，括号内变量前的美元符号 $可以省略。 123$[expression]#等同于$((expression)) 感受${...} $(...) $[...] $((...))的不同作用 123# 示例 1num1=$[4+1]; echo $num1num1=$(($num1*2-3)); echo $num1 1234# 示例 2((num2=2+3**2-1001%5)); echo $num2num2=$((2+3**2-1001%5)); echo $num2echo $((2+3**2-1001%5)) 3.运算相关内置命令 let | 算术运算 let 内置命令用于算术运算 复制符号和运算符两边不能留空格 如果将字符串复制给一个整型变量时，变量的值为0 如果变量的值是字符串，则进行算术运算时设为0 将let后的语句放在引号内，则可忽略空格的特殊含义 1234567# 示例num2=1;echo $num2let num2=4+1;echo $num2let num2=$num2+1;echo $num2# 用引号忽略空格的特殊含义let \"num2=4 + 1\" 注： 用let命令进行算术运算时，最好加双引号 expr | 表达式计算 通用的表达式计算命令 表达式中参数与操作符必须以空格分开 表达式中的运算可以是算术运算，比较运算，字符串运算和逻辑运算 乘法符号和括号需要被转义 12345# 示例expr 5 % 3expr 5 \\* 3 #乘法符号必须被转义expr 2 + 5 \\* 2 - 3 % 2expr \\( 2 + 5 \\) \\* 2 - 3 #括号必须被转义 printf | 格式输出 printf可用来按指定的格式输出变量 1printf format 输出参数列表 格式说明符 格式说明符 类型 格式说明符 类型 c 字符型 g/G 浮点数（自动） d 十进制整数 o 八进制 e/E 浮点数（科学计数法） s 字符串 f 浮点数（小数形式） x/X 十六进制 末尾可添加的拓展 符号 作用 符号 作用 \\a 警铃 \\t 水平制表符 \\b 退后一格 \\v 垂直制表符 \\n 换行 \\ \\ 反斜杠 \\f 换页 \\ “ 双引号 \\r 回车 %% 百分号 12345# 示例printf \"The number is: %.2f\\n\" 100printf \"%-20s|%12.5f|\\n\" \"Joy\" 10printf \"%-10x%010o%+10d\\n\" 20 20 20printf \"%6d\\t%6o\\\"%6x\\\"\\n\" 20 20 20 4.数组变量Bash2.X 以上支持一位数组，下标从0开始。 数组赋值 使用declare 声明（declare详细使用请看 二、shell常用内置命令2.重要编程命令） 直接给变量名加下标 1234567# 使用decare声明declare -a varvar=（item1 item2 item3 ...）#直接给变量名加下标var=（item1 item2 item3 ...）var[n]=value 数组引用 1$&#123;variable[n]&#125; 123456# 示例declare -a stustu=(math1 math2 math3)echo $&#123;stu[0]&#125; # 列出stu的第一个元素echo $&#123;stu[*]&#125; # 列出stu的所有元素echo $&#123;#stu[*]&#125; # 给出数组stu中的个数 数组与数组元素的删除 123# 示例unset stu[0] # 删除stu的第一个元素unset stu # 删除整个数组 数组赋值无须按顺序 123# 示例：x[3]=100;echo $&#123;x[*]&#125;state=(ME [3]=CA [2]=NT);echo $&#123;state[*]&#125; 五、条件测试1.定义条件测试可以判断某个特定条件是否满足 条件测试的种类 命令 成功 | 失败 表达式 真 | 假 条件测试的值 Bash中没有布尔类型变量，因此 退出状态为0 ：表示 命令成功 或 表达式为真 退出状态非0：表示 命令失败 或 表达式为假 状态变量$?中保存了退出状态的值 12345678# 示例Host=centos1ping -c 1 $Hostecho $?ping -c 1 $Host &gt; /dev/null \\ &amp;&amp; echo \"$Host is up.\" \\ || echo \"$Host is down.\" 条件测试语句 语句格式 格式1： 1test 测试表达式 格式2： 1[ 测试表达式 ] 格式3： 1[[ 测试表达式 ]] # （Bash2.X以上版本） 语句注意： 格式1 和 格式2 是等价的，格式3是扩展的 test 命令 在 [[ ]] 中可以使用通配符进行模式匹配 &amp;&amp;, ||, &lt;, 和&gt;能够正常存在于[[ ]]中，但不能在[] 中出现 [ 和 [[ 之后的字符必须为空格，]和]]之前的字符必须为空格 要对整数进行关系运算也可以使用 (( )) 进行测试 2.条件测试操作符 文件测试操作符 测试文件是否存在，文件属性，访问权限等 操作符 作用 [ -f fname ] fname存在且是普通文件时，返回真( 即返回0) [ -L fname ] fname存在且是链接文件时，返回真 [ -d fname ] fname存在且是一个目录时，返回真 [ -e fname ] fname（文件或目录）存在时，返回真 [ -s fname ] fname存在且大小大于0时，返回真 [ -r fname ] fname（文件或目录）存在且可读时，返回真 [ -w fname ] fname（文件或目录）存在且可写时，返回真 [ -x fname ] fname（文件或目录）存在且可执行时，返回真 更多文件测试符参见test的在线帮助，输入命令man test 字符串测试操作符 字符串安从左到右对应字符的ASCII码进行比较 操作符 作用 [ -z string ] 如果字符串string长度为0，返回真 [ -n string ] 如果字符串string长度不为0，返回真 [ str1 = str2 ] 两字符串相等（也可使用 == ）返回真 [ str1 != str2 ] 两字符串不等返回真 [[ str1 == str2 ]] 两字符串相同返回真 [[ str1 != str2 ]] 两字符串不相同返回真 [[ str1 =~ str2 ]] str2是str1的子串返回真 [[ str1 &gt; str2 ]] str1大于str2返回真 [[ str1 &lt; str2 ]] str1小于str2返回真 检查空值 1234[ \"$name\" = \"\" ][ -z \"$name\" ][ ! \"$name\" ][ \"X$&#123;name&#125;\" = \"X\" ] 检查非空值 1234[ \"$name\" != \"\" ][ -n \"$name\" ][ \"$name\" ][ \"X$&#123;name&#125;\" != \"X\" ] 整数二元比较操作符 整数测试主要是两个整数比较大小关系 等于eq（equal ） 大于gt（greater） 小于lt（little） 操作符两边必须留空格的情况 字母需要中括号 操作符 作用 [ int1 -eq int2 ] int1 等于 int2 返回真 [ int1 -ne int2 ] int1 不等于 int2 返回真 [ int1 -gt int2 ] int1 大于 int2 返回真 [ int1 -ge int2 ] int1 大于或等于 int2 返回真 [ int1 -lt int2 ] int1 小于 int2 返回真 [ int1 -le int2 ] int1 小于或等于 int2 返回真 操作符 作用 [ [ int1 -eq int2 ] ] int1 等于 int2 返回真 [ [ int1 -ne int2 ] ] int1 不等于 int2 返回真 [ [ int1 -gt int2 ] ] int1 大于 int2 返回真 [ [ int1 -ge int2 ] ] int1 大于或等于 int2 返回真 [ [ int1 -lt int2 ] ] int1 小于 int2 返回真 [ [ int1 -le int2 ] ] int1 小于或等于 int2 返回真 操作符两边空格可省略的情况 符号需要小括号 操作符 作用 ( ( int1 == int2 ) ) int1 等于 int2 返回真 ( ( int1 != int2 ) ) int1 不等于 int2 返回真 ( ( int1 &gt; int2 ) ) int1 大于 int2 返回真 ( ( int1 &gt;= int2 ) ) int1 大于或等于 int2 返回真 ( ( int1 &lt; int2 ) ) int1 小于 int2 返回真 ( ( int1 &lt;= int2 ) ) int1 小于或等于 int2 返回真 12345678# 示例a=linux ; b=unixn=5 ; m=7[ $a != $b ] ; echo $?0[[ $a != $b ]] ;0 逻辑运算符 与 a &amp;&amp; 或 o || 非！ 符号 作用 [ expr1 -a expr2 ] 逻辑与，都为真时，结果为真 [ expr1 -o expr2 ] 逻辑或，有一个为真时，结果为真 [ ! expr ] 逻辑非 符号 作用 [ [ expr1 &amp;&amp; expr2 ] ] 逻辑与，都为真时，结果为真 [ [ expr1 || expr2 ] ] 逻辑或，有一个为真时，结果为真 [ [ ! expr ] ] 逻辑非 符号 作用 ( ( expr1 &amp;&amp; expr2 ) ) 逻辑与，都为真时，结果为真 ( ( expr1 || expr2 ) ) 逻辑或，有一个为真时，结果为真 ( ( ! expr ) ) 逻辑非 注意： 不能随便添加括号 不能在 (( )) 中做字符串比较 &amp;&amp; 有时候是做命令聚合 而不是逻辑运算 1# 案例 六、流程控制 分支 if 条件语句 case 选择语句 循环 for 循环语句 while 循环语句 until 循环语句 select 循环与菜单 1.分支结构 | if 语句语法 if 语法结构 12345678910if expr1 # 如果 expr1 为真(返回值为0)then # 那么 commands1 # 执行语句块 commands1elif expr2 # 若 expr1 不真，而 expr2 为真then # 那么 commands2 # 执行语句块 commands2 ... ... # 可以有多个 elif 语句else # else 最多只能有一个 commands4 # 执行语句块 commands4fi # if 语句必须以单词 fi 终止 实际案例 2.分支结构 | case 语句语法 case 语法结构 123456789101112case expr in # expr为表达式，关键词 in不要忘！ pattern1) # 若 expr与 pattern1匹配，注意括号 commands1 # 执行语句块 commands1 ;; # 跳出 case结构 pattern2) commands2 ;; ... ... # 可以有任意多个模式匹配 *) # 若 expr与上面的模式都不匹配 commands # 执行语句块 commands ;; # 跳出 case结构esac # case语句必须以 esac终止 表达式 expr 按顺序匹配每个模式，一旦有一个模式匹配成功，则执行该模式后面的所有命令，然后退出 case。 如果 expr没有找到匹配的模式，则执行缺省值 “ *) ” 后面的命令块 ( 类似于 if 中的 else)； “ *)” 可以不出现。 所给的匹配模式 pattern中可以含有通配符和“ |”。 每个命令块的最后必须有一个双分号，可以独占一行，或放在最后一个命令的后面。 实际案例 3.循环结构 | for 语法 foreach 型 语法 1234for variable in list # 每一次循环，依次把列表 list中的一个值赋给循环变量do # 循环体开始的标志 commands # 循环变量每取一次值，循环体就执行一遍done # 循环结束的标志，返回循环顶部 说明 列表 list可以是命令替换、变量名替换、字符串和文件名列表 ( 可包含通配符 )，每个列表项以空格间隔 for循环执行的次数取决于列表 list中单词的个数 可以省略 in list，省略时相当于 in &quot;$@&quot; 实际案例 break和continue break 1break [n] 用于强行退出当前循环。 如果是嵌套循环，则 break命令后面可以跟一数字 n，表示退出第 n重循环（最里面的为第一重循环）。 continue 1continue [n] 用于忽略本次循环的剩余部分，回到循环的顶部，继续下一次循环。 如果是嵌套循环，continue命令后面也可跟一数字n，表示回到第 n重循环的顶部。 实际案例 c语言型 语法 1234for ((expr1;expr2;expr3)) # 执行 expr1do # 若 expr2的值为真时进入循环，否则退出 for循环commands # 执行循环体，之后执行 expr3done # 循环结束的标志，返回循环顶部 说明 通常 expr1和 expr3是算数表达式； expr2是逻辑表达式 expr1仅在循环开始之初执行一次 expr2在每次执行循环体之前执行一次 expr3 在每次执行循环体之后执行一次 实际案例 4.循环结构| while、 until 循环语法 while 语法 1234while expr # 执行 exprdo # 若expr的退出状态为0，进入循环，否则退出while commands # 循环体done # 循环结束标志，返回循环顶部 ubtil 语法 1234until expr # 执行 exprdo # 若expr的退出状态非0，进入循环，否则退出until commands # 循环体done # 循环结束标志，返回循环顶部 实际案例 while / untile /for 循环案例 5.循环结构 | select语法 语法 1234select variable in listdo # 循环开始的标志 commands # 循环变量每取一次值，循环体就执行一遍done # 循环结束的标志 说明 按数值顺序排列的菜单项（listitem）会显示到标准错误 菜单项的间隔符由环境变量 IFS 决定 用于引导用户输入的提示信息存放在环境变量 PS3 中 用户输入的值会被存储在内置变量 RELAY 中 用户直接输入回车将重新显示菜单 与 for循环类似，省略 in list时等价于 in “$*” 实际案例 七、参数控制在脚本中经常使用流程控制处理位置参数 循环结构： while for 多分枝结构：case 脚本中经常使用如下命令配合位置参数处理 shift getopts 八、shell函数1.定义 Shell函数就是一个子程序，用于完成特定任务。 例如，添加一个用户、判断用户是否为管理员的等 函数㐉之后可以被用它 的主程序调用 调用函数的方法和执行Shell命令一样 可以在Shell脚本中直接调用（函数需先定义） 也可在命令行上直接调用（定义函数的文件需先加载） 函数定义 123456789# 函数定义 1function 函数名 &#123; commands&#125;# 函数定义 2函数名()&#123; commands&#125; 函数调用 只需输入函数名即可调用函数 函数必须在调用之前定义 12345# 函数调用 1函数名# 函数调用 2函数名 参数1 参数2 .... 实际案例分析： 2.函数的存储方式 函数和调用它的主程序保存在同一个文件中 函数的定义必须出现在调用之前 函数和调用它的主程序保存在不同的文件中 主程序必须先使用 source 被调用函数的文件 3.函数的显示 显示当前Shell可见的所有函数名 1declare -F 显示当前Shell可见的所有（或指定）的函数定义 12declare -fdeclare -f &lt;functionName&gt; 4.函数的参数与变量 参数 调用参数时，使用位置参数的形式为函数传递参数 函数内的$1-${n} $*和 $@将被重置为调用函数之前的值 在主程序和函数中，$0始终代表脚本名 变量 函数内使用 local声明变量是局部变量 局部变量的作用域是当前函数以及其调用的所有函数 函数内未使用local声明变量是全局变量 主程序和函数中的同名变量是一个变量（地址一致） 实际案例分析： 5.函数的结束与返回值 当函数的最后一条命令执行结束函数即结束 函数的返回值就是最后一条命令的退出码 其返回值被保存在系统变量$?中 可以使用 return 或 exit 显式地结束函数 return [N] return 将结束函数的执行 可以使用 N 指定函数返回值 exit [N] exit 将中断当前函数及当前Shell的执行 可以使用 N 指定返回值 注意： 使用全局变量引用函数的值 不利于结构化编程 使用return和exit只能返回整数值 实际案例分析; 使用标准输出实现函数的返回值 是一种通用的方法，既能返回整数又能返回字符串 函数结束前使用echo 命令将结果显示到标准输出 调用函数时使用如下的格式将函数的输出结果存到变量RES 中，之后便可使用变量$RES 的值（或输出、或执行测试、或进一步处理等） 12RES=$(functionName)echo $RES 实际案例分析： 课后习题 写shell程序，从键盘输入一个数字，判断其为奇数还是偶数 写shell程序，输入一个数字，计算阶乘 写shell程序，获取当前用户名、ip地址","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://quincyper.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"嵌入式","slug":"学习笔记/嵌入式","permalink":"http://quincyper.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%B5%8C%E5%85%A5%E5%BC%8F/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://quincyper.github.io/tags/Linux/"}]},{"title":"Python|变量和数据类型| 变量 | ch_02","slug":"ch_02 Python 变量和数据类型 数据类型_数字","date":"2020-03-27T17:13:00.000Z","updated":"2020-05-02T10:26:39.734Z","comments":true,"path":"2020/03/28/ch_02 Python 变量和数据类型 数据类型_数字/","link":"","permalink":"http://quincyper.github.io/2020/03/28/ch_02%20Python%20%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B_%E6%95%B0%E5%AD%97/","excerpt":"Python|变量和数据类型|数据类型| 数据类型_数字|ch_02数据类型函数 type() 可以打印出数据类型。","text":"Python|变量和数据类型|数据类型| 数据类型_数字|ch_02数据类型函数 type() 可以打印出数据类型。 1234567a=1list_1=[1,2,3,4,5,6]array=np.array(list_1)print(type(a))print(type(list_1))print(type(array)) 一 、Number|数字python中数字类型没有大小限制，体现了其简洁性。 1. int | 有符号整型整型是没有小数部分，表示个数的数字。如自然数，0，负自然数。 整数进制数 二进制 | 0b 计算机常用 是计算机唯一能直接理解的数字 表示为0b开头的0,1代码 例如 0b01101, 0b10001 八进制 |0o 不常用 以0o开头的包含0-7的数字 例如 0o24 十六进制 |0x - 逢16进1 - 其实是每四位二进制表示一位十六进制数 - 包含0-9， a-f - 数字上以0x开头表示 十进制 |0d 18， 89， 178 123456789101112131415# 二进制age = 0b10010print(age)#八进制age = 0o102print(age)#十六进制age = 0xff #ff表示二进制的1111 1111print(age)#十进制age = 18print(18) 2. float | 浮点型浮点数即小数，计算机里边表示浮点数可以有条件省略。 浮点数如：3.1415 3. 0.14 .14 12345678height = 3.1415print(height) weight = .14print(weight)s = 3.print(s) 科学计数法 根数学定义中的科学计数法一样。在python中的写法是在e或者E的后面跟整数表示10的指数，如： 123.45 = 1.2345e2 0.1415 == 1.415e-1 12345height = 1.2345e2weight = 1.1415e-1print(height)print(weight) 3. bool | 布尔型bool值是表示真假的值，它只有两个值，True/False 布尔值可以直接跟数字操作 如果布尔值当数字使用 True=1，False=0 如果数字当布尔值使用 0=False，其余当作 True 12345678910#布尔值当数字操作age = 18 + Trueprint(age)#数字当布尔值使用a = 1if a: print(\"a是True\")else: print(\"a是False\") 4. complex | 复数型python中添加了对复数的计算，是其简便性的体现。 在python中负数的定义同数学定义一致，其虚部用 j 或者 J 来表示 123a = 5+3jb = 3jc =（3j） 5. 实例一些数值类型的实例： int long float complex 10 51924361L 0.0 3.14j 100 -0x19323L 15.20 45.j -786 0122L -21.9 9.322e-36j 080 0xDEFABCECBDAECBFBAEl 32.3e+18 .876j -0490 535633629843L -90. -.6545+0J -0x260 -052318172735L -32.54e100 3e+26J 0x69 -4721885298529L 70.2E-12 4.53e-7j 二、String|字符串三、List|列表四、Tuple|元组五、Dictionary|字典六、Sets|集合","categories":[{"name":"Python","slug":"Python","permalink":"http://quincyper.github.io/categories/Python/"},{"name":"变量和数据类型","slug":"Python/变量和数据类型","permalink":"http://quincyper.github.io/categories/Python/%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"},{"name":"数据类型","slug":"Python/变量和数据类型/数据类型","permalink":"http://quincyper.github.io/categories/Python/%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"}],"tags":[{"name":"人生苦短我学Python","slug":"人生苦短我学Python","permalink":"http://quincyper.github.io/tags/%E4%BA%BA%E7%94%9F%E8%8B%A6%E7%9F%AD%E6%88%91%E5%AD%A6Python/"}]},{"title":"Python|变量和数据类型| 变量 | ch_01","slug":"ch_01 Python 变量和数据类型 变量","date":"2020-03-27T14:22:00.000Z","updated":"2020-05-02T10:42:15.183Z","comments":true,"path":"2020/03/27/ch_01 Python 变量和数据类型 变量/","link":"","permalink":"http://quincyper.github.io/2020/03/27/ch_01%20Python%20%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%20%E5%8F%98%E9%87%8F/","excerpt":"Python|变量和数据类型| 变量 | ch_01变量变量就是可以重复使用的一个量，或者叫一个代号。 变量是存储在内存中的值。这就意味着在创建变量时会在内存中开辟一个空间。 基于变量的数据类型，解释器会分配指定内存，并决定什么数据可以被存储在内存中。 因此，变量可以指定不同的数据类型，这些变量可以存储整数，小数或字符。","text":"Python|变量和数据类型| 变量 | ch_01变量变量就是可以重复使用的一个量，或者叫一个代号。 变量是存储在内存中的值。这就意味着在创建变量时会在内存中开辟一个空间。 基于变量的数据类型，解释器会分配指定内存，并决定什么数据可以被存储在内存中。 因此，变量可以指定不同的数据类型，这些变量可以存储整数，小数或字符。 变量命名的规则 变量命名可以包含数字，下划线，大小写字母或者更多，一般不推荐除了前三种内容之外的符号。 数字 数字不可以打头 。 4man, 5for 是不可以的 X man4, for5是可以的 ✔ 下划线一般在python中，以下划线开头的内容具有特殊含义，不建议使用。 比如 _age, _name，理论可以，但强烈不推荐，在工程项目中容易引起不必要的理解混乱。（包括但不限于一个下划线开头和两个连续下划线开头） 大小写敏感 大小写不一样，俗称大小写敏感。同一个单词大小写不一样，在变量命名上看，变量来是不同的。 ForMan 跟 forMan不是一个变量名称 推荐使用命名规则： 使用具有固定含义的英文单词或者缩写， srv=server skt=socket,一般以posix命名规则为主 驼峰命名法 名称以单词自动连接，且每个单词首字母大写的命名方法。 大驼峰，每个单词第一个字母均大写 在Python中给类命名使用此法 MyFirstLove, IntOne 小驼峰，类似大驼峰，但第一个字母小写 在Python中一般给普通变量或者函数命名 myFirstLove, intOne posix写法 多个单词用下划线链接 单词全部小写 my_first_love, int_one 不推荐的命名 不建议命名使用“保留字”和“关键字”，会造成代码 变量命名必须避开，不能跟关键字和保留字重复 例如class， def， break，for 1234# 查看关键字的方法import keyword #引入关键字模块# 打印出系统全部关键字print(keyword.kwlist) 变量声明变量的声明主要分为三种方式 123var_name &#x3D; var_valuevar1 &#x3D; var2 &#x3D; var3 &#x3D; var_valuevar1, var2, var3 &#x3D; v1, v2, v3 单个变量赋值 123# 定义变量qzp_age，把18放入变量qzp_age中qzp_age &#x3D; 18print(qzp_age) 多个变量赋值 12345# 给age1， age2， age3 放入同样一个内容或值age1 &#x3D; age2 &#x3D; age3 &#x3D; 3print(age1)print(age2)print(age3) 多个不同定义 12345# 一行内给多个变量赋值age4, age5, age6 &#x3D; 4, 5, 6print(age4)print(age5)print(age6) 变量类型也称之为数据类型，按照标准数据来分类可分为六种： 数字类型 | Number 字符串类型 | string 列表 | list 元组 | tuple 字典 | Dictionary 集合 | set 其中列表（list） 元组（tuple） 字典（dictionary） 集合（set) 称之为内置数据结构","categories":[{"name":"Python","slug":"Python","permalink":"http://quincyper.github.io/categories/Python/"},{"name":"变量和数据类型","slug":"Python/变量和数据类型","permalink":"http://quincyper.github.io/categories/Python/%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"}],"tags":[{"name":"人生苦短我学Python","slug":"人生苦短我学Python","permalink":"http://quincyper.github.io/tags/%E4%BA%BA%E7%94%9F%E8%8B%A6%E7%9F%AD%E6%88%91%E5%AD%A6Python/"}]},{"title":"搭建测试","slug":"博客搭建测试","date":"2019-12-11T16:00:00.000Z","updated":"2020-05-02T14:19:24.200Z","comments":true,"path":"2019/12/12/博客搭建测试/","link":"","permalink":"http://quincyper.github.io/2019/12/12/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%B5%8B%E8%AF%95/","excerpt":"此篇为测试，如若符合要求后期会自动删除","text":"此篇为测试，如若符合要求后期会自动删除 创建一篇新文章1$ hexo new \"博客搭建测试\"1111111111 有一说一 qzp牛逼 本地查看静态网页1$ hexo server 我宣布 现在这里称之为qzp广场 全体起立 qzp牛逼 上传网页同步1$ hexo deploy 奥里给！qzp牛批！qzp牛批！qzp牛批！qzp牛批！qzp牛批！qzp牛批！qzp牛批！","categories":[{"name":"测试类","slug":"测试类","permalink":"http://quincyper.github.io/categories/%E6%B5%8B%E8%AF%95%E7%B1%BB/"},{"name":"test","slug":"测试类/test","permalink":"http://quincyper.github.io/categories/%E6%B5%8B%E8%AF%95%E7%B1%BB/test/"}],"tags":[{"name":"test","slug":"test","permalink":"http://quincyper.github.io/tags/test/"}]}]}