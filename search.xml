<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>5.1满血复活鹏少归来</title>
      <link href="/2020/05/01/5.1%E6%BB%A1%E8%A1%80%E5%A4%8D%E6%B4%BB%E9%B9%8F%E5%B0%91%E5%BD%92%E6%9D%A5/"/>
      <url>/2020/05/01/5.1%E6%BB%A1%E8%A1%80%E5%A4%8D%E6%B4%BB%E9%B9%8F%E5%B0%91%E5%BD%92%E6%9D%A5/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">关注微信公众号“云鹏今悔不卑飞”</br>输入“密码”可获取密码</br>悄咪咪的说 在“博客搭建测试”文章中可以扫码关注公众号哟</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="e7c64545135c4ffedfdfd77ac71dc01cd45508503716193cf9d89854def50e2e"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 浮生日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浮生日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown使用手册</title>
      <link href="/2020/04/04/markdown%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C%20/"/>
      <url>/2020/04/04/markdown%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C%20/</url>
      
        <content type="html"><![CDATA[<h1 id="Markdown使用手册"><a href="#Markdown使用手册" class="headerlink" title="Markdown使用手册"></a>Markdown使用手册</h1><h2 id="前序"><a href="#前序" class="headerlink" title="前序"></a>前序</h2><p>Markdown 能被使用来撰写电子书，如：Gitbook。当前许多网站都广泛使用 Markdown 来撰写帮助文档或是用于论坛上发表消息。例如：GitHub、简书、reddit、Diaspora、Stack Exchange、OpenStreetMap 、SourceForge等。</p><p>本教程将使用 Typora 编辑器来讲解 Markdown 的语法，Typora 支持 MacOS 、Windows、Linux 平台，且包含多种主题，编辑后直接渲染出效果。支持导出HTML、PDF、Word、图片等多种类型文件。</p><p><strong>Typora 官网</strong>：<a href="https://typora.io/" target="_blank" rel="noopener">https://typora.io/</a></p><p><strong>参考书籍</strong>：《了不起的Markdown》</p><a id="more"></a><h2 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h2><ol><li><p>使用#号标记</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br></pre></td></tr></table></figure></li><li><p>使用=和-标记一级和二级标题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">这是一级标题</span><br><span class="line">&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">这是二级标题</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li></ol><h2 id="二、段落格式"><a href="#二、段落格式" class="headerlink" title="二、段落格式"></a>二、段落格式</h2><h3 id="1-段落"><a href="#1-段落" class="headerlink" title="1. 段落"></a>1. 段落</h3><ul><li><p>段落换行</p><ul><li><p>段落的换行是使用两个以上空格加回车</p></li><li><p>当然也可以再段落后面使用一个空行来表示重新开始一个段落        </p></li></ul></li><li><p>段落居中 | 左对齐 | 右对齐</p><ul><li><p>居中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;center&gt;诶嘿&lt;&#x2F;center&gt;</span><br></pre></td></tr></table></figure></li><li><p>左对齐：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p align&#x3D;&quot;left&quot;&gt;诶嘿&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure></li><li><p>右对齐：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p align&#x3D;&quot;right&quot;&gt;诶嘿&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="2-字体"><a href="#2-字体" class="headerlink" title="2. 字体"></a>2. 字体</h3><ul><li><p>斜体</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*斜体文本*</span><br><span class="line">_斜体文本_</span><br></pre></td></tr></table></figure></li><li><p>粗体</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">**粗体文本**</span><br><span class="line">__粗体文本__</span><br></pre></td></tr></table></figure></li><li><p>粗斜体</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">***粗斜体文本***</span><br><span class="line">___粗斜体文本___</span><br></pre></td></tr></table></figure></li><li><p>下划线</p><p>下划线可以通过 HTML 的 <code>&lt;u&gt;</code> 标签来实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;u&gt;下划线&lt;&#x2F;u&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-分隔线"><a href="#3-分隔线" class="headerlink" title="3. 分隔线"></a>3. 分隔线</h3><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">***   （最少使用三个及其以上的*）</span><br><span class="line"></span><br><span class="line">* * * （插入空格）</span><br><span class="line"></span><br><span class="line">- - -  （减号）</span><br><span class="line"></span><br><span class="line">---------- （底线）</span><br></pre></td></tr></table></figure><h3 id="4-删除线"><a href="#4-删除线" class="headerlink" title="4. 删除线"></a>4. 删除线</h3><p>如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 <strong>~~</strong> 即可，</p><p>例如<del>BAIDU.COM</del>   ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RUNOOB.COM</span><br><span class="line">GOOGLE.COM</span><br><span class="line">~~BAIDU.COM~~</span><br></pre></td></tr></table></figure><h3 id="5-脚注"><a href="#5-脚注" class="headerlink" title="5. 脚注"></a>5. 脚注</h3><p>脚注是对文本的补充说明。Markdown 脚注的格式如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[^要注明的文本]</span><br></pre></td></tr></table></figure><p>以下实例演示了脚注的用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">创建脚注格式类似这样 [^RUNOOB]。</span><br><span class="line"></span><br><span class="line">[^qzp]: qzp牛批 - - 这里称之为qzp广场 全体起立！</span><br></pre></td></tr></table></figure><p>结果显示：</p><p>创建脚注格式类似于这样 [^qzp]</p><p>[^qzp]: qzp牛批 - - 这里称之为qzp广场 全体起立! </p><h2 id="三、列表"><a href="#三、列表" class="headerlink" title="三、列表"></a>三、列表</h2><h3 id="1-常规列表"><a href="#1-常规列表" class="headerlink" title="1. 常规列表"></a>1. 常规列表</h3><p>   Markdown 支持有序列表和无序列表。</p><ul><li><p>无序列表</p><p>使用星号(<code>*</code>)、加号(<code>+</code>)或是减号(<code>-</code>)作为列表标记：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">​</span><br></pre></td></tr></table></figure><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><ul><li>第一项</li><li>第二项</li><li>第三项<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>有序表</p><p>使用数字并加上 <strong>.</strong> 号来表示，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 第一项</span><br><span class="line">2. 第二项</span><br><span class="line">3. 第三项</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-列表嵌套"><a href="#2-列表嵌套" class="headerlink" title="2. 列表嵌套"></a>2. 列表嵌套</h3><p>列表嵌套只需在子列表中的选项添加<strong>四个空格</strong>即可：  </p><p>示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 第一项：</span><br><span class="line">    - 第一项嵌套的第一个元素</span><br><span class="line">    - 第一项嵌套的第二个元素</span><br><span class="line">2. 第二项：</span><br><span class="line">    - 第二项嵌套的第一个元素</span><br><span class="line">    - 第二项嵌套的第二个元素</span><br></pre></td></tr></table></figure><p>  效果展示：  </p><pre><code>1. 第一项：   - 第一项嵌套的第一个元素   - 第一项嵌套的第二个元素  2. 第二项：   - 第二项嵌套的第一个元素   - 第二项嵌套的第二个元素</code></pre><h2 id="四、区块"><a href="#四、区块" class="headerlink" title="四、区块"></a>四、区块</h2><h3 id="1-常规区块"><a href="#1-常规区块" class="headerlink" title="1. 常规区块"></a>1. 常规区块</h3><p>Markdown 区块引用是在段落开头使用 <strong>&gt;</strong> 符号 ，然后后面紧跟<strong>一个空格</strong>符号：  </p><ul><li><p>示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; 区块1引用</span><br><span class="line">&gt; 区块2引用</span><br><span class="line">&gt; 区块3引用</span><br></pre></td></tr></table></figure></li><li><p>效果展示：</p><blockquote><p>区块1引用</p><p>区块2引用</p><p>区块3引用</p></blockquote></li></ul><h3 id="2-区块嵌套"><a href="#2-区块嵌套" class="headerlink" title="2. 区块嵌套"></a>2. 区块嵌套</h3><p>区块是的引用也是可以嵌套的，一个 <strong>&gt;</strong> 符号是最外层，两个 <strong>&gt;</strong> 符号是第一层嵌套，以此类推。<br>示例代码：</p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; 最外层</span><br><span class="line">&gt; &gt; 第一层嵌套</span><br><span class="line">&gt; &gt; &gt; 第二层嵌套</span><br></pre></td></tr></table></figure><p>效果展示：</p><blockquote><p>最外层</p><blockquote><p>第一层嵌套</p><blockquote><p>第二层嵌套</p></blockquote></blockquote></blockquote><h3 id="3-区块中使用列表"><a href="#3-区块中使用列表" class="headerlink" title="3. 区块中使用列表"></a>3. 区块中使用列表</h3><p>区块中使用列表实例如下：<br>示例代码：</p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; 区块中使用列表</span><br><span class="line">&gt; 1. 第一项</span><br><span class="line">&gt; 2. 第二项</span><br><span class="line">&gt;     + 第一项</span><br><span class="line">&gt;     + 第二项</span><br><span class="line">&gt;     + 第三项</span><br></pre></td></tr></table></figure><p>效果展示：</p><blockquote><p>区块中使用列表</p><ol><li>第一项</li><li>第二项<ul><li>第一项</li><li>第二项</li><li>第三项</li></ul></li></ol></blockquote><h3 id="4-列表中使用区块"><a href="#4-列表中使用区块" class="headerlink" title="4. 列表中使用区块"></a>4. 列表中使用区块</h3><p>如果要在列表项目内放进区块，那么就需要在 <strong>&gt;</strong> 前添加<strong>四个空格</strong>的缩进。</p><p>区块中使用列表实例如下：</p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- 第一项</span><br><span class="line">    &gt; qzpnb</span><br><span class="line">    &gt; 全体起立哈哈哈</span><br><span class="line">- 第二项</span><br></pre></td></tr></table></figure><p>效果展示：</p><ul><li><p>第一项</p><blockquote><p>qzpnb<br>全体起立哈哈哈</p></blockquote></li><li><p>第二项</p></li></ul><h2 id="五、代码"><a href="#五、代码" class="headerlink" title="五、代码"></a>五、代码</h2><h3 id="1-函数-代码片段"><a href="#1-函数-代码片段" class="headerlink" title="1. 函数|代码片段"></a>1. 函数|代码片段</h3><p>​    如果是段落上的一个函数或片段的代码可以用反引号把它包起来（<strong>`</strong>）。 </p><p>示例代码：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">这里显示&#96;printf()&#96; 函数</span><br><span class="line">这里显示printf()&#96;函数&#96;</span><br></pre></td></tr></table></figure><p>效果展示：  </p><p>​    这里显示<code>printf()</code>函数</p><p>​    这里显示printf()<code>函数</code></p><h3 id="2-代码区块"><a href="#2-代码区块" class="headerlink" title="2. 代码区块"></a>2. 代码区块</h3><blockquote><ul><li><strong>常用表示</strong></li></ul><p>你可以用 <code>```</code> 包裹一段代码，并指定一种语言（也可以不指定）：</p><blockquote><ul><li><p>代码展示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">​&#96;&#96;&#96;javascript</span><br><span class="line">$(document).ready(function () &#123;</span><br><span class="line">    alert(&#39;RUNOOB&#39;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">    </span><br></pre></td></tr></table></figure></li><li><p>效果展示</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">'RUNOOB'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul></blockquote></blockquote><blockquote><ul><li><strong>其他表示</strong><br>代码区块使用 <code>4 个空格</code>或者<code>一个制表符（Tab 键）</code>。</li></ul><blockquote><ul><li><p>代码展示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo</span><br><span class="line">function</span><br><span class="line">echo</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></li><li><p>效果展示</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span></span><br><span class="line"><span class="function"><span class="keyword">function</span></span></span><br><span class="line"><span class="function"><span class="title">echo</span></span></span><br><span class="line"><span class="function">&#125; </span></span><br></pre></td></tr></table></figure></li></ul></blockquote></blockquote><h2 id="六、链接"><a href="#六、链接" class="headerlink" title="六、链接"></a>六、链接</h2><h3 id="1-直接使用"><a href="#1-直接使用" class="headerlink" title="1. 直接使用"></a>1. 直接使用</h3><p>直接引用链接地址的使用方法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;链接地址&gt;</span><br></pre></td></tr></table></figure><ul><li><p>示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;https:&#x2F;&#x2F;quincyper.github.io&gt;</span><br></pre></td></tr></table></figure></li><li><p>显示结果</p><p><a href="https://quincyper.github.io">https://quincyper.github.io</a></p></li></ul><h3 id="2-文本上链接"><a href="#2-文本上链接" class="headerlink" title="2. 文本上链接"></a>2. 文本上链接</h3><p>常规的文本上使用超链接的使用方法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[链接名称](链接地址)</span><br></pre></td></tr></table></figure><ul><li><p>示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是一个链接 [qzp的博客](https:&#x2F;&#x2F;quincyper.github.io)</span><br></pre></td></tr></table></figure></li><li><p>显示结果</p><p>这是一个链接 <a href="https://quincyper.github.io">qzp的博客</a></p></li></ul><h3 id="3-高级链接"><a href="#3-高级链接" class="headerlink" title="3. 高级链接"></a>3. 高级链接</h3><p>类似于使用脚注的方式进行链接。</p><p>我们可以通过变量来设置一个链接，变量赋值在文档末尾进行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[链接名称][脚注]</span><br><span class="line"></span><br><span class="line">[脚注]：网址</span><br></pre></td></tr></table></figure><ul><li>示例代码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">这个链接用 1 作为网址变量 [Google][1]</span><br><span class="line">这个链接用 quincyper 作为网址变量 [qzp的博客][quincyper]</span><br><span class="line">然后在文档的结尾为变量赋值（网址）</span><br><span class="line"></span><br><span class="line">  [1]: http:&#x2F;&#x2F;www.google.com&#x2F;</span><br><span class="line">  [quincyper]: http:&#x2F;&#x2F;quincyper.github.io&#x2F;</span><br></pre></td></tr></table></figure><ul><li><p>显示结果</p><p>这个链接用 1 作为网址变量 <a href="http://www.google.com/" target="_blank" rel="noopener">Google</a><br>这个链接用 quincyper 作为网址变量 <a href="http://quincyper.github.io/">qzp的博客</a><br>然后在文档的结尾为变量赋值（网址）  </p></li></ul><h2 id="七、图片"><a href="#七、图片" class="headerlink" title="七、图片"></a>七、图片</h2><h3 id="1-常规使用"><a href="#1-常规使用" class="headerlink" title="1. 常规使用"></a>1. 常规使用</h3><p>常规使用，Markdown 图片语法格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![alt 属性文本](图片地址)</span><br><span class="line"></span><br><span class="line">![alt 属性文本](图片地址 &quot;可选标题&quot;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">注：</span><br><span class="line">- 开头一个感叹号 !</span><br><span class="line">- 接着一个方括号，里面放上图片的替代文字</span><br><span class="line">- 接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 &#39;title&#39; 属性的文字</span><br></pre></td></tr></table></figure><ul><li>示例代码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![RUNOOB 图标](http:&#x2F;&#x2F;static.runoob.com&#x2F;images&#x2F;runoob-logo.png)</span><br><span class="line"></span><br><span class="line">![RUNOOB 图标](http:&#x2F;&#x2F;static.runoob.com&#x2F;images&#x2F;runoob-logo.png &quot;RUNOOB&quot;)</span><br></pre></td></tr></table></figure><ul><li><p>显示结果</p><p><img src="http://static.runoob.com/images/runoob-logo.png" alt="RUNOOB 图标"></p><p><img src="http://static.runoob.com/images/runoob-logo.png" alt="RUNOOB 图标" title="RUNOOB"></p></li></ul><h3 id="2-链接网址使用"><a href="#2-链接网址使用" class="headerlink" title="2. 链接网址使用"></a>2. 链接网址使用</h3><p>同样的也可以用类似于脚注的方式对图片网址使用变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> [文本文字][脚注].</span><br><span class="line"></span><br><span class="line">[脚注]: 含有图片的网址</span><br></pre></td></tr></table></figure><ul><li>示例代码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">这个链接用 1 作为网址变量 [RUNOOB][1].</span><br><span class="line">然后在文档的结尾为变量赋值（网址）</span><br><span class="line"></span><br><span class="line">[1]: http:&#x2F;&#x2F;static.runoob.com&#x2F;images&#x2F;runoob-logo.png</span><br></pre></td></tr></table></figure><ul><li><p>显示结果</p><p>这个链接用 2 作为网址变量 <a href="http://www.google.com/" target="_blank" rel="noopener">RUNOOB</a>.<br>然后在文档的结尾为变量赋值（网址）</p></li></ul><p><strong><em>注</em></strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Markdown 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的 &lt;img&gt; 标签。</span><br><span class="line">例如：</span><br><span class="line">&lt;img src&#x3D;&quot;http:&#x2F;&#x2F;static.runoob.com&#x2F;images&#x2F;runoob-logo.png&quot; width&#x3D;&quot;50%&quot;&gt;</span><br></pre></td></tr></table></figure><h2 id="八、表格"><a href="#八、表格" class="headerlink" title="八、表格"></a>八、表格</h2><h3 id="1-表格建立"><a href="#1-表格建立" class="headerlink" title="1.表格建立"></a>1.表格建立</h3><p>Markdown 制作表格使用 <code>|</code>来分隔不同的单元格，使用 <code>-</code> 来分隔表头和其他行。</p><p>语法格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|  表头   | 表头  |</span><br><span class="line">|  ----  | ----  |</span><br><span class="line">| 单元格  | 单元格 |</span><br><span class="line">| 单元格  | 单元格 |</span><br></pre></td></tr></table></figure><p>以上代码显示结果如下：</p><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>单元格</td><td>单元格</td></tr><tr><td>单元格</td><td>单元格</td></tr></tbody></table><h3 id="2-表格对齐方式"><a href="#2-表格对齐方式" class="headerlink" title="2.表格对齐方式"></a>2.表格对齐方式</h3><p>我们可以按照以下方式来设置表格的对齐方式： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-:  设置内容和标题栏居右对齐。</span><br><span class="line">:-  设置内容和标题栏居左对齐。</span><br><span class="line">:-: 设置内容和标题栏居中对齐。</span><br></pre></td></tr></table></figure><ul><li>示例代码    </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 左对齐 | 右对齐 | 居中对齐 |</span><br><span class="line">| :-----| ----: | :----: |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br></pre></td></tr></table></figure><ul><li>显示结果  </li></ul><table><thead><tr><th align="left">左对齐</th><th align="right">右对齐</th><th align="center">居中对齐</th></tr></thead><tbody><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr></tbody></table><h2 id="九、其他技巧"><a href="#九、其他技巧" class="headerlink" title="九、其他技巧"></a>九、其他技巧</h2><p>正在学习ing…</p><p>持续更新，敬请期待！</p><h3 id="1-HTML元素"><a href="#1-HTML元素" class="headerlink" title="1. HTML元素"></a>1. HTML元素</h3><h3 id="2-转义"><a href="#2-转义" class="headerlink" title="2. 转义"></a>2. 转义</h3><h3 id="3-公式"><a href="#3-公式" class="headerlink" title="3. 公式"></a>3. 公式</h3><h3 id="4-流程图-时序图（顺序图）-甘特图"><a href="#4-流程图-时序图（顺序图）-甘特图" class="headerlink" title="4. 流程图|时序图（顺序图）|甘特图"></a>4. 流程图|时序图（顺序图）|甘特图</h3>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python | 函数 | ch_08</title>
      <link href="/2020/04/03/ch_08%20Python%20%E5%87%BD%E6%95%B0/"/>
      <url>/2020/04/03/ch_08%20Python%20%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-函数-ch-08"><a href="#Python-函数-ch-08" class="headerlink" title="Python | 函数 | ch_08"></a>Python | 函数 | ch_08</h1><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>假如需要完成一个任务，需要很复杂的逻辑写很多的程序，那么这时我们就需要把它当成工程来做。工程中有个重要的思想是模块化，也就是分模块。我们把一个大的工程项目拆分成很多小模块，把很复杂的功能分成是很多小功能的集成，让大家一起参与进来每人完成一个模块也就是一个功能，最后进行整合，这样可以大大的提高效率。这样的小功能模块就是我们的函数。函数就是组织代码的一个形式，我们把需要的功能分块打包封装起来就成了函数。</p><a id="more"></a><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>代码的一种组织形式</li><li>一个函数一般完成一项特定的功能</li><li>函数使用<ul><li>函数需要先定义</li><li>使用函数，俗称调用</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个函数</span></span><br><span class="line"><span class="comment"># 只是定义的话不会执行</span></span><br><span class="line"><span class="comment"># 1. def关键字，后跟一个空格</span></span><br><span class="line"><span class="comment"># 2. 函数名，自己定义，起名需要遵循便令命名规则，约定俗成，大驼峰命名只给类用</span></span><br><span class="line"><span class="comment"># 3. 后面括号和冒号不能省，括号内可以由参数</span></span><br><span class="line"><span class="comment"># 4. 函数内所有代码缩进</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"我是一个函数"</span>)</span><br><span class="line">    print(<span class="string">"我要完成一定功能"</span>)</span><br><span class="line">print(<span class="string">"我结束了"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示结果</span></span><br><span class="line">我结束了</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 函数的调用</span></span><br><span class="line"><span class="comment"># 直接函数名后面跟括号</span></span><br><span class="line">func()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示结果</span></span><br><span class="line">我是一个函数</span><br><span class="line">我要完成一定功能</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">3</span>):</span><br><span class="line">    func()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 结果显示</span></span><br><span class="line">我是一个函数</span><br><span class="line">我要完成一定功能</span><br><span class="line">我结束了</span><br><span class="line">我是一个函数</span><br><span class="line">我要完成一定功能</span><br><span class="line">我结束了</span><br></pre></td></tr></table></figure><h2 id="函数的参数和返回值"><a href="#函数的参数和返回值" class="headerlink" title="函数的参数和返回值"></a>函数的参数和返回值</h2><ul><li>参数： 负责给函数传递一些必要的数据或者信息<ul><li>形参（形式参数）： 在函数定义的时候用到的参数没有具体值，只是一个占位的符号，成为形参</li><li>实参（实际参数）： 在调用函数的时候输入的值</li></ul></li><li>返回值： 函数的执行结果<ul><li>使用return关键字</li><li>如果没有return，默认返回一个None</li><li>函数一旦执行return语句，则无条件返回，即结束函数的执行</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 参数的定义和使用</span></span><br><span class="line"><span class="comment"># 参数person只是一个符号，代表的是调用的时候的某一个数据</span></span><br><span class="line"><span class="comment"># 调用的时候，会用p的值代替函数中所有的person</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(person)</span>:</span></span><br><span class="line">    print(<span class="string">"&#123;0&#125;, 你肿么咧"</span>.format(person))</span><br><span class="line">    print(<span class="string">"Sir, 你不理额额就走咧"</span>)</span><br><span class="line">  </span><br><span class="line">p = <span class="string">"明月"</span></span><br><span class="line">hello(p)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果显示</span></span><br><span class="line">明月, 你肿么咧</span><br><span class="line">Sir, 你不理额额就走咧</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># return语句的基本使用</span></span><br><span class="line"><span class="comment"># 函数打完招呼后返回一句话</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(person)</span>:</span></span><br><span class="line">    print(<span class="string">"&#123;0&#125;, 你肿么咧"</span>.format(person))</span><br><span class="line">    print(<span class="string">"Sir, 你不理额额就走咧"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"我已经跟&#123;0&#125;打招呼了，&#123;1&#125;不理我"</span>.format(person, person)</span><br><span class="line">  </span><br><span class="line">p = <span class="string">"明月"</span></span><br><span class="line">rst = hello(p)</span><br><span class="line"></span><br><span class="line">print(rst)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果显示</span></span><br><span class="line">明月, 你肿么咧</span><br><span class="line">Sir, 你不理额额就走咧</span><br><span class="line">我已经跟明月打招呼了，明月不理我</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># return案例2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(person)</span>:</span></span><br><span class="line">    print(<span class="string">"&#123;0&#125;, 你肿么咧"</span>.format(person))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"哈哈，我提前结束了"</span></span><br><span class="line">    print(<span class="string">"Sir, 你不理额额就走咧"</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"我已经跟&#123;0&#125;打招呼了，&#123;1&#125;不理我"</span>.format(person, person)</span><br><span class="line"></span><br><span class="line">p = <span class="string">"LiYing"</span></span><br><span class="line">rst = hello(p)</span><br><span class="line">print(rst)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果显示</span></span><br><span class="line">LiYing, 你肿么咧</span><br><span class="line">哈哈，我提前结束了</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 九九乘法表</span></span><br><span class="line"><span class="comment"># version 1.0</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="comment"># 打印一行</span></span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> range(<span class="number">1</span>, row+<span class="number">1</span>):</span><br><span class="line">        <span class="comment"># print函数默认任务打印完毕后换行</span></span><br><span class="line">        print( row * col, end=<span class="string">" "</span>)</span><br><span class="line">    print(<span class="string">"-------------------"</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 结果显示</span></span><br><span class="line"><span class="number">1</span> -------------------</span><br><span class="line"><span class="number">2</span> <span class="number">4</span> -------------------</span><br><span class="line"><span class="number">3</span> <span class="number">6</span> <span class="number">9</span> -------------------</span><br><span class="line"><span class="number">4</span> <span class="number">8</span> <span class="number">12</span> <span class="number">16</span> -------------------</span><br><span class="line"><span class="number">5</span> <span class="number">10</span> <span class="number">15</span> <span class="number">20</span> <span class="number">25</span> -------------------</span><br><span class="line"><span class="number">6</span> <span class="number">12</span> <span class="number">18</span> <span class="number">24</span> <span class="number">30</span> <span class="number">36</span> -------------------</span><br><span class="line"><span class="number">7</span> <span class="number">14</span> <span class="number">21</span> <span class="number">28</span> <span class="number">35</span> <span class="number">42</span> <span class="number">49</span> -------------------</span><br><span class="line"><span class="number">8</span> <span class="number">16</span> <span class="number">24</span> <span class="number">32</span> <span class="number">40</span> <span class="number">48</span> <span class="number">56</span> <span class="number">64</span> -------------------</span><br><span class="line"><span class="number">9</span> <span class="number">18</span> <span class="number">27</span> <span class="number">36</span> <span class="number">45</span> <span class="number">54</span> <span class="number">63</span> <span class="number">72</span> <span class="number">81</span> -------------------</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个函数，打印一行九九乘法表</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printLine</span><span class="params">(row)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> range(<span class="number">1</span>, row+<span class="number">1</span>):</span><br><span class="line">        <span class="comment"># print函数默认任务打印完毕后换行</span></span><br><span class="line">        num = row * col</span><br><span class="line">        print(<span class="string">"%3d"</span> %num , end=<span class="string">" "</span>)</span><br><span class="line">    print(<span class="string">" "</span>)</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 九九乘法表s</span></span><br><span class="line"><span class="comment"># version 2.0</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">    printLine(row)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果显示：</span></span><br><span class="line">  <span class="number">1</span>  </span><br><span class="line">  <span class="number">2</span>   <span class="number">4</span>  </span><br><span class="line">  <span class="number">3</span>   <span class="number">6</span>   <span class="number">9</span>  </span><br><span class="line">  <span class="number">4</span>   <span class="number">8</span>  <span class="number">12</span>  <span class="number">16</span>  </span><br><span class="line">  <span class="number">5</span>  <span class="number">10</span>  <span class="number">15</span>  <span class="number">20</span>  <span class="number">25</span>  </span><br><span class="line">  <span class="number">6</span>  <span class="number">12</span>  <span class="number">18</span>  <span class="number">24</span>  <span class="number">30</span>  <span class="number">36</span>  </span><br><span class="line">  <span class="number">7</span>  <span class="number">14</span>  <span class="number">21</span>  <span class="number">28</span>  <span class="number">35</span>  <span class="number">42</span>  <span class="number">49</span>  </span><br><span class="line">  <span class="number">8</span>  <span class="number">16</span>  <span class="number">24</span>  <span class="number">32</span>  <span class="number">40</span>  <span class="number">48</span>  <span class="number">56</span>  <span class="number">64</span>  </span><br><span class="line">  <span class="number">9</span>  <span class="number">18</span>  <span class="number">27</span>  <span class="number">36</span>  <span class="number">45</span>  <span class="number">54</span>  <span class="number">63</span>  <span class="number">72</span>  <span class="number">81</span></span><br></pre></td></tr></table></figure><hr><p>具体的函数参数 及 函数的返回值将在之后详细介绍</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 函数 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人生苦短我学Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python|变量和数据类型| 变量 | ch_01</title>
      <link href="/2020/04/02/ch_07%20Python%20%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84%20%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84_while/"/>
      <url>/2020/04/02/ch_07%20Python%20%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84%20%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84_while/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-程序结构-循环结构-while-ch-07"><a href="#Python-程序结构-循环结构-while-ch-07" class="headerlink" title="Python | 程序结构| 循环结构_while | ch_07"></a>Python | 程序结构| 循环结构_while | ch_07</h1><h2 id="一、while循环"><a href="#一、while循环" class="headerlink" title="一、while循环"></a>一、while循环</h2><h3 id="1-while语法"><a href="#1-while语法" class="headerlink" title="1.while语法"></a>1.while语法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 条件表达式：</span><br><span class="line">     执行语句</span><br></pre></td></tr></table></figure><p>执行语句可以是单个语句或语句块。条件表达式可以是任何表达式，任何非零、或非空（null）的值均为true。</p><p>当判断条件假 false 时，循环结束。</p><a id="more"></a><p><strong><em>注意：</em></strong></p><ul><li>一个循环语句</li><li>表示当某条件成立的时候，就循环</li><li>不知道具体循环次数，但能确定循环的成立条件的时候用while循环</li></ul><hr><p>练习：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 练习1</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> (count &lt; <span class="number">9</span>):</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"The count is:"</span>, count)</span><br><span class="line">   count = count + <span class="number">1</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> (<span class="string">"Good bye!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line">The count <span class="keyword">is</span>: <span class="number">0</span></span><br><span class="line">The count <span class="keyword">is</span>: <span class="number">1</span></span><br><span class="line">The count <span class="keyword">is</span>: <span class="number">2</span></span><br><span class="line">The count <span class="keyword">is</span>: <span class="number">3</span></span><br><span class="line">The count <span class="keyword">is</span>: <span class="number">4</span></span><br><span class="line">The count <span class="keyword">is</span>: <span class="number">5</span></span><br><span class="line">The count <span class="keyword">is</span>: <span class="number">6</span></span><br><span class="line">The count <span class="keyword">is</span>: <span class="number">7</span></span><br><span class="line">The count <span class="keyword">is</span>: <span class="number">8</span></span><br><span class="line">Good bye!</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 练习2</span></span><br><span class="line"><span class="comment"># 如果说年利率是6.7%，本利是每年翻滚， 则多少年后本钱会翻倍</span></span><br><span class="line"></span><br><span class="line">benqian = <span class="number">100000</span></span><br><span class="line">year = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> benqian &lt; <span class="number">200000</span>:</span><br><span class="line">    benqian = benqian * (<span class="number">1</span>+<span class="number">0.067</span>)</span><br><span class="line">    year += <span class="number">1</span> <span class="comment"># year = year + 1</span></span><br><span class="line">    print(<span class="string">"第 &#123;0&#125; 年拿了 &#123;1&#125; 块钱"</span>.format(year, benqian))</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line">第 <span class="number">1</span> 年拿了 <span class="number">106700.0</span> 块钱</span><br><span class="line">第 <span class="number">2</span> 年拿了 <span class="number">113848.9</span> 块钱</span><br><span class="line">第 <span class="number">3</span> 年拿了 <span class="number">121476.77629999998</span> 块钱</span><br><span class="line">第 <span class="number">4</span> 年拿了 <span class="number">129615.72031209998</span> 块钱</span><br><span class="line">第 <span class="number">5</span> 年拿了 <span class="number">138299.97357301068</span> 块钱</span><br><span class="line">第 <span class="number">6</span> 年拿了 <span class="number">147566.07180240238</span> 块钱</span><br><span class="line">第 <span class="number">7</span> 年拿了 <span class="number">157452.99861316333</span> 块钱</span><br><span class="line">第 <span class="number">8</span> 年拿了 <span class="number">168002.34952024528</span> 块钱</span><br><span class="line">第 <span class="number">9</span> 年拿了 <span class="number">179258.5069381017</span> 块钱</span><br><span class="line">第 <span class="number">10</span> 年拿了 <span class="number">191268.8269029545</span> 块钱</span><br><span class="line">第 <span class="number">11</span> 年拿了 <span class="number">204083.83830545243</span> 块钱</span><br></pre></td></tr></table></figure><hr><h3 id="2-while-else语法"><a href="#2-while-else语法" class="headerlink" title="2. while-else语法"></a>2. while-else语法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#另外一种表达方法</span></span><br><span class="line"><span class="keyword">while</span>  条件表达式：</span><br><span class="line">     执行语句<span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>：</span><br><span class="line">     执行语句<span class="number">2</span></span><br></pre></td></tr></table></figure><p>在 python 中，while … else 在循环条件为 false 时执行 else 语句块</p><hr><p>练习：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 练习1</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> count &lt; <span class="number">5</span>:</span><br><span class="line">   <span class="keyword">print</span> (count, <span class="string">" is  less than 5"</span>)</span><br><span class="line">   count = count + <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="keyword">print</span> (count, <span class="string">" is not less than 5"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line"><span class="number">0</span>  <span class="keyword">is</span>  less than <span class="number">5</span></span><br><span class="line"><span class="number">1</span>  <span class="keyword">is</span>  less than <span class="number">5</span></span><br><span class="line"><span class="number">2</span>  <span class="keyword">is</span>  less than <span class="number">5</span></span><br><span class="line"><span class="number">3</span>  <span class="keyword">is</span>  less than <span class="number">5</span></span><br><span class="line"><span class="number">4</span>  <span class="keyword">is</span>  less than <span class="number">5</span></span><br><span class="line"><span class="number">5</span>  <span class="keyword">is</span> <span class="keyword">not</span> less than <span class="number">5</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 练习2</span></span><br><span class="line"><span class="comment"># 如果说年利率是6.7%，本利是每年翻滚， 则多少年后本钱会翻倍</span></span><br><span class="line"><span class="comment"># 如果拿到的钱翻倍，则用print庆祝一下</span></span><br><span class="line">benqian = <span class="number">100000</span></span><br><span class="line">year = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> benqian &lt; <span class="number">200000</span>:</span><br><span class="line">    benqian = benqian * (<span class="number">1</span>+<span class="number">0.067</span>)</span><br><span class="line">    year += <span class="number">1</span> <span class="comment"># year = year + 1</span></span><br><span class="line">    print(<span class="string">"第 &#123;0&#125; 年拿了 &#123;1&#125; 块钱"</span>.format(year, benqian))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"终于翻倍了"</span>)</span><br><span class="line">    print(<span class="string">"666"</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line">第 <span class="number">1</span> 年拿了 <span class="number">106700.0</span> 块钱</span><br><span class="line">第 <span class="number">2</span> 年拿了 <span class="number">113848.9</span> 块钱</span><br><span class="line">第 <span class="number">3</span> 年拿了 <span class="number">121476.77629999998</span> 块钱</span><br><span class="line">第 <span class="number">4</span> 年拿了 <span class="number">129615.72031209998</span> 块钱</span><br><span class="line">第 <span class="number">5</span> 年拿了 <span class="number">138299.97357301068</span> 块钱</span><br><span class="line">第 <span class="number">6</span> 年拿了 <span class="number">147566.07180240238</span> 块钱</span><br><span class="line">第 <span class="number">7</span> 年拿了 <span class="number">157452.99861316333</span> 块钱</span><br><span class="line">第 <span class="number">8</span> 年拿了 <span class="number">168002.34952024528</span> 块钱</span><br><span class="line">第 <span class="number">9</span> 年拿了 <span class="number">179258.5069381017</span> 块钱</span><br><span class="line">第 <span class="number">10</span> 年拿了 <span class="number">191268.8269029545</span> 块钱</span><br><span class="line">第 <span class="number">11</span> 年拿了 <span class="number">204083.83830545243</span> 块钱</span><br><span class="line">终于翻倍了</span><br><span class="line"><span class="number">666</span></span><br></pre></td></tr></table></figure><hr><h2 id="二、while与-循环控制语句"><a href="#二、while与-循环控制语句" class="headerlink" title="二、while与 循环控制语句"></a>二、while与 循环控制语句</h2><p>while 语句时还有另外两个重要的命令 continue，break 来跳过循环。</p><ul><li>continue 用于跳过该次循环</li><li>break 则是用于退出循环</li></ul><p>此外”判断条件”还可以是个常值，表示循环必定成立，具体用法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># continue 用法</span></span><br><span class="line"> </span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">10</span>:   </span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> i%<span class="number">2</span> &gt; <span class="number">0</span>:     <span class="comment"># 非双数时跳过输出</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">print</span> (i)         <span class="comment"># 输出双数2、4、6、8、10</span></span><br><span class="line"><span class="comment"># 运行结果 ：2 4 6 8 10</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># break 用法 1</span></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:            <span class="comment"># 循环条件为1必定成立</span></span><br><span class="line">    <span class="keyword">print</span> (i)         <span class="comment"># 输出1~10</span></span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> i &gt; <span class="number">10</span>:     <span class="comment"># 当i大于10时跳出循环</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="comment"># 运行结果 ：1 2 3 4 5 6 7 8 9 10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># break 用法 2</span></span><br><span class="line">var = <span class="number">10</span></span><br><span class="line"><span class="keyword">while</span> var &gt; <span class="number">0</span>:              </span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"当前变量值 :"</span>, var)</span><br><span class="line">   var = var <span class="number">-1</span></span><br><span class="line">   <span class="keyword">if</span> var == <span class="number">5</span>:   <span class="comment"># 当变量 var 等于 5 时退出循环</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> <span class="string">"Good bye!"</span></span><br><span class="line"><span class="comment">#运行结果 ： 10 9 8 7 6 "Good bye!"</span></span><br></pre></td></tr></table></figure><h2 id="三、while的无限循环"><a href="#三、while的无限循环" class="headerlink" title="三、while的无限循环"></a>三、while的无限循环</h2><p>在while中，如果条件判断语句永远为 true，循环将会无限的执行下去，如下实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 练习1</span></span><br><span class="line"><span class="comment"># 无限输入</span></span><br><span class="line">var = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> var == <span class="number">1</span> :  <span class="comment"># 该条件永远为true，循环将无限执行下去</span></span><br><span class="line">   num = input(<span class="string">"请输入一个数字  :"</span>)</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"你的输入: "</span>, num)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> (<span class="string">"Good bye!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line">请输入一个数字  :<span class="number">1</span></span><br><span class="line">你的输入:  <span class="number">1</span></span><br><span class="line">请输入一个数字  :<span class="number">2</span></span><br><span class="line">你的输入:  <span class="number">2</span></span><br><span class="line">请输入一个数字  :<span class="number">3</span></span><br><span class="line">你的输入:  <span class="number">3</span></span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 练习2</span></span><br><span class="line"><span class="comment"># 当输入为 qzpnb 时，退出程序</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span> :</span><br><span class="line">    read = input(<span class="string">"Enter your code:"</span>)</span><br><span class="line">    <span class="keyword">if</span> read == <span class="string">"qzpnb"</span> :</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">" Goodbye "</span>)</span><br></pre></td></tr></table></figure><h2 id="四、循环嵌套"><a href="#四、循环嵌套" class="headerlink" title="四、循环嵌套"></a>四、循环嵌套</h2><p>Python 语言允许在一个循环体里面嵌入另一个循环。</p><h3 id="1-for-循环嵌套语法"><a href="#1-for-循环嵌套语法" class="headerlink" title="1. for 循环嵌套语法"></a>1. <strong>for 循环嵌套语法</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 变量<span class="number">1</span> <span class="keyword">in</span> 序列<span class="number">1</span>:</span><br><span class="line">   <span class="keyword">for</span> 变量<span class="number">2</span> <span class="keyword">in</span> 变量<span class="number">2</span>:</span><br><span class="line">       语句<span class="number">2</span><span class="number">-1</span></span><br><span class="line">        语句<span class="number">2</span><span class="number">-2</span></span><br><span class="line">    语句<span class="number">1</span><span class="number">-1</span></span><br><span class="line">    语句<span class="number">1</span><span class="number">-2</span></span><br></pre></td></tr></table></figure><h3 id="2-while-循环嵌套语法"><a href="#2-while-循环嵌套语法" class="headerlink" title="2. while 循环嵌套语法"></a>2. <strong>while 循环嵌套语法</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while 条件表达式1:</span><br><span class="line">   while 条件表达式2:</span><br><span class="line">      执行语句2-1</span><br><span class="line">   执行语句1-1</span><br></pre></td></tr></table></figure><hr><p>练习：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 循环输出2~10之间的素数</span></span><br><span class="line"></span><br><span class="line">i = <span class="number">2</span></span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">10</span>):   </span><br><span class="line">    j = <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> (j &lt;= (i / j)):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (i % j): <span class="keyword">break</span></span><br><span class="line">        j = j + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> (j &gt; i / j): print(i, <span class="string">" 是素数"</span>)</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"Good bye!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line"><span class="number">2</span>  是素数</span><br><span class="line"><span class="number">3</span>  是素数</span><br><span class="line"><span class="number">5</span>  是素数</span><br><span class="line"><span class="number">7</span>  是素数</span><br><span class="line">Good bye!</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 程序结构 </category>
          
          <category> 循环结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人生苦短我学Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python | 程序结构| 循环结构_for | ch_06</title>
      <link href="/2020/04/02/ch_06%20Python%20%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84%20%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84_for/"/>
      <url>/2020/04/02/ch_06%20Python%20%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84%20%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84_for/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-程序结构-循环结构-for-ch-06"><a href="#Python-程序结构-循环结构-for-ch-06" class="headerlink" title="Python | 程序结构| 循环结构_for | ch_06"></a>Python | 程序结构| 循环结构_for | ch_06</h1><h1 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h1><p>循环语句允许我们执行一个语句或语句组多次。</p><a id="more"></a><ul><li>重复执行某些固定动作或者处理基本固定的事物</li><li>分类<ul><li>for循环</li><li>while循环</li><li>嵌套循环</li></ul></li></ul><table><thead><tr><th align="left">循环类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/python/python-while-loop.html" target="_blank" rel="noopener">while 循环</a></td><td align="left">在给定的判断条件为 true 时执行循环体，否则退出循环体。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/python-for-loop.html" target="_blank" rel="noopener">for 循环</a></td><td align="left">重复执行语句</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/python-nested-loops.html" target="_blank" rel="noopener">嵌套循环</a></td><td align="left">你可以在while循环体中嵌套for循环</td></tr></tbody></table><h2 id="一、for循环"><a href="#一、for循环" class="headerlink" title="一、for循环"></a>一、for循环</h2><h3 id="1-for语句"><a href="#1-for语句" class="headerlink" title="1. for语句:"></a>1. for语句:</h3><p>for 循环格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 变量 <span class="keyword">in</span> 序列：</span><br><span class="line">    语句<span class="number">1</span></span><br><span class="line">    语句<span class="number">2</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><hr><p>练习：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 练习1</span></span><br><span class="line"><span class="comment"># 列表就是一列数字或者其他值，一般用中括号表示</span></span><br><span class="line"><span class="comment"># 例如  ['zhangsan', 'lisi', 'qzp','lbw']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印学生列表姓名</span></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span>  [<span class="string">'zhangsan'</span>, <span class="string">'lisi'</span>, <span class="string">'qzp'</span>,<span class="string">'lbw'</span>]:</span><br><span class="line">    print(name)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line">zhangsan</span><br><span class="line">lisi</span><br><span class="line">qzp</span><br><span class="line">lbw</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 练习2</span></span><br><span class="line"><span class="comment"># 打印学生列表姓名</span></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span>  [<span class="string">'zhangsan'</span>, <span class="string">'lisi'</span>, <span class="string">'qzp'</span>,<span class="string">'lbw'</span>]:</span><br><span class="line">    print(name)</span><br><span class="line">    <span class="keyword">if</span> name == <span class="string">"lbw"</span>:</span><br><span class="line">        print(<span class="string">"我的最爱&#123;0&#125;出现了"</span>.format(name))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"同学我们不约，不约，同学请自重"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line">zhangsan</span><br><span class="line">同学我们不约，不约，同学请自重</span><br><span class="line">lisi</span><br><span class="line">同学我们不约，不约，同学请自重</span><br><span class="line">qzp</span><br><span class="line">同学我们不约，不约，同学请自重</span><br><span class="line">lbw</span><br><span class="line">我的最爱lbw出现了</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 练习3</span></span><br><span class="line"><span class="keyword">for</span> letter <span class="keyword">in</span> <span class="string">"Python"</span>:     <span class="comment"># 第一个实例</span></span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"当前字母 :"</span>, letter)</span><br><span class="line"> </span><br><span class="line">fruits = [<span class="string">'banana'</span>, <span class="string">'apple'</span>,  <span class="string">'mango'</span>]</span><br><span class="line"><span class="keyword">for</span> fruit <span class="keyword">in</span> fruits:        <span class="comment"># 第二个实例</span></span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"当前水果 :"</span>, fruit)</span><br><span class="line"> </span><br><span class="line">print(<span class="string">"Good bye!"</span> ) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line">当前字母 : P</span><br><span class="line">当前字母 : y</span><br><span class="line">当前字母 : t</span><br><span class="line">当前字母 : h</span><br><span class="line">当前字母 : o</span><br><span class="line">当前字母 : n</span><br><span class="line">当前水果 : banana</span><br><span class="line">当前水果 : apple</span><br><span class="line">当前水果 : mango</span><br><span class="line">Good bye!</span><br></pre></td></tr></table></figure><hr><h3 id="2-for-else-语句"><a href="#2-for-else-语句" class="headerlink" title="2. for-else 语句"></a>2. for-else 语句</h3><ul><li>当for循环结束的时候，会执行else语句</li><li>else语句是可选语句</li></ul><p>for-else 语句格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 变量 <span class="keyword">in</span> 序列：</span><br><span class="line">    语句<span class="number">1</span></span><br><span class="line">    语句<span class="number">2</span></span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">else</span>：</span><br><span class="line">语句<span class="number">1</span></span><br><span class="line">    语句<span class="number">2</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><hr><p>练习：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 练习1</span></span><br><span class="line"><span class="comment"># 打印列表中的同学，</span></span><br><span class="line"><span class="comment"># 如果没有在列表中，或者列表结束了，我们需要打印提示语句，666</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印学生列表姓名</span></span><br><span class="line"><span class="comment"># 如果是jingjign，那肯定是我的最爱呀，</span></span><br><span class="line"><span class="comment"># 如果是别的学生，那要冷酷的拒绝他</span></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span>  [<span class="string">'zhangsan'</span>, <span class="string">'lisi'</span>, <span class="string">'qzp'</span>,<span class="string">'lbw'</span>]:</span><br><span class="line">    print(name)</span><br><span class="line">    <span class="keyword">if</span> name == <span class="string">"jingjing"</span>:</span><br><span class="line">        print(<span class="string">"我的最爱&#123;0&#125;出现了"</span>.format(name))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"同学我们不约，不约，同学请自重"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"666"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line">zhangsan</span><br><span class="line">同学我们不约，不约，同学请自重</span><br><span class="line">lisi</span><br><span class="line">同学我们不约，不约，同学请自重</span><br><span class="line">qzp</span><br><span class="line">同学我们不约，不约，同学请自重</span><br><span class="line">lbw</span><br><span class="line">我的最爱lbw出现了</span><br><span class="line"><span class="number">666</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 练习2</span></span><br><span class="line"><span class="comment"># 计算1-10之间所有的质数</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>):  <span class="comment"># 迭代 1 到 10 之间的数字</span></span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,num): <span class="comment"># 根据因子迭代</span></span><br><span class="line">      <span class="keyword">if</span> num%i == <span class="number">0</span>:      <span class="comment"># 确定第一个因子</span></span><br><span class="line">         j=num/i          <span class="comment"># 计算第二个因子</span></span><br><span class="line">         <span class="keyword">print</span> (<span class="string">"%d 等于 %d * %d"</span> % (num,i,j))</span><br><span class="line">         <span class="keyword">break</span>            <span class="comment"># 跳出当前循环</span></span><br><span class="line">   <span class="keyword">else</span>:                  <span class="comment"># 循环的 else 部分</span></span><br><span class="line">      <span class="keyword">print</span> (num, <span class="string">"是一个质数"</span>)</span><br><span class="line">      </span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line"><span class="number">1</span> 是一个质数</span><br><span class="line"><span class="number">2</span> 是一个质数</span><br><span class="line"><span class="number">3</span> 是一个质数</span><br><span class="line"><span class="number">4</span> 等于 <span class="number">2</span> * <span class="number">2</span></span><br><span class="line"><span class="number">5</span> 是一个质数</span><br><span class="line"><span class="number">6</span> 等于 <span class="number">2</span> * <span class="number">3</span></span><br><span class="line"><span class="number">7</span> 是一个质数</span><br><span class="line"><span class="number">8</span> 等于 <span class="number">2</span> * <span class="number">4</span></span><br><span class="line"><span class="number">9</span> 等于 <span class="number">3</span> * <span class="number">3</span></span><br></pre></td></tr></table></figure><hr><h2 id="二、循环控制语句"><a href="#二、循环控制语句" class="headerlink" title="二、循环控制语句"></a>二、循环控制语句</h2><p>循环控制语句可以更改语句执行的顺序。Python支持以下循环控制语句：</p><ul><li>break： 无条件结束整个循环，简称循环猝死</li><li>continue：无条件结束本次循环，从新进入下一轮循环</li><li>pass：表示略过，通常用于站位</li></ul><table><thead><tr><th align="left">控制语句</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/python/python-break-statement.html" target="_blank" rel="noopener">break 语句</a></td><td align="left">在语句块执行过程中终止循环，并且跳出整个循环</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/python-continue-statement.html" target="_blank" rel="noopener">continue 语句</a></td><td align="left">在语句块执行过程中终止当前循环，跳出该次循环，执行下一次循环。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/python-pass-statement.html" target="_blank" rel="noopener">pass 语句</a></td><td align="left">pass是空语句，是为了保持程序结构的完整性。</td></tr></tbody></table><hr><p>练习：</p><ul><li><p>break语句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 练习1  </span></span><br><span class="line"><span class="keyword">for</span> letter <span class="keyword">in</span> <span class="string">"Python"</span>:     </span><br><span class="line">   <span class="keyword">if</span> letter == <span class="string">'h'</span>:</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"当前字母 :"</span>, letter)</span><br><span class="line">print(<span class="string">"Good bye!"</span>)</span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line">p</span><br><span class="line">y</span><br><span class="line">t</span><br><span class="line">Good bye!</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 练习2 </span></span><br><span class="line"><span class="comment"># 在数字1-10中，寻找数字7，一旦找到，打印出来，其余则什么都不做</span></span><br><span class="line"><span class="comment"># for 循环中的变量表示，一般用i，k，m，n，或者indx，idx，item之类</span></span><br><span class="line"><span class="comment"># 在python中，如果循环变量名称不重要，可以用下划线（_)代替</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">7</span>:</span><br><span class="line">        print(<span class="string">"我找到了"</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line">我找到了</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>continue语句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 练习1</span></span><br><span class="line"><span class="keyword">for</span> letter <span class="keyword">in</span> <span class="string">"Python"</span>:      </span><br><span class="line">   <span class="keyword">if</span> letter == <span class="string">'h'</span>:</span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"当前字母 :"</span>, letter)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"Good bye!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line">p</span><br><span class="line">y</span><br><span class="line">t</span><br><span class="line">o</span><br><span class="line">n</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 练习2 </span><br><span class="line"></span><br><span class="line"># 在数字1-10中，寻找所有偶数，找到偶数后打印偶数</span><br><span class="line"></span><br><span class="line">for i in range(1,11):</span><br><span class="line">    if i % 2 &#x3D;&#x3D; 1:</span><br><span class="line">        continue</span><br><span class="line">    else:</span><br><span class="line">        print(&quot;&#123;0&#125; 是偶数&quot;.format(i))</span><br><span class="line">        </span><br><span class="line"># 以上程序与下面程序运行结果一致</span><br><span class="line"></span><br><span class="line">for i in range(1,11):</span><br><span class="line">    if i % 2 &#x3D;&#x3D; 0:</span><br><span class="line">        print(&quot;&#123;0&#125; 是偶数&quot;.format(i))</span><br><span class="line">    </span><br><span class="line"># 运行结果</span><br><span class="line">2 是偶数</span><br><span class="line">4 是偶数</span><br><span class="line">6 是偶数</span><br><span class="line">8 是偶数</span><br><span class="line">10 是偶数</span><br></pre></td></tr></table></figure></li><li><p>pass语句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 练习1</span></span><br><span class="line"><span class="comment"># 输出 Python 的每个字母</span></span><br><span class="line"><span class="keyword">for</span> letter <span class="keyword">in</span> <span class="string">"Python"</span>:</span><br><span class="line">   <span class="keyword">if</span> letter == <span class="string">'h'</span>:</span><br><span class="line">      <span class="keyword">pass</span></span><br><span class="line">      <span class="keyword">print</span> (<span class="string">"这是 pass 块"</span>)</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"当前字母 :"</span>, letter)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> (<span class="string">"Good bye!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line">当前字母 :p</span><br><span class="line">当前字母 :y</span><br><span class="line">当前字母 :t</span><br><span class="line">这是 <span class="keyword">pass</span> 块</span><br><span class="line">当前字母 :h</span><br><span class="line">当前字母 :o</span><br><span class="line">当前字母 :n</span><br><span class="line">Good bye!</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 练习 2</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">3</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    print(<span class="string">"wo zai zhe li"</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line">wo zai zhe li</span><br><span class="line">wo zai zhe li</span><br></pre></td></tr></table></figure></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 程序结构 </category>
          
          <category> 循环结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人生苦短我学Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.1焦虑的🍔鹏</title>
      <link href="/2020/04/01/4.1%E7%84%A6%E8%99%91%E7%9A%84%F0%9F%8D%94%E9%B9%8F/"/>
      <url>/2020/04/01/4.1%E7%84%A6%E8%99%91%E7%9A%84%F0%9F%8D%94%E9%B9%8F/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">关注微信公众号“云鹏今悔不卑飞”</br>输入“密码”可获取密码</br>悄咪咪的说 在“博客搭建测试”文章中可以扫码关注公众号哟</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="c2ef540fb0e5fb9e136474ec6b2c4d6b47d4d504e7009a0d0d88d5b2c0472495"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 浮生日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浮生日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python | 程序结构|分支结构| 条件语句_if | ch_05</title>
      <link href="/2020/04/01/ch_05%20Python%20%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84%20%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84_if/"/>
      <url>/2020/04/01/ch_05%20Python%20%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84%20%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84_if/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-程序结构-分支结构-条件语句-if-ch-05"><a href="#Python-程序结构-分支结构-条件语句-if-ch-05" class="headerlink" title="Python | 程序结构|分支结构| 条件语句_if | ch_05"></a>Python | 程序结构|分支结构| 条件语句_if | ch_05</h1><h2 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h2><p>分支结构也叫条件语句。Python条件语句是通过一条或多条语句的执行结果（True或者False）来决定执行的代码块。</p><a id="more"></a><h3 id="1-if的基本语法"><a href="#1-if的基本语法" class="headerlink" title="1.if的基本语法"></a>1.if的基本语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if 条件表达式：</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    语句3</span><br><span class="line">    ......</span><br></pre></td></tr></table></figure><p>其中”条件表达式”成立时（非零），则执行后面的语句，而执行内容可以多行，以缩进来区分表示同一范围。</p><p><strong><em>注意：</em></strong></p><ul><li>条件表达式就是计算结果必须为<strong>布尔值</strong>的表达式</li><li>表达式后面的<strong>冒号</strong>不能少</li><li>注意if后面的出现的语句，如果属于if语句块，则必须同一个<strong>缩进等级</strong></li><li>条件表达式结果为<strong>True执行</strong>if后面的缩进的语句块</li></ul><hr><p>练习：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># if语句练习1</span></span><br><span class="line"><span class="comment"># 如果age小于18岁，则打印信息“去叫家长”</span></span><br><span class="line">age = <span class="number">17</span></span><br><span class="line"><span class="keyword">if</span>  age &lt; <span class="number">18</span>:</span><br><span class="line">    print(<span class="string">"1"</span>)</span><br><span class="line">    print(<span class="string">"2"</span>)</span><br><span class="line">    print(<span class="string">"3"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># if语句练习2</span></span><br><span class="line"><span class="comment"># 如果age小于18岁，则打印信息“去叫家长”</span></span><br><span class="line">age = <span class="number">19</span></span><br><span class="line"><span class="keyword">if</span>  age &lt; <span class="number">18</span>:</span><br><span class="line">    print(<span class="string">"1"</span>)</span><br><span class="line">    print(<span class="string">"2"</span>)</span><br><span class="line">    print(<span class="string">"3"</span>)</span><br><span class="line">    </span><br><span class="line">print(<span class="string">"4"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># if语句练习3</span></span><br><span class="line"><span class="comment"># 如果age小于18岁，则打印信息“去叫家长”</span></span><br><span class="line">age = <span class="number">19</span></span><br><span class="line"><span class="keyword">if</span>  age &lt; <span class="number">18</span>:</span><br><span class="line">    print(<span class="string">"1"</span>)</span><br><span class="line">print(<span class="string">"2"</span>)</span><br><span class="line">print(<span class="string">"3"</span>)</span><br><span class="line">    </span><br><span class="line">print(<span class="string">"4"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><hr><h3 id="2-if双向分支"><a href="#2-if双向分支" class="headerlink" title="2.if双向分支"></a>2.if双向分支</h3><p>if…else…语句</p><p>else 为可选语句，当需要在条件不成立时执行内容则可以执行相关语句。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">if 条件表达式:</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line">else:</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    .....</span><br></pre></td></tr></table></figure><p><strong><em>注意：</em></strong></p><ul><li>双向分支有两个分支，当程序执行到if … else…语句的时候，一定会执行if或else中的一个，也仅执行一个</li><li>缩进问题，if和else一个层级，其余语句一个层级            </li></ul><hr><p>练习：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># input的作用是</span></span><br><span class="line"><span class="comment"># 1. 在屏幕上输出括号内的字符串</span></span><br><span class="line"><span class="comment"># 2. 接受用户输入的内容并返回到程序</span></span><br><span class="line"><span class="comment"># 3. input返回的内容一定是字符串类型</span></span><br><span class="line">gender = input(<span class="string">"请输入性别："</span>)</span><br><span class="line">print(<span class="string">"你输入的性别是：&#123;0&#125;"</span>.format(gender))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>  gender == <span class="string">"nan"</span>:</span><br><span class="line">    print(<span class="string">"1"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"2"</span>)</span><br><span class="line">    print(<span class="string">"3"</span>)</span><br><span class="line">        </span><br><span class="line">print(<span class="string">"666"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">请输入性别：asdfg</span><br><span class="line">你输入的性别是：asdfg</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">666</span></span><br></pre></td></tr></table></figure><hr><h3 id="3-if多路分支"><a href="#3-if多路分支" class="headerlink" title="3.if多路分支"></a>3.if多路分支</h3><p>很多分支的情况，简称多路分支。</p><p>if 语句的判断条件可以用&gt;（大于）、&lt;(小于)、==（等于）、&gt;=（大于等于）、&lt;=（小于等于）来表示其关系。</p><p>当判断条件为多个值时，可以使用多路分支形式：</p><pre><code>if  条件表达式：    语句1    ....elif 条件表达式：    语句1    ...elif 条件表达式：    语句1    ........else:    语句1    ....</code></pre><p>由于 python 并不支持 switch 语句，所以多个条件判断，只能用 elif 来实现，如果判断需要多个条件需同时判断时，可以使用 or （或），表示两个条件有一个成立时判断条件成功；使用 and （与）时，表示只有两个条件同时成立的情况下，判断条件才成功。</p><p><strong><em>注意：</em></strong></p><ul><li>elif 可以有很多个</li><li>else可选</li><li>多路分支只会选一个执行</li></ul><hr><p>练习：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 练习1</span></span><br><span class="line"><span class="comment"># score  存放学生成绩</span></span><br><span class="line"><span class="comment"># 注意input的返回值类型 都是字符串</span></span><br><span class="line">score = input(<span class="string">"请输入学生成绩："</span>)</span><br><span class="line"><span class="comment"># 需要把str转换成int</span></span><br><span class="line">score = int(score)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> score&gt;=<span class="number">90</span>:</span><br><span class="line">    print(<span class="string">"A"</span>)</span><br><span class="line"><span class="keyword">elif</span> score&gt;= <span class="number">80</span>:</span><br><span class="line">    print(<span class="string">"B"</span>)</span><br><span class="line"><span class="keyword">elif</span> score &gt;= <span class="number">70</span>:</span><br><span class="line">    print(<span class="string">"C"</span>)</span><br><span class="line"><span class="keyword">elif</span> score &gt;=<span class="number">60</span> :</span><br><span class="line">    print(<span class="string">"D"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"退学咯"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line">请输入学生成绩：<span class="number">59</span></span><br><span class="line">退学咯</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 练习2 </span></span><br><span class="line"> </span><br><span class="line">num = <span class="number">9</span></span><br><span class="line"><span class="keyword">if</span> num &gt;= <span class="number">0</span> <span class="keyword">and</span> num &lt;= <span class="number">10</span>:    <span class="comment"># 判断值是否在0~10之间</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'hello'</span></span><br><span class="line"><span class="comment"># 输出结果: hello</span></span><br><span class="line"> </span><br><span class="line">num = <span class="number">10</span></span><br><span class="line"><span class="keyword">if</span> num &lt; <span class="number">0</span> <span class="keyword">or</span> num &gt; <span class="number">10</span>:    <span class="comment"># 判断值是否在小于0或大于10</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'hello'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'undefine'</span></span><br><span class="line"><span class="comment"># 输出结果: undefine</span></span><br><span class="line"> </span><br><span class="line">num = <span class="number">8</span></span><br><span class="line"><span class="comment"># 判断值是否在0~5或者10~15之间</span></span><br><span class="line"><span class="keyword">if</span> (num &gt;= <span class="number">0</span> <span class="keyword">and</span> num &lt;= <span class="number">5</span>) <span class="keyword">or</span> (num &gt;= <span class="number">10</span> <span class="keyword">and</span> num &lt;= <span class="number">15</span>):    </span><br><span class="line">    <span class="keyword">print</span> <span class="string">'hello'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'undefine'</span></span><br><span class="line"><span class="comment"># 输出结果: undefine</span></span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 程序结构 </category>
          
          <category> 分支结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人生苦短我学Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python | 表达式_运算符 | ch_04</title>
      <link href="/2020/03/30/ch_04%20Python%20%E8%A1%A8%E8%BE%BE%E5%BC%8F_%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>/2020/03/30/ch_04%20Python%20%E8%A1%A8%E8%BE%BE%E5%BC%8F_%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-表达式-运算符-ch-04"><a href="#Python-表达式-运算符-ch-04" class="headerlink" title="Python | 表达式_运算符 | ch_04"></a>Python | 表达式_运算符 | ch_04</h1><h2 id="一、表达式"><a href="#一、表达式" class="headerlink" title="一、表达式"></a>一、表达式</h2><ul><li>由一个或者几个数字或者变量和运算符组合成的一行代码</li><li>通常会返回一个结果</li></ul><h2 id="二、运算符"><a href="#二、运算符" class="headerlink" title="二、运算符"></a>二、运算符</h2><ul><li>由一个以上的值经过变化得到新值的过程就叫运算</li><li>用于运算的符号叫运算符</li></ul><a id="more"></a><ul><li>运算符分类：<ul><li>算数运算符</li><li>比较或者关系运算符</li><li>赋值运算符</li><li>逻辑运算符</li><li>位运算</li><li>成员运算</li><li>身份运算符</li></ul></li></ul><h3 id="1-算术运算符"><a href="#1-算术运算符" class="headerlink" title="1. 算术运算符"></a>1. 算术运算符</h3><p>进行算术运算的符号，通常用来表示加减乘除。</p><p><code>注：Python中没有自增自减运算符</code></p><ul><li><p>加 + 、减 -</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 加减 + - 跟正常算术运算符一模一样</span><br><span class="line">a1 &#x3D; 9+3-2</span><br><span class="line">print(a1)</span><br><span class="line">###结果显示###</span><br><span class="line">10     </span><br><span class="line">###------###</span><br></pre></td></tr></table></figure></li><li><p>乘 *</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 乘号用星号(*)代替</span><br><span class="line">a2 &#x3D; 9 * 4</span><br><span class="line">print(a2)</span><br><span class="line">###结果显示###</span><br><span class="line">36    </span><br><span class="line">###------###</span><br></pre></td></tr></table></figure></li><li><p>除 /</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 除号用斜杠(&#x2F;)代替</span><br><span class="line"># 在Python2.x 和python3.x 中，除号(&#x2F;)结果可能不一致，此处以3系列为准</span><br><span class="line">a3 &#x3D; 9&#x2F;4</span><br><span class="line">print(a3)</span><br><span class="line">###结果显示###</span><br><span class="line">2.25  </span><br><span class="line">###------###</span><br></pre></td></tr></table></figure></li><li><p>取余 %</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># % 取余运算</span><br><span class="line"># 两个数字相除应该有商数有余数</span><br><span class="line"># % 只会得到余数</span><br><span class="line">a4 &#x3D; 9 % 4</span><br><span class="line">print(a4)</span><br><span class="line">###结果显示###</span><br><span class="line">1      </span><br><span class="line">###------###</span><br></pre></td></tr></table></figure></li><li><p>地板除 //</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># &#x2F;&#x2F; 表示取商运算，也叫地板除</span><br><span class="line">a5 &#x3D; 9 &#x2F;&#x2F; 4</span><br><span class="line">print(a5)</span><br><span class="line">###结果显示###</span><br><span class="line">2      </span><br><span class="line">###------###</span><br></pre></td></tr></table></figure></li><li><p>幂运算 **</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># ** 表示幂运算</span><br><span class="line">a6 &#x3D; 2 ** 3</span><br><span class="line">print(a6)</span><br><span class="line">###结果显示###</span><br><span class="line">8    </span><br><span class="line">###------###</span><br></pre></td></tr></table></figure></li></ul><p><strong>小结：</strong></p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">+</td><td align="left">加 - 两个对象相加</td><td align="left">a + b 输出结果 30</td></tr><tr><td align="left">-</td><td align="left">减 - 得到负数或是一个数减去另一个数</td><td align="left">a - b 输出结果 -10</td></tr><tr><td align="left">*</td><td align="left">乘 - 两个数相乘或是返回一个被重复若干次的字符串</td><td align="left">a * b 输出结果 200</td></tr><tr><td align="left">/</td><td align="left">除 - x除以y</td><td align="left">b / a 输出结果 2</td></tr><tr><td align="left">%</td><td align="left">取模 - 返回除法的余数</td><td align="left">b % a 输出结果 0</td></tr><tr><td align="left">**</td><td align="left">幂 - 返回x的y次幂</td><td align="left">a**b 为10的20次方， 输出结果 100000000000000000000</td></tr><tr><td align="left">//</td><td align="left">取整除 - 返回商的整数部分（<strong>向下取整</strong>）</td><td align="left">9//2  输出结果为 4</td></tr></tbody></table><h3 id="2-比较运算符"><a href="#2-比较运算符" class="headerlink" title="2. 比较运算符"></a>2. 比较运算符</h3><p>对两个变量或者值进行比较的运算符，比较的结果值是布尔值，即True/False</p><p>比较运算符一般有：</p><ul><li>等于<code>==</code>    |    不等于 <code>！=</code></li><li>大于 <code>&gt;</code>      |  小于 <code>&lt;</code></li><li>大于等于 <code>&gt;=</code>    |  小于等于 <code>&lt;=</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># == , 等于号</span></span><br><span class="line">a = <span class="number">3</span> == <span class="number">4</span></span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># != 不等于</span></span><br><span class="line">a = <span class="number">3</span> != <span class="number">4</span></span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">###结果显示###</span><br><span class="line">False</span><br><span class="line">True</span><br><span class="line">###------###</span><br></pre></td></tr></table></figure><p><strong>小结：</strong></p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">==</td><td align="left">等于 - 比较对象是否相等</td><td align="left">(a == b) 返回 False。</td></tr><tr><td align="left">!=</td><td align="left">不等于 - 比较两个对象是否不相等</td><td align="left">(a != b) 返回 true.</td></tr><tr><td align="left">&lt;&gt;</td><td align="left">不等于 - 比较两个对象是否不相等。<strong>python3 已废弃。</strong></td><td align="left">(a &lt;&gt; b) 返回 true。这个运算符类似 != 。</td></tr><tr><td align="left">&gt;</td><td align="left">大于 - 返回x是否大于y</td><td align="left">(a &gt; b) 返回 False。</td></tr><tr><td align="left">&lt;</td><td align="left">小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。</td><td align="left">(a &lt; b) 返回 true。</td></tr><tr><td align="left">&gt;=</td><td align="left">大于等于    - 返回x是否大于等于y。</td><td align="left">(a &gt;= b) 返回 False。</td></tr><tr><td align="left">&lt;=</td><td align="left">小于等于 -    返回x是否小于等于y。</td><td align="left">(a &lt;= b) 返回 true。</td></tr></tbody></table><h3 id="3-赋值运算符"><a href="#3-赋值运算符" class="headerlink" title="3. 赋值运算符"></a>3. 赋值运算符</h3><p>把一个值放到变量里面去</p><ul><li><p>普通赋值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 赋值符号 &#x3D; </span><br><span class="line">a &#x3D; 0</span><br><span class="line">c &#x3D; a &#x3D; 4</span><br></pre></td></tr></table></figure></li><li><p>复杂赋值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 复杂赋值 </span><br><span class="line">a &#x3D; b &#x3D; 9</span><br><span class="line">a,b &#x3D; 1,2</span><br></pre></td></tr></table></figure></li><li><p>赋值缩写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 赋值的缩写 +&#x3D; </span><br><span class="line">a &#x3D; 0</span><br><span class="line">a +&#x3D; 7  # a &#x3D; a+ 7 的缩写</span><br><span class="line"></span><br><span class="line"># 所有数学运算符都有缩写形式</span><br><span class="line"># -&#x3D;， ×&#x3D;， &#x2F;&#x3D;, &#x2F;&#x2F;&#x3D;, %&#x3D;, **&#x3D;,都是缩写形式</span><br></pre></td></tr></table></figure></li></ul><p><strong>小结：</strong></p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">=</td><td align="left">简单的赋值运算符</td><td align="left">c = a + b 将 a + b 的运算结果赋值为 c</td></tr><tr><td align="left">+=</td><td align="left">加法赋值运算符</td><td align="left">c += a 等效于 c = c + a</td></tr><tr><td align="left">-=</td><td align="left">减法赋值运算符</td><td align="left">c -= a 等效于 c = c - a</td></tr><tr><td align="left">*=</td><td align="left">乘法赋值运算符</td><td align="left">c *= a 等效于 c = c * a</td></tr><tr><td align="left">/=</td><td align="left">除法赋值运算符</td><td align="left">c /= a 等效于 c = c / a</td></tr><tr><td align="left">%=</td><td align="left">取模赋值运算符</td><td align="left">c %= a 等效于 c = c % a</td></tr><tr><td align="left">**=</td><td align="left">幂赋值运算符</td><td align="left">c * *= a 等效于 c = c * * a</td></tr><tr><td align="left">//=</td><td align="left">取整除赋值运算符</td><td align="left">c //= a 等效于 c = c // a</td></tr></tbody></table><h3 id="4-逻辑运算符"><a href="#4-逻辑运算符" class="headerlink" title="4. 逻辑运算符"></a>4. 逻辑运算符</h3><p>逻辑运算符是对布尔值进行计算的符号，通常分有：逻辑与  <code>and</code>  |  逻辑或  <code>or</code>   |  逻辑非  <code>not</code>  。这些英文单词在python中是逻辑运算符。</p><ul><li><p>逻辑运算规则</p><ul><li><p>and看作乘法，or看作加法</p></li><li><p>布尔值跟数字的转换</p><ul><li><p>布尔值转换成数字</p><p>True 看作1 ，False 看作0</p></li><li><p>数字转换成布尔值</p><p>0 = False， 其余是 True</p></li></ul></li></ul><p>由此将逻辑运算转换成整数数学运算，最后结果是0则为False，其余情况则为True</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 逻辑运算符案例</span><br><span class="line">a &#x3D; True</span><br><span class="line">b &#x3D; False</span><br><span class="line">c &#x3D; True</span><br><span class="line"></span><br><span class="line"># 以下式子等价于 d &#x3D; 1 * 0 + 1</span><br><span class="line">d &#x3D; a and b or c</span><br><span class="line">print(d)</span><br><span class="line"></span><br><span class="line">d &#x3D; a or b and a</span><br><span class="line">print(d)</span><br><span class="line"></span><br><span class="line">e &#x3D; 100 and c</span><br><span class="line">print(e)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###结果展示###</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="comment">###-------###</span></span><br></pre></td></tr></table></figure></li><li><p>短路问题</p><p>逻辑运算的短路问题是语言中常见的问题。逻辑运算规则通常是从左往右，但是存在特殊情况，当运算到某一步时可以不用往后运算了，那么在运行中就不会往后继续运算了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 逻辑运算的短路问题解释</span><br><span class="line"></span><br><span class="line"># 下面的逻辑表达式，a的值一定是True，则运行到or的时候</span><br><span class="line"># 不论其后为何值最后结果都为True，</span><br><span class="line"># 因此整个表达式不再向下计算</span><br><span class="line">a &#x3D; True or xxxxxxxxxxx</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 逻辑运算的短路问题案例1</span><br><span class="line"></span><br><span class="line"># 下面表达式，如果xxx中包含赋值表达式，则结果很难预期</span><br><span class="line"># 代码示例（伪代码)</span><br><span class="line">b &#x3D; 0</span><br><span class="line">a &#x3D; a or (b&#x3D;9) and 6</span><br><span class="line"># 假定上面表达式如果没有语法错误</span><br><span class="line"># 则b最终的值应该是0而不是9</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 逻辑运算的短路问题案例2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'a'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">b</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'b'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a() <span class="keyword">and</span> b():</span><br><span class="line">    printf(<span class="string">'AAAAAA'</span>)   </span><br><span class="line"></span><br><span class="line"><span class="comment">#字符串乘以数字n，表示对这个字符串重复n遍</span></span><br><span class="line">print(<span class="string">"*"</span> * <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a() <span class="keyword">or</span> b():</span><br><span class="line">    printf(<span class="string">'BBBBBB'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">###结果展示###</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">True</span><br><span class="line">**********</span><br><span class="line">a</span><br><span class="line">True</span><br></pre></td></tr></table></figure></li></ul><p><strong>小结：</strong></p><table><thead><tr><th align="left">运算符</th><th align="left">逻辑表达式</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">and</td><td align="left">x and y</td><td align="left">布尔”与” - 如果 x 为 False，x and y 返回 False，否则它返回 y 的计算值。</td><td align="left">(a and b) 返回 20。</td></tr><tr><td align="left">or</td><td align="left">x or y</td><td align="left">布尔”或”    - 如果 x 是非 0，它返回 x 的值，否则它返回 y 的计算值。</td><td align="left">(a or b) 返回 10。</td></tr><tr><td align="left">not</td><td align="left">not x</td><td align="left">布尔”非” - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。</td><td align="left">not(a and b) 返回 False</td></tr></tbody></table><h3 id="5-成员运算"><a href="#5-成员运算" class="headerlink" title="5. 成员运算"></a>5. 成员运算</h3><ul><li>用来检测某一个变量是否是另一个变量的成员</li><li>in</li><li>not in</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 案例</span><br><span class="line">l &#x3D; [1,2,3,4,5]</span><br><span class="line">a &#x3D; 7</span><br><span class="line"></span><br><span class="line">b &#x3D; a in l</span><br><span class="line">print(b)</span><br><span class="line"></span><br><span class="line">a &#x3D; 4</span><br><span class="line">print(a in l)</span><br><span class="line"></span><br><span class="line">print(a not in l)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">###结果展示###</span><br><span class="line">False</span><br><span class="line">True</span><br><span class="line">False</span><br><span class="line">###-------###</span><br></pre></td></tr></table></figure><p><strong>小结：</strong></p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">in</td><td align="left">如果在指定的序列中找到值返回 True，否则返回 False。</td><td align="left">x 在 y 序列中 , 如果 x 在 y 序列中返回 True。</td></tr><tr><td align="left">not in</td><td align="left">如果在指定的序列中没有找到值返回 True，否则返回 False。</td><td align="left">x 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。</td></tr></tbody></table><h3 id="6-身份运算符"><a href="#6-身份运算符" class="headerlink" title="6. 身份运算符"></a>6. 身份运算符</h3><ul><li>is: 用来检测两个变量是否是同一个变量<ul><li>语法就是  var1 is var2 </li></ul></li><li>is not: 两个变量不是同一个变量</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a &#x3D; 9</span><br><span class="line">b &#x3D; 9</span><br><span class="line">print( a is b)</span><br><span class="line"></span><br><span class="line">a &#x3D; &quot;I love wangxiaojing&quot;</span><br><span class="line">b &#x3D; &quot;I love wangxiaojing&quot;</span><br><span class="line">print( a is b)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">###结果展示###</span><br><span class="line">True</span><br><span class="line">False</span><br><span class="line">###-------###</span><br></pre></td></tr></table></figure><p><strong>小结：</strong></p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">is</td><td align="left">is 是判断两个标识符是不是引用自一个对象</td><td align="left"><strong>x is y</strong>, 类似 <strong>id(x) == id(y)</strong> , 如果引用的是同一个对象则返回 True，否则返回 False</td></tr><tr><td align="left">is not</td><td align="left">is not 是判断两个标识符是不是引用自不同对象</td><td align="left"><strong>x is not y</strong> ， 类似 <strong>id(a) != id(b)</strong>。如果引用的不是同一个对象则返回结果 True，否则返回 False。</td></tr></tbody></table><h2 id="三、运算符优先级问题"><a href="#三、运算符优先级问题" class="headerlink" title="三、运算符优先级问题"></a>三、运算符优先级问题</h2><ul><li>永远记住，<strong>括号</strong>具有最高优先级</li></ul><p>优先级表格：</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">**</td><td align="left">指数 (最高优先级)</td></tr><tr><td align="left">~ + -</td><td align="left">按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)</td></tr><tr><td align="left">* / % //</td><td align="left">乘，除，取模和取整除</td></tr><tr><td align="left">+ -</td><td align="left">加法减法</td></tr><tr><td align="left">&gt;&gt; &lt;&lt;</td><td align="left">右移，左移运算符</td></tr><tr><td align="left">&amp;</td><td align="left">位 ‘AND’</td></tr><tr><td align="left">^ |</td><td align="left">位运算符</td></tr><tr><td align="left">&lt;= &lt; &gt; &gt;=</td><td align="left">比较运算符</td></tr><tr><td align="left">&lt;&gt; == !=</td><td align="left">等于运算符</td></tr><tr><td align="left">= %= /= //= -= += <em>= *</em>=</td><td align="left">赋值运算符</td></tr><tr><td align="left">is is not</td><td align="left">身份运算符</td></tr><tr><td align="left">in not in</td><td align="left">成员运算符</td></tr><tr><td align="left">not and or</td><td align="left">逻辑运算符</td></tr></tbody></table><p>实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"> </span><br><span class="line">a = <span class="number">20</span></span><br><span class="line">b = <span class="number">10</span></span><br><span class="line">c = <span class="number">15</span></span><br><span class="line">d = <span class="number">5</span></span><br><span class="line">e = <span class="number">0</span></span><br><span class="line"> </span><br><span class="line">e = (a + b) * c / d       <span class="comment">#( 30 * 15 ) / 5</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"(a + b) * c / d 运算结果为："</span>,  e</span><br><span class="line"> </span><br><span class="line">e = ((a + b) * c) / d     <span class="comment"># (30 * 15 ) / 5</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"((a + b) * c) / d 运算结果为："</span>,  e</span><br><span class="line"> </span><br><span class="line">e = (a + b) * (c / d);    <span class="comment"># (30) * (15/5)</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"(a + b) * (c / d) 运算结果为："</span>,  e</span><br><span class="line"> </span><br><span class="line">e = a + (b * c) / d;      <span class="comment">#  20 + (150/5)</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"a + (b * c) / d 运算结果为："</span>,  e</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(a + b) * c / d 运算结果为： <span class="number">90</span></span><br><span class="line">((a + b) * c) / d 运算结果为： <span class="number">90</span></span><br><span class="line">(a + b) * (c / d) 运算结果为： <span class="number">90</span></span><br><span class="line">a + (b * c) / d 运算结果为： <span class="number">50</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 运算符 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人生苦短我学Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python|变量和数据类型|数据类型| 数据类型_ 字符串 |ch_03</title>
      <link href="/2020/03/29/ch_03%20Python%20%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B_%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2020/03/29/ch_03%20Python%20%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B_%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-变量和数据类型-数据类型-数据类型-字符串-ch-03"><a href="#Python-变量和数据类型-数据类型-数据类型-字符串-ch-03" class="headerlink" title="Python|变量和数据类型|数据类型| 数据类型_ 字符串 |ch_03"></a>Python|变量和数据类型|数据类型| 数据类型_ 字符串 |ch_03</h1><h2 id="一-、Number-数字"><a href="#一-、Number-数字" class="headerlink" title="一 、Number|数字"></a>一 、Number|数字</h2><h2 id="二、String-字符串"><a href="#二、String-字符串" class="headerlink" title="二、String|字符串"></a>二、String|字符串</h2><h3 id="1-基本定义"><a href="#1-基本定义" class="headerlink" title="1. 基本定义"></a>1. 基本定义</h3><p>定义：字符串或串(String)是由数字、字母、下划线组成的一串字符。它是编程语言中表示文本的数据类型。</p><p>也可以理解为：通过引号引起来的字符的集合（单引号，双引号，三引号）</p><a id="more"></a><ul><li>用来表示一串文字信息</li><li>表示方式：<ul><li>单引号<ul><li>只能表示一行的信息</li></ul></li><li>双引号<ul><li>只能表示一行的信息</li></ul></li><li>三引号（三个单引号或者三个双引号）<ul><li>可以用来表示多行信息</li></ul></li></ul></li><li>单双引号交错使用</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 单引号</span><br><span class="line">nb1 &#x3D; &#39;qzp 牛批&#39;</span><br><span class="line">print(nb1)</span><br><span class="line"></span><br><span class="line"># 双引号</span><br><span class="line">nb2 &#x3D; &quot;qzp 牛批&quot;</span><br><span class="line">print(nb2)</span><br><span class="line"></span><br><span class="line"># 三引号</span><br><span class="line">nb3 &#x3D;  &#39;&#39;&#39;</span><br><span class="line">qzp nb</span><br><span class="line">qzp 牛批</span><br><span class="line">全体起立</span><br><span class="line">哈哈哈哈哈</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">print(nb3)</span><br><span class="line"></span><br><span class="line"># 单双引号交错使用的例子</span><br><span class="line"># &lt;a style&#x3D;&quot;color:red&quot;&gt; 哈哈哈&lt;&#x2F;a&gt;</span><br><span class="line"># 用引单号表示上面字符串</span><br><span class="line">html &#x3D; &#39;a style&#x3D;&quot;color:red&quot;&gt;哈哈哈&lt;&#x2F;a&gt;&#39;</span><br><span class="line">print(htmls)</span><br></pre></td></tr></table></figure><h3 id="2-基本原理"><a href="#2-基本原理" class="headerlink" title="2.基本原理"></a>2.基本原理</h3><ul><li><p>取值顺序。</p><p>python的字串列表有2种取值顺序:</p><ul><li>从左到右索引默认0开始的，最大范围是字符串长度少1</li><li>从右到左索引默认-1开始的，最大范围是字符串开头</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> # 原理</span><br><span class="line"> P  Y  T  H  O  N    #字符串 &quot;PYTHON&quot;</span><br><span class="line"> 0  1  2  3  4  5    #从左到右索引</span><br><span class="line">-6 -5 -4 -3 -2 -1    #从右到左索引</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 举例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">'abcdef'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s[<span class="number">1</span>:<span class="number">5</span>]</span><br><span class="line"><span class="string">'bcde'</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>运算方式。</p><p>加号（+）是字符串连接运算符，星号（*）是重复操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实例</span></span><br><span class="line">str = <span class="string">'Hello World!'</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> str           <span class="comment"># 输出完整字符串</span></span><br><span class="line"><span class="keyword">print</span> str[<span class="number">0</span>]        <span class="comment"># 输出字符串中的第一个字符</span></span><br><span class="line"><span class="keyword">print</span> str[<span class="number">2</span>:<span class="number">5</span>]      <span class="comment"># 输出字符串中第三个至第六个之间的字符串</span></span><br><span class="line"><span class="keyword">print</span> str[<span class="number">2</span>:]       <span class="comment"># 输出从第三个字符开始的字符串</span></span><br><span class="line"><span class="keyword">print</span> str * <span class="number">2</span>       <span class="comment"># 输出字符串两次</span></span><br><span class="line"><span class="keyword">print</span> str + <span class="string">"TEST"</span>  <span class="comment"># 输出连接的字符串</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br><span class="line">H</span><br><span class="line">llo</span><br><span class="line">llo World!</span><br><span class="line">Hello World!Hello World!</span><br><span class="line">Hello World!TEST</span><br></pre></td></tr></table></figure></li></ul><p>关于字符串的<strong>转义字符</strong>、字符串的<strong>格式化</strong>问题、字符串的<strong>内建函数（后延）</strong>，在往后的学习中再继续更新。</p><hr><h3 id="3-转义字符"><a href="#3-转义字符" class="headerlink" title="3. 转义字符"></a>3. 转义字符</h3><p>用一个特殊的方法表示出一系列不方便写出的内容，比如回车键，换行键，退格键</p><ul><li>借助<strong>反斜杠字符</strong>，一旦字符串中出现反斜杠，则反斜杠后面一个或几个字符表示已经不是原来的意思了，进行了转义</li><li>在字符串中，一旦出现反斜杠就要加倍小心，可能由转义字符出现</li><li>不同系统对换行操作有不同的表示<ul><li>windows： \n</li><li>Linux: \r\n</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果想表示出Let's go来</span></span><br><span class="line"><span class="comment"># 1. 可以使用嵌套引号，即外层使用双引号</span></span><br><span class="line"><span class="comment"># 2. 转义字符</span></span><br><span class="line">---------------------------</span><br><span class="line"><span class="comment"># 双引号号嵌套</span></span><br><span class="line">s = <span class="string">"Let's go"</span></span><br><span class="line">print(s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果显示：</span></span><br><span class="line">Let<span class="string">'s go</span></span><br><span class="line"><span class="string">---------------------------</span></span><br><span class="line"><span class="string"># 单引号嵌套 用转义字符</span></span><br><span class="line"><span class="string">#\'  ==   '</span></span><br><span class="line">ss = <span class="string">'Let\'s go'</span></span><br><span class="line">print(ss)</span><br><span class="line"></span><br><span class="line"><span class="comment"># \\  ==   \</span></span><br><span class="line">s1 = <span class="string">"c:\\user"</span></span><br><span class="line">print(s1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果显示：</span></span><br><span class="line">Let<span class="string">'s go</span></span><br><span class="line"><span class="string">c:\user</span></span><br><span class="line"><span class="string">---------------------------</span></span><br><span class="line"><span class="string"># 回车换行符</span></span><br><span class="line"><span class="string">s2 = "I love \r\n qzp"</span></span><br><span class="line"><span class="string">print(s2)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 结果显示：</span></span><br><span class="line"><span class="string">I love </span></span><br><span class="line"><span class="string"> qzp</span></span><br></pre></td></tr></table></figure><p>常见的转义字符：</p><p>在需要在字符中使用特殊字符时，python 用反斜杠<code>\</code>转义字符。如下表：</p><table><thead><tr><th align="left">转义字符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">(在行尾时)</td><td align="left">续行符</td></tr><tr><td align="left">\</td><td align="left">反斜杠符号</td></tr><tr><td align="left">&#39;</td><td align="left">单引号</td></tr><tr><td align="left">&quot;</td><td align="left">双引号</td></tr><tr><td align="left">\a</td><td align="left">响铃</td></tr><tr><td align="left">\b</td><td align="left">退格(Backspace)</td></tr><tr><td align="left">\e</td><td align="left">转义</td></tr><tr><td align="left">\000</td><td align="left">空</td></tr><tr><td align="left">\n</td><td align="left">换行</td></tr><tr><td align="left">\v</td><td align="left">纵向制表符</td></tr><tr><td align="left">\t</td><td align="left">横向制表符</td></tr><tr><td align="left">\r</td><td align="left">回车</td></tr><tr><td align="left">\f</td><td align="left">换页</td></tr><tr><td align="left">\oyy</td><td align="left">八进制数，yy代表的字符，例如：\o12代表换行</td></tr><tr><td align="left">\xyy</td><td align="left">十六进制数，yy代表的字符，例如：\x0a代表换行</td></tr><tr><td align="left">\other</td><td align="left">其它的字符以普通格式输出</td></tr></tbody></table><h3 id="4-字符串的格式化"><a href="#4-字符串的格式化" class="headerlink" title="4. 字符串的格式化"></a>4. 字符串的格式化</h3><p>把字符串按照一定格式打印或者填充.</p><ul><li>python 字符串格式化符号:</li></ul><table><thead><tr><th align="left">符  号</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">%c</td><td align="left">格式化字符及其ASCII码</td></tr><tr><td align="left">%s</td><td align="left">格式化字符串</td></tr><tr><td align="left">%d</td><td align="left">格式化整数</td></tr><tr><td align="left">%u</td><td align="left">格式化无符号整型</td></tr><tr><td align="left">%o</td><td align="left">格式化无符号八进制数</td></tr><tr><td align="left">%x</td><td align="left">格式化无符号十六进制数</td></tr><tr><td align="left">%X</td><td align="left">格式化无符号十六进制数（大写）</td></tr><tr><td align="left">%f</td><td align="left">格式化浮点数字，可指定小数点后的精度</td></tr><tr><td align="left">%e</td><td align="left">用科学计数法格式化浮点数</td></tr><tr><td align="left">%E</td><td align="left">作用同%e，用科学计数法格式化浮点数</td></tr><tr><td align="left">%g</td><td align="left">%f和%e的简写</td></tr><tr><td align="left">%G</td><td align="left">%F 和 %E 的简写</td></tr><tr><td align="left">%p</td><td align="left">用十六进制数格式化变量的地址</td></tr></tbody></table><ul><li>格式化操作符辅助指令:</li></ul><table><thead><tr><th align="left">符号</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">*</td><td align="left">定义宽度或者小数点精度</td></tr><tr><td align="left">-</td><td align="left">用做左对齐</td></tr><tr><td align="left">+</td><td align="left">在正数前面显示加号( + )</td></tr><tr><td align="left"><sp></sp></td><td align="left">在正数前面显示空格</td></tr><tr><td align="left">#</td><td align="left">在八进制数前面显示零(‘0’)，在十六进制前面显示’0x’或者’0X’(取决于用的是’x’还是’X’)</td></tr><tr><td align="left">0</td><td align="left">显示的数字前面填充’0’而不是默认的空格</td></tr><tr><td align="left">%</td><td align="left">‘%%’输出一个单一的’%’</td></tr><tr><td align="left">(var)</td><td align="left">映射变量(字典参数)</td></tr><tr><td align="left">m.n.</td><td align="left">m 是显示的最小总宽度,n 是小数点后的位数(如果可用的话)</td></tr></tbody></table><ul><li><p>格式化由两种方法</p><ul><li><p>利用百分号（%）</p><p>在字符串中，利用%表示一个特殊的含义，表示对字符进行格式化</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 案例1 ：</span></span><br><span class="line">s = <span class="string">"I love %s"</span></span><br><span class="line">print(s)</span><br><span class="line"><span class="comment"># 结果显示 ：I love %s</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 案例2 ：</span></span><br><span class="line">s = <span class="string">"I love %s"</span></span><br><span class="line">print(<span class="string">"I love %s"</span> %<span class="string">"qzp"</span>)</span><br><span class="line"><span class="comment"># 结果显示 ：I love qzp</span></span><br><span class="line"></span><br><span class="line">print( s %<span class="string">"qzp"</span>)</span><br><span class="line"><span class="comment"># 结果显示 ：I love qzp</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 案例3 ：</span></span><br><span class="line"><span class="comment"># 留意下面两句print的区别和结果</span></span><br><span class="line">s = <span class="string">"I am %d years old"</span></span><br><span class="line">print(s)</span><br><span class="line">print(s %<span class="number">18</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果显示： </span></span><br><span class="line">I am %d years old</span><br><span class="line">I am <span class="number">18</span> years old</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 案例4 ：</span></span><br><span class="line"><span class="comment"># 如果出现多个占位符，则相应内容需要用括号括起来</span></span><br><span class="line">s = <span class="string">"I am %s, i am %d years old"</span></span><br><span class="line">s1 = <span class="string">"I am %.2fKG, i am %.2fm Heigh"</span></span><br><span class="line">print(s)</span><br><span class="line">print(s %(<span class="string">"qzp"</span>, <span class="number">18</span>))</span><br><span class="line">print(s1 %(<span class="number">50.1</span>, <span class="number">1.84</span>))</span><br><span class="line"><span class="comment"># 结果显示：</span></span><br><span class="line">I am %s, i am %d years old</span><br><span class="line">I am <span class="number">50.1</span>KG, i am <span class="number">1.84</span> Heigh</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>利用format函数</p><p>直接用<code>format</code>函数进行格式化，代替以前的百分号</p><ul><li>推荐使用这种方法</li><li>在使用上，以<code>{}</code>和<code>：</code>代替%号，后面用<code>format</code>带参数完成</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 案例1：</span></span><br><span class="line"><span class="comment"># 在字符串中调用</span></span><br><span class="line">s = <span class="string">"I love &#123;&#125;"</span>.format(<span class="string">"qzp"</span>)</span><br><span class="line">print(s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果显示</span></span><br><span class="line">I love qzp</span><br><span class="line">i am <span class="number">18</span> years old, I love qzp <span class="keyword">and</span> i am <span class="number">18</span> years old</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 案例2</span></span><br><span class="line"><span class="comment"># 在print中调用</span></span><br><span class="line">s = <span class="string">"&#123;&#125; &#123;&#125;!"</span></span><br><span class="line">print(s.format(<span class="string">"Hello"</span>,<span class="string">"World"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果显示</span></span><br><span class="line">Hello World！</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 案例3</span></span><br><span class="line"><span class="comment"># 设置指定位置</span></span><br><span class="line">s = <span class="string">"i am &#123;1&#125; years old, I love &#123;0&#125; and i am &#123;1&#125; years old"</span>.format(<span class="string">"qzp"</span>, <span class="number">18</span>)</span><br><span class="line">print(s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果显示</span></span><br><span class="line">i am <span class="number">18</span> years old, I love qzp <span class="keyword">and</span> i am <span class="number">18</span> years old</span><br></pre></td></tr></table></figure></li><li><p>format数字格式化：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"&#123;:.2f&#125;"</span>.format(<span class="number">3.1415926</span>));</span><br><span class="line"><span class="number">3.14</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">数字</th><th align="left">格式</th><th align="left">输出</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">3.1415926</td><td align="left">{:.2f}</td><td align="left">3.14</td><td align="left">保留小数点后两位</td></tr><tr><td align="left">3.1415926</td><td align="left">{:+.2f}</td><td align="left">+3.14</td><td align="left">带符号保留小数点后两位</td></tr><tr><td align="left">-1</td><td align="left">{:+.2f}</td><td align="left">-1.00</td><td align="left">带符号保留小数点后两位</td></tr><tr><td align="left">2.71828</td><td align="left">{:.0f}</td><td align="left">3</td><td align="left">不带小数</td></tr><tr><td align="left">5</td><td align="left">{:0&gt;2d}</td><td align="left">05</td><td align="left">数字补零 (填充左边, 宽度为2)</td></tr><tr><td align="left">5</td><td align="left">{:x&lt;4d}</td><td align="left">5xxx</td><td align="left">数字补x (填充右边, 宽度为4)</td></tr><tr><td align="left">10</td><td align="left">{:x&lt;4d}</td><td align="left">10xx</td><td align="left">数字补x (填充右边, 宽度为4)</td></tr><tr><td align="left">1000000</td><td align="left">{:,}</td><td align="left">1,000,000</td><td align="left">以逗号分隔的数字格式</td></tr><tr><td align="left">0.25</td><td align="left">{:.2%}</td><td align="left">25.00%</td><td align="left">百分比格式</td></tr><tr><td align="left">1000000000</td><td align="left">{:.2e}</td><td align="left">1.00e+09</td><td align="left">指数记法</td></tr><tr><td align="left">13</td><td align="left">{:&gt;10d}</td><td align="left">13</td><td align="left">右对齐 (默认, 宽度为10)</td></tr><tr><td align="left">13</td><td align="left">{:&lt;10d}</td><td align="left">13</td><td align="left">左对齐 (宽度为10)</td></tr><tr><td align="left">13</td><td align="left">{:^10d}</td><td align="left">13</td><td align="left">中间对齐 (宽度为10)</td></tr><tr><td align="left">11</td><td align="left">‘{:b}’.format(11)<br>‘{:d}’.format(11)<br>‘{:o}’.format(11)<br>‘{:x}’.format(11)<br>‘{:#x}’.format(11)<br>‘{:#X}’.format(11)</td><td align="left">1011<br>11<br>13<br>b  <br>0xb<br>0xB</td><td align="left">进制</td></tr></tbody></table><p><strong><code>^</code></strong>, <strong><code>&lt;</code></strong>, <strong><code>&gt;</code></strong> 分别是居中、左对齐、右对齐，后面带宽度， <strong><code>:</code></strong> 号后面带填充的字符，只能是一个字符，不指定则默认是用空格填充。</p><p><strong><code>+</code></strong> 表示在正数前显示 <strong>+</strong>，负数前显示 <strong>-</strong>； <code>（空格）</code>表示在正数前加空格</p><p><code>b、d、o、x</code>分别是二进制、十进制、八进制、十六进制。</p></li></ul><h3 id="5-内建函数"><a href="#5-内建函数" class="headerlink" title="5.内建函数"></a>5.内建函数</h3><ul><li><p>很多语言字符串使用string表示，但是python中用str表示字符串</p></li><li><p>巧用help函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">help（str）</span><br></pre></td></tr></table></figure></li></ul><p>内建函数实现了string模块的大部分使用方法，如下表所示列出了目前字符串内建支持的方法。</p><table><thead><tr><th align="left"><strong>方法</strong></th><th align="left"><strong>描述</strong></th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/python/att-string-capitalize.html" target="_blank" rel="noopener">string.capitalize()</a></td><td align="left">把字符串的第一个字符大写</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-center.html" target="_blank" rel="noopener">string.center(width)</a></td><td align="left">返回一个原字符串居中,并使用空格填充至长度 width 的新字符串</td></tr><tr><td align="left"><strong><a href="https://www.runoob.com/python/att-string-count.html" target="_blank" rel="noopener">string.count(str, beg=0, end=len(string))</a></strong></td><td align="left">返回 str 在 string 里面出现的次数，如果 beg 或者 end 指定则返回指定范围内 str 出现的次数</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-decode.html" target="_blank" rel="noopener">string.decode(encoding=’UTF-8’, errors=’strict’)</a></td><td align="left">以 encoding 指定的编码格式解码 string，如果出错默认报一个 ValueError 的 异 常 ， 除非 errors 指 定 的 是 ‘ignore’ 或 者’replace’</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-encode.html" target="_blank" rel="noopener">string.encode(encoding=’UTF-8’, errors=’strict’)</a></td><td align="left">以 encoding 指定的编码格式编码 string，如果出错默认报一个ValueError 的异常，除非 errors 指定的是’ignore’或者’replace’</td></tr><tr><td align="left"><strong><a href="https://www.runoob.com/python/att-string-endswith.html" target="_blank" rel="noopener">string.endswith(obj, beg=0, end=len(string))</a></strong></td><td align="left">检查字符串是否以 obj 结束，如果beg 或者 end 指定则检查指定的范围内是否以 obj 结束，如果是，返回 True,否则返回 False.</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-expandtabs.html" target="_blank" rel="noopener">string.expandtabs(tabsize=8)</a></td><td align="left">把字符串 string 中的 tab 符号转为空格，tab 符号默认的空格数是 8。</td></tr><tr><td align="left"><strong><a href="https://www.runoob.com/python/att-string-find.html" target="_blank" rel="noopener">string.find(str, beg=0, end=len(string))</a></strong></td><td align="left">检测 str 是否包含在 string 中，如果 beg 和 end 指定范围，则检查是否包含在指定范围内，如果是返回开始的索引值，否则返回-1</td></tr><tr><td align="left"><strong><a href="https://www.runoob.com/python/att-string-format.html" target="_blank" rel="noopener">string.format()</a></strong></td><td align="left">格式化字符串</td></tr><tr><td align="left"><strong><a href="https://www.runoob.com/python/att-string-index.html" target="_blank" rel="noopener">string.index(str, beg=0, end=len(string))</a></strong></td><td align="left">跟find()方法一样，只不过如果str不在 string中会报一个异常.</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-isalnum.html" target="_blank" rel="noopener">string.isalnum()</a></td><td align="left">如果 string 至少有一个字符并且所有字符都是字母或数字则返回 True,否则返回 False</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-isalpha.html" target="_blank" rel="noopener">string.isalpha()</a></td><td align="left">如果 string 至少有一个字符并且所有字符都是字母则返回 True,否则返回 False</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-isdecimal.html" target="_blank" rel="noopener">string.isdecimal()</a></td><td align="left">如果 string 只包含十进制数字则返回 True 否则返回 False.</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-isdigit.html" target="_blank" rel="noopener">string.isdigit()</a></td><td align="left">如果 string 只包含数字则返回 True 否则返回 False.</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-islower.html" target="_blank" rel="noopener">string.islower()</a></td><td align="left">如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回 True，否则返回 False</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-isnumeric.html" target="_blank" rel="noopener">string.isnumeric()</a></td><td align="left">如果 string 中只包含数字字符，则返回 True，否则返回 False</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-isspace.html" target="_blank" rel="noopener">string.isspace()</a></td><td align="left">如果 string 中只包含空格，则返回 True，否则返回 False.</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-istitle.html" target="_blank" rel="noopener">string.istitle()</a></td><td align="left">如果 string 是标题化的(见 title())则返回 True，否则返回 False</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-isupper.html" target="_blank" rel="noopener">string.isupper()</a></td><td align="left">如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回 True，否则返回 False</td></tr><tr><td align="left"><strong><a href="https://www.runoob.com/python/att-string-join.html" target="_blank" rel="noopener">string.join(seq)</a></strong></td><td align="left">以 string 作为分隔符，将 seq 中所有的元素(的字符串表示)合并为一个新的字符串</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-ljust.html" target="_blank" rel="noopener">string.ljust(width)</a></td><td align="left">返回一个原字符串左对齐,并使用空格填充至长度 width 的新字符串</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-lower.html" target="_blank" rel="noopener">string.lower()</a></td><td align="left">转换 string 中所有大写字符为小写.</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-lstrip.html" target="_blank" rel="noopener">string.lstrip()</a></td><td align="left">截掉 string 左边的空格</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-maketrans.html" target="_blank" rel="noopener">string.maketrans(intab, outtab])</a></td><td align="left">maketrans() 方法用于创建字符映射的转换表，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-max.html" target="_blank" rel="noopener">max(str)</a></td><td align="left">返回字符串 <em>str</em> 中最大的字母。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-min.html" target="_blank" rel="noopener">min(str)</a></td><td align="left">返回字符串 <em>str</em> 中最小的字母。</td></tr><tr><td align="left"><strong><a href="https://www.runoob.com/python/att-string-partition.html" target="_blank" rel="noopener">string.partition(str)</a></strong></td><td align="left">有点像 find()和 split()的结合体,从 str 出现的第一个位置起,把 字 符 串 string 分 成 一 个 3 元 素 的 元 组 (string_pre_str,str,string_post_str),如果 string 中不包含str 则 string_pre_str == string.</td></tr><tr><td align="left"><strong><a href="https://www.runoob.com/python/att-string-replace.html" target="_blank" rel="noopener">string.replace(str1, str2, num=string.count(str1))</a></strong></td><td align="left">把 string 中的 str1 替换成 str2,如果 num 指定，则替换不超过 num 次.</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-rfind.html" target="_blank" rel="noopener">string.rfind(str, beg=0,end=len(string) )</a></td><td align="left">类似于 find()函数，不过是从右边开始查找.</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-rindex.html" target="_blank" rel="noopener">string.rindex( str, beg=0,end=len(string))</a></td><td align="left">类似于 index()，不过是从右边开始.</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-rjust.html" target="_blank" rel="noopener">string.rjust(width)</a></td><td align="left">返回一个原字符串右对齐,并使用空格填充至长度 width 的新字符串</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-rpartition.html" target="_blank" rel="noopener">string.rpartition(str)</a></td><td align="left">类似于 partition()函数,不过是从右边开始查找</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-rstrip.html" target="_blank" rel="noopener">string.rstrip()</a></td><td align="left">删除 string 字符串末尾的空格.</td></tr><tr><td align="left"><strong><a href="https://www.runoob.com/python/att-string-split.html" target="_blank" rel="noopener">string.split(str=””, num=string.count(str))</a></strong></td><td align="left">以 str 为分隔符切片 string，如果 num 有指定值，则仅分隔 num+ 个子字符串</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-splitlines.html" target="_blank" rel="noopener">string.splitlines([keepends])</a></td><td align="left">按照行(‘\r’, ‘\r\n’, \n’)分隔，返回一个包含各行作为元素的列表，如果参数 keepends 为 False，不包含换行符，如果为 True，则保留换行符。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-startswith.html" target="_blank" rel="noopener">string.startswith(obj, beg=0,end=len(string))</a></td><td align="left">检查字符串是否是以 obj 开头，是则返回 True，否则返回 False。如果beg 和 end 指定值，则在指定范围内检查.</td></tr><tr><td align="left"><strong><a href="https://www.runoob.com/python/att-string-strip.html" target="_blank" rel="noopener">string.strip([obj])</a></strong></td><td align="left">在 string 上执行 lstrip()和 rstrip()</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-swapcase.html" target="_blank" rel="noopener">string.swapcase()</a></td><td align="left">翻转 string 中的大小写</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-title.html" target="_blank" rel="noopener">string.title()</a></td><td align="left">返回”标题化”的 string,就是说所有单词都是以大写开始，其余字母均为小写(见 istitle())</td></tr><tr><td align="left"><strong><a href="https://www.runoob.com/python/att-string-translate.html" target="_blank" rel="noopener">string.translate(str, del=””)</a></strong></td><td align="left">根据 str 给出的表(包含 256 个字符)转换 string 的字符,要过滤掉的字符放到 del 参数中</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-upper.html" target="_blank" rel="noopener">string.upper()</a></td><td align="left">转换 string 中的小写字母为大写</td></tr><tr><td align="left"><a href="https://www.runoob.com/python/att-string-zfill.html" target="_blank" rel="noopener">string.zfill(width)</a></td><td align="left">返回长度为 width 的字符串，原字符串 string 右对齐，前面填充0</td></tr></tbody></table><h2 id="三、List-列表"><a href="#三、List-列表" class="headerlink" title="三、List|列表"></a>三、List|列表</h2><h2 id="四、Tuple-元组"><a href="#四、Tuple-元组" class="headerlink" title="四、Tuple|元组"></a>四、Tuple|元组</h2><h2 id="五、Dictionary-字典"><a href="#五、Dictionary-字典" class="headerlink" title="五、Dictionary|字典"></a>五、Dictionary|字典</h2><h2 id="六、Sets-集合"><a href="#六、Sets-集合" class="headerlink" title="六、Sets|集合"></a>六、Sets|集合</h2>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 变量和数据类型 </category>
          
          <category> 数据类型 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人生苦短我学Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell</title>
      <link href="/2020/03/29/shell/"/>
      <url>/2020/03/29/shell/</url>
      
        <content type="html"><![CDATA[<center> Chapter 4 shell编程 笔记 </center><center><img src="/2020/03/29/shell/1.jpg" class title="系小鹏鹏(❤ ω ❤)呀"></center><a id="more"></a><h1 id="shell编程"><a href="#shell编程" class="headerlink" title="shell编程"></a>shell编程</h1><ol><li><p>简介：    </p><ul><li>Shell是一种具备特殊功能的程序，是使用者和kernel间的一个接口</li><li>Shell 是一种功能强大的<strong>解释型</strong>编程语言</li><li>Shell 脚本语言非常擅长处理文本类型的数据</li></ul></li><li><p>规范：</p><ul><li><p>以<code>#!</code>开头：表示系统用解释器执行此脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/ksh</span></span><br></pre></td></tr></table></figure></li><li><p>以<code>#</code>注释：</p><p>通常注释包括</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 脚本名称</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 脚本功能</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 作者及联系方式</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 版本更新记录</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 版权声明</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 对算法做简要说明（如果是复杂脚本）</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>执行：</p><ul><li><p>方式1 ：</p><p>source filename 或者 .   filename</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">source filename   </span><br><span class="line">. filename</span><br></pre></td></tr></table></figure><ul><li>在<strong>当前</strong>shell环境下读取并执行</li></ul></li><li><p>方式2 ：</p><p>sh(或bash、ksh…)  filename</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh(或bash、ksh…)  filename</span><br></pre></td></tr></table></figure><ul><li>新建<strong>一个子shell</strong>读取并执行filename中的命令</li><li>子shell<strong>继承父shell的环境变量</strong>，但子shell新建的、改变的变量不会被带回父shell</li></ul></li><li><p>方式3 ：</p><p>./filename</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;filename</span><br></pre></td></tr></table></figure><ul><li>打开一个<strong>子shell</strong>来读取并执行filename中命令</li><li>子shell必须有<strong>可执行的权限</strong></li></ul></li></ul></li></ol><h2 id="一、shell变量"><a href="#一、shell变量" class="headerlink" title="一、shell变量"></a>一、shell变量</h2><h3 id="1-变量的使用"><a href="#1-变量的使用" class="headerlink" title="1. 变量的使用"></a>1. 变量的使用</h3><p>Shell编程中，使用变量无需事先声明</p><ul><li><p>变量的赋值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变量名=变量值   #（注意：不能留空格）</span><br></pre></td></tr></table></figure></li><li><p>变量的引用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">var    <span class="comment">#引用var变量</span></span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2-shell变量类型"><a href="#2-shell变量类型" class="headerlink" title="2. shell变量类型"></a>2. shell变量类型</h3><ul><li><p><strong>1）用户自定义变量</strong></p><ul><li><p>有用户自己定义、修改和使用</p></li><li><p>shell的<strong>默认</strong>赋值是<strong>字符串赋值</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var=1     </span><br><span class="line">var=$var+1 </span><br><span class="line">echo  $var</span><br><span class="line"><span class="meta">#</span><span class="bash">打印的结果是var的地址值加一后的值</span></span><br></pre></td></tr></table></figure><p>为了达到var的值加1的效果 通常有下面三种方式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let "var+=1"</span><br><span class="line"></span><br><span class="line">var=$[$var+1]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">前两种方式在bash下有效，在sh下会出错</span></span><br><span class="line"></span><br><span class="line">var=`expr $var + 1`  #注意加号两边的空格</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><strong>2）环境变量</strong></p><ul><li><p>Shell环境变量由<strong>系统维护</strong>，用于设置用户的<strong>Shell工作环境</strong></p><ul><li>只有少数的变量用户可以修改其值</li></ul></li><li><p>在声明或赋值时使用<code>export</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export 变量名</span><br><span class="line"></span><br><span class="line">export 变量名=变量值</span><br></pre></td></tr></table></figure><ul><li>使用export说明的变量，在Shell以后运行的<strong>所有</strong>命令或程序中都<strong>可以访问</strong></li><li>子shell更改的环境变量并不会带回到父shell</li></ul><table><thead><tr><th align="left">常用的环境变量</th><th>意义</th></tr></thead><tbody><tr><td align="left">HOME</td><td>当前用户的主目录</td></tr><tr><td align="left"><strong>PATH</strong></td><td>用冒号分隔的目录路径名<br><em>Shell将顺序搜索这些目录，找到的第一个与命令名称一致的可执行文件将被执行</em></td></tr><tr><td align="left">TERM</td><td>终端的类型</td></tr><tr><td align="left">HOSTNAME</td><td>主机名称</td></tr><tr><td align="left">SHELL</td><td>当前使用的是哪种shell</td></tr><tr><td align="left">PWD</td><td>当前工作目录的绝对路径名，该变量的取值随cd命令的使用而变化</td></tr></tbody></table></li></ul></li><li><p><strong>3） 位置参数变量</strong></p><ul><li><p>位置参数变量是一组特殊的<strong>内置变量</strong></p></li><li><p>跟在脚本名后面的用<strong>空格隔开</strong>的字符串</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">1   <span class="comment"># 表示第1个参数值</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">9   <span class="comment"># 表示第9个参数值</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;10&#125; <span class="comment"># 表示第10个参数值</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;11&#125; <span class="comment"># 表示第11个参数值</span></span></span><br></pre></td></tr></table></figure></li><li><p>用途：</p><ul><li>从shell命令/脚本的命令行<strong>接受参数</strong></li><li>在调用shell 函数时为其<strong>传递参数</strong></li></ul></li></ul></li><li><p><strong>4） 专用参数变量</strong></p><ul><li><p>命令行参数相关</p><table><thead><tr><th>命令行参数相关</th><th>作用</th></tr></thead><tbody><tr><td>$*</td><td>将<strong>所有位置参量</strong>看成一个字符串(以空格间隔)</td></tr><tr><td>$@</td><td>将<strong>每个位置参量</strong>看成单独的字符串(以空格间隔)</td></tr><tr><td><strong>$0</strong></td><td>命令行上输入的Shell程序名</td></tr><tr><td>$#</td><td>表示命令行上参数的个数</td></tr></tbody></table></li><li><p>进程状态相关</p><table><thead><tr><th>进程状态相关</th><th>作用</th></tr></thead><tbody><tr><td><strong>$?</strong></td><td>表示<strong>上一条命令</strong>执行后的返回值</td></tr><tr><td>$$</td><td>当前进程的进程号</td></tr><tr><td>$!</td><td>显示运行在后台的最后一个作业的 PID</td></tr></tbody></table><ul><li><p><code>$?</code> 返回状态</p><table><thead><tr><th>$? 返回值</th><th>状态</th></tr></thead><tbody><tr><td>0</td><td>成功</td></tr><tr><td>1-255</td><td>不成功</td></tr><tr><td>1</td><td>通用错误</td></tr><tr><td>126</td><td>命令或脚本没有执行权限</td></tr><tr><td>127</td><td>命令没有找到</td></tr></tbody></table></li></ul></li><li><pre><code></code></pre></li></ul></li></ul><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 二、shell常用内置命令</span><br><span class="line"></span><br><span class="line">### 1.常规常用命令</span><br><span class="line"></span><br><span class="line">- &#96;echo&#96; | 显示</span><br><span class="line"></span><br><span class="line">  在屏幕上显示出由 arg 指定的字串</span><br><span class="line"></span><br><span class="line">  &#96;&#96;&#96;shell</span><br><span class="line">  # 命令格式</span><br><span class="line">  echo arg</span><br></pre></td></tr></table></figure></code></pre><ul><li><p><code>export</code> | 变量赋值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 命令格式</span></span><br><span class="line">export 变量[=变量值]</span><br><span class="line"></span><br><span class="line">export</span><br></pre></td></tr></table></figure><ul><li><p>shell可以用export把他的变量<strong>向下带入子shell</strong>，从而让子进程<strong>继承</strong>父进程中的<strong>环境变量</strong></p></li><li><p>不带任何变量名的export语句将显示出当前<strong>所有的export变量</strong></p></li></ul></li></ul><ul><li><p><code>eval</code>| 执行表达式</p><p>对参数进行<strong>两次</strong>扫描和替换</p><ul><li>将所有的参数连接成一个表达式，并计算或者执行该表达式</li><li>参数中的任何变量都将被展开</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 示例</span></span><br><span class="line">listpage="ls -l | more"</span><br><span class="line">eval $listpage</span><br><span class="line"></span><br><span class="line">eval $(ssh-agent)</span><br><span class="line"></span><br><span class="line">eval newstr=\$$str2</span><br><span class="line">eval echo \$$&#123;x&#125;_URL</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 思考以下三组命令的区别</span></span><br><span class="line">myfile=“cat file1.txt” </span><br><span class="line">echo $myfile</span><br><span class="line"></span><br><span class="line">myfile=“cat file1.txt” </span><br><span class="line">eval echo $myfile </span><br><span class="line"></span><br><span class="line">myfile=“cat file1.txt” </span><br><span class="line">eval $myfile</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>read</code>| 键盘输入赋值</p><p>从键盘输入内容为变量赋值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 命令格式</span></span><br><span class="line">read  -p "信息"  [var1 var2 ...]</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 示例</span></span><br><span class="line">read -p "Enter you name:"</span><br><span class="line">echo "I know your name is $REPLY"</span><br></pre></td></tr></table></figure><ul><li>若省略变量名，则将输出的内容默认存入RELPLY变量中</li></ul></li></ul><ul><li><p><code>readonly</code> | 只读的变量赋值</p><p>不能被清除或重新赋值的变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 命令格式</span></span><br><span class="line">readonly  variable</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 示例</span></span><br><span class="line">echo -e "What is your name? \c"</span><br><span class="line">read name</span><br><span class="line">echo "Hello $name"</span><br><span class="line">readonly name</span><br><span class="line">echo -e  "What is your another name? \c"</span><br><span class="line">read name</span><br><span class="line">echo "Oh $name"</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-重要编程命令"><a href="#2-重要编程命令" class="headerlink" title="2.重要编程命令"></a>2.重要编程命令</h3><ul><li><p><code>shift</code>|左移</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 命令格式</span></span><br><span class="line">shift [n]</span><br></pre></td></tr></table></figure><ul><li>将位置参量列表依次<strong>左移</strong>n次<em>（缺省为左移一次）</em></li><li>一旦位置参量列表被移动，<strong>最左端</strong>的那个参数就会从列表中<strong>删除</strong></li><li>经常与<u>循环结构语句</u>一起使用，以便遍历每一个位置参数</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 示例</span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/<span class="comment">#!/bin/shsh</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ScriptName: pp_s_shift.shsh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> To <span class="built_in">test</span> Positional Pararameters &amp;  Shift.</span></span><br><span class="line">echo "The script name is:  $0"</span><br><span class="line">echo '$1'=$1,'$2'=$2,'$3'=$3,'$4'=$4 -- '$#'="$#"</span><br><span class="line">echo '$@': "$@"</span><br><span class="line">shitf    # 向左移动所有的位置1次</span><br><span class="line">echo '$1'=$1,'$2'=$2,'$3'=$3,'$4'=$4 -- '$#'="$#"</span><br><span class="line">echo '$@': "$@"</span><br><span class="line">shitf 2  # 向左移动所有的位置2次</span><br><span class="line">echo '$1'=$1,'$2'=$2,'$3'=$3,'$4'=$4 -- '$#'="$#"</span><br><span class="line">echo '$@': "$@"</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash">./pp_shift.sh 1 b 3 d 5 f</span></span><br></pre></td></tr></table></figure></li><li><p><code>declare</code> | 声明变量</p><p>内置命令 declare 可用来声明变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">declare [选项] variable[=value]</span><br></pre></td></tr></table></figure><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td><strong>-r</strong></td><td>将变量设为只读( readonly )</td></tr><tr><td><strong>-x</strong></td><td>将变量输出到子shell 中（export 为全局变量）</td></tr><tr><td><strong>-i</strong></td><td>将变量设为整型( integer )</td></tr><tr><td><strong>-a</strong></td><td>将变量设置为一个数组( array )</td></tr><tr><td>-f</td><td>列出函数的名字和定义( function )</td></tr><tr><td>-F</td><td>只列出函数名</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 示例</span></span><br><span class="line">declare myname=lbw</span><br><span class="line"></span><br><span class="line">declare -r myname=lbw</span><br><span class="line">unset myname</span><br><span class="line">declare mynanme="lbw NB"</span><br><span class="line"></span><br><span class="line">declare -x myname2=mafeifei</span><br><span class="line"></span><br><span class="line">myname2=mafeifei</span><br><span class="line">declare -x myname2</span><br><span class="line"></span><br><span class="line">declare</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-数字运算相关命令"><a href="#3-数字运算相关命令" class="headerlink" title="3.数字运算相关命令"></a>3.数字运算相关命令</h3><ul><li><code>let</code> | 算术运算</li><li><code>expr</code> | 通用的表达式计算</li><li><code>printf</code> | 按照指定格式输出</li></ul><p>在之后的<strong>整数运算</strong>中对运算相关的内置命令会详细介绍</p><h3 id="4-退出与读入"><a href="#4-退出与读入" class="headerlink" title="4.退出与读入"></a>4.退出与读入</h3><ul><li><p><code>exit</code>|退出</p><p>退出脚本或当前shell</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 示例</span></span><br><span class="line">exit n</span><br></pre></td></tr></table></figure><ul><li>n 是一个 0-255 的整数</li><li>0 表示成功退出，非零表示遇到某种失败</li><li><u>返回值</u> 被保存在状态变量<code>$?</code>中</li></ul></li><li><p><code>.</code>(点) | 读入</p><p>使Shell读入指定的Shell程序文件并依次执行文件中的所有语句</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 示例</span></span><br><span class="line">. Shell程序文件名</span><br></pre></td></tr></table></figure></li></ul><h2 id="三、特殊字符"><a href="#三、特殊字符" class="headerlink" title="三、特殊字符"></a>三、特殊字符</h2><h3 id="1-一般通配符"><a href="#1-一般通配符" class="headerlink" title="1.一般通配符"></a>1.一般通配符</h3><p>可以同时使用多个通配符</p><table><thead><tr><th>一般通配符</th><th>功能</th><th>备注</th></tr></thead><tbody><tr><td>*</td><td>匹配不限长度的多个字符</td><td></td></tr><tr><td>?</td><td>匹配任意一个字符</td><td></td></tr><tr><td>[]</td><td>匹配字符组所限定的任何一个字符</td><td>▪    字符组可以由直接给出的字符组成，也可以由字符和连字符(-)组成<br>▪    f[a-d]与f[abcd]作用相同</td></tr><tr><td>!</td><td>表示不在方括号中所列出的字符</td><td>f[!1-9].c 表示以f打头，后面一个字符不是数字1至9的.c文件名，它匹配fa.c、fb.c、fm.c等</td></tr></tbody></table><h3 id="2-模式表达式"><a href="#2-模式表达式" class="headerlink" title="2.模式表达式"></a>2.模式表达式</h3><p>bash除支持一般通配符外，还提供扩展模式匹配表达式</p><table><thead><tr><th>模式表达式</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td>*(模式表)</td><td>匹配给定模式表中 “模式” 的<strong>0次或多次</strong>出现，各模式之间以 “ | ” 分开</td><td>file*(.c|.o)将匹配文件file、file.c、file.o、file.c.c、file.o.o、file.c.o、file.o.c等</td></tr><tr><td>+(模式表)</td><td>匹配给定模式表中 “模式” 的<strong>1次或多次</strong>出现，各模式之间以 “ | ” 分开</td><td>file<em>(.c|.o)将匹配ile.c、file.o、file.c.o、file.c.c等。*</em>但不匹配file**。</td></tr><tr><td>?(模式表)</td><td>匹配模式表中 <strong>任何</strong>一种“模式” 的<strong>0次或1次</strong>出现，各模式之间以“ |”分开</td><td>file?(.c|.o)匹配file、file.c和file.o，<strong>不匹配file. c. c、file. c.o等</strong>。</td></tr><tr><td>@(模式表)</td><td>匹配模式表中 给定“模式” 的<strong>1次</strong>出现，各模式之间以“|”分开</td><td>file@(.c|.0)<strong>只匹配file.c和file.o</strong></td></tr><tr><td>!(模式表)</td><td>除给定模式表中的一个“模式”<strong>之外</strong>，它可以匹配其它任何东西</td><td></td></tr></tbody></table><h3 id="3-引号"><a href="#3-引号" class="headerlink" title="3.引号"></a>3.引号</h3><p>Shell中引号有3种：单引号、双引号和倒引号。</p><ul><li><p>双引号</p><p>如果在赋给变量的值中要含有空格、制表符或换行符，要用双引号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">names="Zhangsan Lisi Wangwu"</span><br></pre></td></tr></table></figure><ul><li><p>在双引号内除 $  ，` ， \  仍保留其特殊功能外，其余字符均作为普通字符对待。</p><ul><li>$ 表示变量替换</li><li>` 倒引号表示命令替换</li><li>\ 为转义字符</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo  “Dir is `pwd` and logname is $LOGNAME”</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>单引号</p><p>由单引号括起来的字符都作为<strong>普通字符</strong>出现，即使是$，`，\</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo  ' The  time  is  ` date ` , the  file  is $HOME/abc '</span><br><span class="line"></span><br><span class="line">The  time  is  ` date ` , the  file  is  $HOME/abc</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>倒引号</p><p>倒引号括起来的字符串被shell解释为命令行，在执行时，Shell会先执行该命令行，并以它的标准输出结果取代整个倒引号部分。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">echo  “current  directory  is  ` pwd `”</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 结果显示</span></span><br><span class="line">current  directory  is  /home/mengqc</span><br></pre></td></tr></table></figure><p>因此倒引号有<strong>命令替换</strong>的作用，可以将一个命令的执行结果赋值给变量。</p><p>命令替换一共有两种形式：倒引号、$</p><ul><li><p>`  命令表 `</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将当前工作目录的全路径名存放到变量dir中</span></span><br><span class="line">dir=`pwd`</span><br></pre></td></tr></table></figure></li><li><p>$(命令表)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将当前工作目录的全路径名存放到变量dir中</span></span><br><span class="line">dir=$(pwd) </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">注意</span></span><br><span class="line"><span class="meta">#</span><span class="bash">shell中不能随意添加和去掉括号</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="4-括号"><a href="#4-括号" class="headerlink" title="4.括号"></a>4.括号</h3><table><thead><tr><th>括号类型</th><th>作用</th></tr></thead><tbody><tr><td>()</td><td>1.命令组<br>2.结合$进行命令替换<br>3.初始化数组array=(a b c d)</td></tr><tr><td>[]</td><td>1.字符范围<br>2.数组编号<br>3.算术运算<br>4.条件判断</td></tr><tr><td>{}</td><td>替换</td></tr><tr><td>( () )</td><td>1.算术运算<br>2.for循环中的算术运算比较for((i=0;i&lt;5;i++))</td></tr><tr><td>[ [] ]</td><td>条件判断等</td></tr></tbody></table><h3 id="5-特殊字符的组合使用"><a href="#5-特殊字符的组合使用" class="headerlink" title="5. 特殊字符的组合使用"></a>5. 特殊字符的组合使用</h3><p>在实际运用中 假如我们想把 str1中的字符串复制到 str2中，然后用str2来显示，那么直接使用用以下的方法是不能成功的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 案例1</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 把 str1中的字符串复制到 str2中</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示str2中的值</span></span><br><span class="line">str1="Hello World"</span><br><span class="line">str2=str1</span><br><span class="line">echo $str2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 结果展示：</span></span><br><span class="line">str1</span><br></pre></td></tr></table></figure><p>因此我们得需要使用一定的符号与其他符号相结合对变量进行间接的引用，这样才能达到案例中想要得到的效果。这样的方法我们称之为<strong>变量的间接引用</strong> 。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 实例1-1</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过 str2的值来引用 str1的值</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> bash2.0以上才支持</span></span><br><span class="line">str1="Hello World"</span><br><span class="line">str2=str1</span><br><span class="line"></span><br><span class="line">newstr=$&#123;!str2&#125; </span><br><span class="line">echo $newstr  # 方法1</span><br><span class="line">echo " 1 "</span><br><span class="line">echo $&#123;!str2&#125; # 方法2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 结果展示：</span></span><br><span class="line">Hello World</span><br><span class="line"> 1 </span><br><span class="line">Hello World</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 实例1-2</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过 str2的值来引用 str1的值</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> bash都支持</span></span><br><span class="line">eval newstr=\$$str2 </span><br><span class="line">echo $newstr</span><br><span class="line">Hello World        # 方法1</span><br><span class="line">echo " 1 "</span><br><span class="line">eval echo \$$str2  # 方法2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 结果展示：</span></span><br><span class="line">Hello World</span><br><span class="line"> 1 </span><br><span class="line">Hello World</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 实例2-1</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过 x的值来引用 CENTOS_URL的值</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> bash2.0以上才支持</span></span><br><span class="line">x="CENTOS" </span><br><span class="line">CENTOS_URL="http://mirrors.163.com/centos/"</span><br><span class="line"></span><br><span class="line">newstr=$&#123;x&#125;_URL</span><br><span class="line">echo $newstr</span><br><span class="line">echo $&#123;!newstr&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 结果展示：</span></span><br><span class="line">CENTOS_URL</span><br><span class="line">http://mirrors.163.com/centos/</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 实例2-2</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过 x的值来引用 CENTOS_URL的值</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> bash都支持</span></span><br><span class="line">x="CENTOS" </span><br><span class="line">CENTOS_URL="http://mirrors.163.com/centos/"</span><br><span class="line"></span><br><span class="line">eval newstr=\$$&#123;x&#125;_URL  # 方法1</span><br><span class="line">echo $newstr</span><br><span class="line">eval echo \$$&#123;x&#125;_URL    # 方法2</span><br><span class="line"><span class="meta">#</span><span class="bash"> 结果展示：</span></span><br><span class="line">http://mirrors.163.com/centos/</span><br><span class="line">http://mirrors.163.com/centos/</span><br></pre></td></tr></table></figure><h2 id="四、整数运算"><a href="#四、整数运算" class="headerlink" title="四、整数运算"></a>四、整数运算</h2><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h3><ul><li><p>bash上的变量没有严格的类型定义，本质上bash变量都是<strong>字符串</strong>。</p></li><li><p>若一个字面常量或变量的值是<strong>纯数字</strong>的（不包含字母或其他字符），bash可以将其当作<strong>长整型值</strong>，并可做算术运算和比较运算。</p></li><li><p>bash允许<strong>显式地声明</strong>整型变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">declare -i 变量名</span><br></pre></td></tr></table></figure></li></ul><p>常见的算术运算符：</p><table><thead><tr><th>运算方式</th><th>运算符号</th></tr></thead><tbody><tr><td>四则运算</td><td>+、 -、 *、 /</td></tr><tr><td>幂运算、模运算、取余</td><td>**、 %</td></tr><tr><td>按位左移、按位右移</td><td>&lt;&lt;、 &gt;&gt;</td></tr><tr><td>按位与、按位异或、按位或</td><td>&amp;、 ^、</td></tr><tr><td>赋值运算</td><td>=、 +=、 -= 、 *=、 /= 、 %=、 &lt;&lt;= 、 &gt;&gt;= 、 &amp;=、 ^=、|=</td></tr><tr><td>比较操作符</td><td>&lt;、 &gt;、 &lt;=、 &gt;=、 ==、 !=</td></tr><tr><td>逻辑与、逻辑或</td><td>&amp;&amp;、||</td></tr></tbody></table><p><code>注：按位运算是以二进制形式进行的。</code></p><h3 id="2-运算拓展"><a href="#2-运算拓展" class="headerlink" title="2.$[] 运算拓展"></a>2.$[] 运算拓展</h3><p>用 <code>$[···]</code>，<code>$((···))</code>进行整数运算时，括号内变量前的美元符号 $可以省略。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">[expression]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">等同于</span></span><br><span class="line"><span class="meta">$</span><span class="bash">((expression))</span></span><br></pre></td></tr></table></figure><p>感受<code>${...}</code> <code>$(...)</code> <code>$[...]</code> <code>$((...))</code>的不同作用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 示例 1</span></span><br><span class="line">num1=$[4+1]; echo $num1</span><br><span class="line">num1=$(($num1*2-3)); echo $num1</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 示例 2</span></span><br><span class="line">((num2=2+3**2-1001%5)); echo $num2</span><br><span class="line">num2=$((2+3**2-1001%5)); echo $num2</span><br><span class="line">echo $((2+3**2-1001%5))</span><br></pre></td></tr></table></figure><h3 id="3-运算相关内置命令"><a href="#3-运算相关内置命令" class="headerlink" title="3.运算相关内置命令"></a>3.运算相关内置命令</h3><ul><li><p><code>let</code> | 算术运算</p><p>let 内置命令用于算术运算</p><ul><li>复制符号和运算符两边<strong>不能留空格</strong></li><li>如果将字符串复制给一个整型变量时，变量的值为0</li><li>如果变量的值是字符串，则进行算术运算时设为0</li><li>将let后的语句放在引号内，则可忽略空格的特殊含义</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 示例</span></span><br><span class="line">num2=1;echo $num2</span><br><span class="line">let num2=4+1;echo $num2</span><br><span class="line">let num2=$num2+1;echo $num2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 用引号忽略空格的特殊含义</span></span><br><span class="line">let "num2=4 + 1"</span><br></pre></td></tr></table></figure><p><em>注： 用let命令进行算术运算时，最好加双引号</em></p></li></ul><ul><li><p><code>expr</code> | 表达式计算</p><p>通用的表达式计算命令</p><ul><li>表达式中参数与操作符必须<strong>以空格分开</strong></li><li>表达式中的运算可以是算术运算，比较运算，字符串运算和逻辑运算</li><li>乘法符号和括号需要被转义</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 示例</span></span><br><span class="line">expr 5 % 3</span><br><span class="line">expr 5 \* 3                #乘法符号必须被转义</span><br><span class="line">expr 2 + 5 \* 2 - 3 % 2</span><br><span class="line">expr \( 2 + 5 \) \* 2 - 3  #括号必须被转义</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>printf</code> | 格式输出</p><p>printf可用来按指定的格式输出变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">printf format 输出参数列表</span><br></pre></td></tr></table></figure><p><img src="/2020/03/29/shell/C:%5CUsers%5C79450%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cshell_printf.png" alt="image-20200330143920550"></p></li></ul><ul><li><p>格式说明符</p><table><thead><tr><th>格式说明符</th><th>类型</th><th>格式说明符</th><th>类型</th></tr></thead><tbody><tr><td>c</td><td>字符型</td><td>g/G</td><td>浮点数（自动）</td></tr><tr><td>d</td><td>十进制整数</td><td>o</td><td>八进制</td></tr><tr><td>e/E</td><td>浮点数（科学计数法）</td><td>s</td><td>字符串</td></tr><tr><td>f</td><td>浮点数（小数形式）</td><td>x/X</td><td>十六进制</td></tr></tbody></table></li><li><p>末尾可添加的拓展</p><table><thead><tr><th>符号</th><th>作用</th><th>符号</th><th>作用</th></tr></thead><tbody><tr><td>\a</td><td>警铃</td><td>\t</td><td>水平制表符</td></tr><tr><td>\b</td><td>退后一格</td><td>\v</td><td>垂直制表符</td></tr><tr><td>\n</td><td>换行</td><td>\ \</td><td>反斜杠</td></tr><tr><td>\f</td><td>换页</td><td>\ “</td><td>双引号</td></tr><tr><td>\r</td><td>回车</td><td>%%</td><td>百分号</td></tr></tbody></table></li></ul>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 示例</span></span><br><span class="line">printf "The number is: %.2f\n"  100</span><br><span class="line">printf "%-20s|%12.5f|\n" "Joy" 10</span><br><span class="line">printf "%-10x%010o%+10d\n" 20 20 20</span><br><span class="line">printf "%6d\t%6o\"%6x\"\n" 20 20 20</span><br></pre></td></tr></table></figure><h3 id="4-数组变量"><a href="#4-数组变量" class="headerlink" title="4.数组变量"></a>4.数组变量</h3><p>Bash2.X 以上支持一位数组，下标从0开始。</p><ul><li><p>数组赋值</p><ol><li>使用<code>declare</code> 声明（declare详细使用请看 二、shell常用内置命令2.重要编程命令）</li><li>直接给变量名加下标</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 使用decare声明</span></span><br><span class="line">declare -a var</span><br><span class="line">var=（item1 item2 item3 ...）</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">直接给变量名加下标</span></span><br><span class="line">var=（item1 item2 item3 ...）</span><br><span class="line">var[n]=value</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>数组引用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">&#123;variable[n]&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 示例</span></span><br><span class="line">declare -a stu</span><br><span class="line">stu=(math1 math2 math3)</span><br><span class="line">echo $&#123;stu[0]&#125;  # 列出stu的第一个元素</span><br><span class="line">echo $&#123;stu[*]&#125;  # 列出stu的所有元素</span><br><span class="line">echo $&#123;#stu[*]&#125; # 给出数组stu中的个数</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>数组与数组元素的删除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 示例</span></span><br><span class="line">unset stu[0] # 删除stu的第一个元素</span><br><span class="line">unset stu    # 删除整个数组</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>数组赋值无须按顺序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 示例：</span></span><br><span class="line">x[3]=100;echo $&#123;x[*]&#125;</span><br><span class="line">state=(ME [3]=CA [2]=NT);echo $&#123;state[*]&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="五、条件测试"><a href="#五、条件测试" class="headerlink" title="五、条件测试"></a>五、条件测试</h2><h3 id="1-定义-1"><a href="#1-定义-1" class="headerlink" title="1.定义"></a>1.定义</h3><p>条件测试可以判断某个特定条件是否满足</p><ul><li><p>条件测试的<strong>种类</strong></p><ul><li>命令 成功 | 失败</li><li>表达式 真 | 假</li></ul></li><li><p>条件测试的<strong>值</strong></p><ul><li><p>Bash中没有布尔类型变量，因此</p><ul><li>退出状态<strong><u>为0</u></strong> ：表示 命令<strong><u>成功</u></strong> 或 表达式为<strong><u>真</u></strong></li><li>退出状态非0：表示 命令失败 或 表达式为假</li></ul></li><li><p>状态变量<code>$?</code>中保存了退出状态的值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 示例</span></span><br><span class="line">Host=centos1</span><br><span class="line">ping -c 1 $Host</span><br><span class="line">echo $?</span><br><span class="line"></span><br><span class="line">ping -c 1 $Host &gt; /dev/null \</span><br><span class="line"> &amp;&amp; echo "$Host is up."  \</span><br><span class="line"> || echo "$Host is down."</span><br></pre></td></tr></table></figure></li></ul></li><li><p>条件测试语句</p><ul><li><p>语句格式</p><ul><li><p>格式1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test 测试表达式</span><br></pre></td></tr></table></figure></li><li><p>格式2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ 测试表达式 ]</span><br></pre></td></tr></table></figure></li><li><p>格式3：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[ 测试表达式 ]]  # （Bash2.X以上版本）</span><br></pre></td></tr></table></figure></li></ul></li><li><p>语句注意：</p><ul><li>格式1 和 格式2 是等价的，格式3是扩展的 test 命令</li><li>在 [[ ]] 中可以<strong>使用通配符进行模式匹配</strong></li><li>&amp;&amp;, ||, &lt;, 和&gt;能够正常存在于[[ ]]中，但不能在[] 中出现</li><li>[ 和 [[ 之后的字符必须为<strong>空格</strong>，]和]]之前的字符必须为空格</li><li>要对整数进行关系运算也可以使用 (( ))  进行测试</li></ul></li></ul></li></ul><h3 id="2-条件测试操作符"><a href="#2-条件测试操作符" class="headerlink" title="2.条件测试操作符"></a>2.条件测试操作符</h3><ul><li><p>文件测试操作符</p><p>测试文件是否存在，文件属性，访问权限等</p><table><thead><tr><th>操作符</th><th>作用</th></tr></thead><tbody><tr><td>[ -f fname ]</td><td>fname存在且是<strong>普通文件</strong>时，返回真( 即返回0)</td></tr><tr><td>[ -L fname ]</td><td>fname存在且是<strong>链接文件</strong>时，返回真</td></tr><tr><td>[ -d fname ]</td><td>fname存在且是一个<strong>目录</strong>时，返回真</td></tr><tr><td><strong>[ -e fname ]</strong></td><td>fname（<strong>文件或目录</strong>）存在时，返回真</td></tr><tr><td>[ -s fname ]</td><td>fname存在且大小大于0时，返回真</td></tr><tr><td>[ -r fname ]</td><td>fname（文件或目录）存在且可读时，返回真</td></tr><tr><td>[ -w fname ]</td><td>fname（文件或目录）存在且可写时，返回真</td></tr><tr><td>[ -x fname ]</td><td>fname（文件或目录）存在且可执行时，返回真</td></tr></tbody></table><p>更多文件测试符参见test的在线帮助，输入命令<code>man test</code></p></li></ul><ul><li><p>字符串测试操作符</p><p>字符串安从左到右对应字符的ASCII码进行比较</p><table><thead><tr><th>操作符</th><th>作用</th></tr></thead><tbody><tr><td>[ -z string ]</td><td>如果字符串string<strong>长度为0</strong>，返回真</td></tr><tr><td>[ -n string ]</td><td>如果字符串string<strong>长度不为0</strong>，返回真</td></tr><tr><td>[ str1 = str2 ]</td><td>两字符串相等（也可使用 == ）返回真</td></tr><tr><td>[ str1 != str2 ]</td><td>两字符串不等返回真</td></tr><tr><td></td><td></td></tr><tr><td>[[ str1 == str2 ]]</td><td>两字符串相同返回真</td></tr><tr><td>[[ str1 != str2 ]]</td><td>两字符串不相同返回真</td></tr><tr><td>[[ str1 =~ str2 ]]</td><td>str2是str1的子串返回真</td></tr><tr><td>[[ str1 &gt; str2 ]]</td><td>str1大于str2返回真</td></tr><tr><td>[[ str1 &lt; str2 ]]</td><td>str1小于str2返回真</td></tr></tbody></table><ul><li><p>检查空值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[ "$name" = "" ]</span><br><span class="line">[ -z "$name" ]</span><br><span class="line">[ ! "$name" ]</span><br><span class="line">[ "X$&#123;name&#125;" = "X" ]</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>检查非空值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[ "$name" != "" ]</span><br><span class="line">[ -n "$name" ]</span><br><span class="line">[ "$name" ]</span><br><span class="line">[ "X$&#123;name&#125;" != "X" ]</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>整数二元比较操作符 </p><p>整数测试主要是两个整数比较大小关系</p><p>等于eq（equal ） 大于gt（greater） 小于lt（little）</p><ul><li><p>操作符两边必须<strong>留空格</strong>的情况</p><p><em>字母需要中括号</em></p><table><thead><tr><th>操作符</th><th>作用</th></tr></thead><tbody><tr><td>[ int1 -eq int2 ]</td><td>int1 等于 int2 返回真</td></tr><tr><td>[ int1 -ne int2 ]</td><td>int1 不等于 int2 返回真</td></tr><tr><td>[ int1 -gt int2 ]</td><td>int1 大于 int2 返回真</td></tr><tr><td>[ int1 -ge int2 ]</td><td>int1 大于或等于 int2 返回真</td></tr><tr><td>[ int1 -lt int2 ]</td><td>int1 小于 int2 返回真</td></tr><tr><td>[ int1 -le int2 ]</td><td>int1 小于或等于 int2 返回真</td></tr></tbody></table><table><thead><tr><th>操作符</th><th>作用</th></tr></thead><tbody><tr><td>[ [ int1 -eq int2 ] ]</td><td>int1 等于 int2 返回真</td></tr><tr><td>[ [ int1 -ne int2 ] ]</td><td>int1 不等于 int2 返回真</td></tr><tr><td>[ [ int1 -gt int2 ] ]</td><td>int1 大于 int2 返回真</td></tr><tr><td>[ [ int1 -ge int2 ] ]</td><td>int1 大于或等于 int2 返回真</td></tr><tr><td>[ [ int1 -lt int2 ] ]</td><td>int1 小于 int2 返回真</td></tr><tr><td>[ [ int1 -le int2 ] ]</td><td>int1 小于或等于 int2 返回真</td></tr></tbody></table></li></ul></li></ul><ul><li><p>操作符两边<strong>空格可省略</strong>的情况</p><p><em>符号需要小括号</em></p><table><thead><tr><th>操作符</th><th>作用</th></tr></thead><tbody><tr><td>( ( int1 == int2 ) )</td><td>int1 等于 int2 返回真</td></tr><tr><td>( ( int1 != int2 ) )</td><td>int1 不等于 int2 返回真</td></tr><tr><td>( ( int1 &gt; int2 ) )</td><td>int1 大于 int2 返回真</td></tr><tr><td>( ( int1 &gt;= int2 ) )</td><td>int1 大于或等于 int2 返回真</td></tr><tr><td>( ( int1 &lt; int2 ) )</td><td>int1 小于 int2 返回真</td></tr><tr><td>( ( int1 &lt;= int2 ) )</td><td>int1 小于或等于 int2 返回真</td></tr></tbody></table></li></ul>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 示例</span></span><br><span class="line">a=linux ; b=unix</span><br><span class="line">n=5 ; m=7</span><br><span class="line"></span><br><span class="line">[ $a != $b ] ; echo $?</span><br><span class="line">0</span><br><span class="line">[[ $a != $b ]] ;</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p>  <img src="/2020/03/29/shell/C:%5CUsers%5C79450%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200330173225138.png" alt="image-20200330173225138"></p><p>  <img src="/2020/03/29/shell/C:%5CUsers%5C79450%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200330173234657.png" alt="image-20200330173234657"></p><ul><li><p>逻辑运算符 </p><ul><li><p>与 <code>a</code>    <code>&amp;&amp;</code></p></li><li><p>或 <code>o</code>   <code>||</code></p></li><li><p>非<code>！</code>  </p></li></ul><table><thead><tr><th>符号</th><th>作用</th></tr></thead><tbody><tr><td>[ expr1 -a expr2 ]</td><td>逻辑与，都为真时，结果为真</td></tr><tr><td>[ expr1 -o expr2 ]</td><td>逻辑或，有一个为真时，结果为真</td></tr><tr><td>[ ! expr ]</td><td>逻辑非</td></tr></tbody></table><table><thead><tr><th>符号</th><th>作用</th></tr></thead><tbody><tr><td>[ [ expr1 &amp;&amp; expr2 ] ]</td><td>逻辑与，都为真时，结果为真</td></tr><tr><td>[ [ expr1 || expr2 ] ]</td><td>逻辑或，有一个为真时，结果为真</td></tr><tr><td>[ [ ! expr ] ]</td><td>逻辑非</td></tr></tbody></table><table><thead><tr><th>符号</th><th>作用</th></tr></thead><tbody><tr><td>( ( expr1 &amp;&amp; expr2 ) )</td><td>逻辑与，都为真时，结果为真</td></tr><tr><td>( ( expr1 || expr2 ) )</td><td>逻辑或，有一个为真时，结果为真</td></tr><tr><td>( ( ! expr ) )</td><td>逻辑非</td></tr></tbody></table></li></ul><ul><li><p><em>注意：</em></p><ul><li>不能随便添加括号</li><li>不能在 (( )) 中做字符串比较</li><li>&amp;&amp; 有时候是做命令聚合 而不是逻辑运算</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 案例</span><br></pre></td></tr></table></figure><p><img src="/2020/03/29/shell/C:%5CUsers%5C79450%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200330173309365.png" alt="image-20200330173309365"></p></li></ul><h2 id="六、流程控制"><a href="#六、流程控制" class="headerlink" title="六、流程控制"></a>六、流程控制</h2><ul><li>分支<ul><li>if 条件语句</li><li>case 选择语句</li></ul></li><li>循环<ul><li>for 循环语句</li><li>while 循环语句</li><li>until 循环语句</li><li>select 循环与菜单</li></ul></li></ul><h3 id="1-分支结构-if-语句语法"><a href="#1-分支结构-if-语句语法" class="headerlink" title="1.分支结构 | if 语句语法"></a>1.分支结构 | if 语句语法</h3><ul><li><p>if 语法结构</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">if expr1            # 如果 expr1 为真(返回值为0)</span><br><span class="line">then                # 那么</span><br><span class="line">commands1       # 执行语句块 commands1</span><br><span class="line">elif expr2          # 若 expr1 不真，而 expr2 为真</span><br><span class="line">then                # 那么</span><br><span class="line">commands2       # 执行语句块 commands2</span><br><span class="line">... ...         # 可以有多个 elif 语句</span><br><span class="line">else                # else 最多只能有一个</span><br><span class="line">commands4       # 执行语句块 commands4</span><br><span class="line">fi                  # if 语句必须以单词 fi 终止</span><br></pre></td></tr></table></figure></li><li><p>实际案例</p><p><img src="/2020/03/29/shell/C:%5CUsers%5C79450%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200330165219574.png" alt="image-20200330165219574"></p><p><img src="/2020/03/29/shell/C:%5CUsers%5C79450%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200330165258839.png" alt="image-20200330165258839"></p></li></ul><h3 id="2-分支结构-case-语句语法"><a href="#2-分支结构-case-语句语法" class="headerlink" title="2.分支结构 | case 语句语法"></a>2.分支结构 | case 语句语法</h3><ul><li><p>case 语法结构</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">case expr in        # expr为表达式，关键词 in不要忘！</span><br><span class="line">pattern1)       # 若 expr与 pattern1匹配，注意括号</span><br><span class="line">commands1   # 执行语句块 commands1</span><br><span class="line">;;          # 跳出 case结构</span><br><span class="line">pattern2)</span><br><span class="line">commands2</span><br><span class="line">;;</span><br><span class="line">... ...         # 可以有任意多个模式匹配</span><br><span class="line">*)              # 若 expr与上面的模式都不匹配</span><br><span class="line">commands    # 执行语句块 commands</span><br><span class="line">;;          # 跳出 case结构</span><br><span class="line">esac                # case语句必须以 esac终止</span><br></pre></td></tr></table></figure><ul><li>表达式  expr 按顺序匹配每个模式，一旦有一个模式匹配成功，则执行该模式后面的所有命令，然后退出 case。</li><li>如果 expr<strong>没有找到</strong>匹配的模式，则执行缺省值 “ *) ” 后面的命令块 ( 类似于 if 中的 else)；  “ *)” 可以不出现。</li><li>所给的匹配模式 pattern中<strong>可以含有通配符和“ |”</strong>。</li><li>每个命令块的最后必须有一个<strong>双分号</strong>，可以独占一行，或放在最后一个命令的后面。</li></ul></li><li><p>实际案例</p><p><img src="/2020/03/29/shell/C:%5CUsers%5C79450%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200330165918857.png" alt="image-20200330165918857"></p><p><img src="/2020/03/29/shell/C:%5CUsers%5C79450%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200330165933396.png" alt="image-20200330165933396"></p></li></ul><h3 id="3-循环结构-for-语法"><a href="#3-循环结构-for-语法" class="headerlink" title="3.循环结构 | for 语法"></a>3.循环结构 | for 语法</h3><ul><li><p>foreach 型</p><ul><li><p>语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for variable in list  # 每一次循环，依次把列表 list中的一个值赋给循环变量</span><br><span class="line">do                    # 循环体开始的标志</span><br><span class="line">commands          # 循环变量每取一次值，循环体就执行一遍</span><br><span class="line">done                  # 循环结束的标志，返回循环顶部</span><br></pre></td></tr></table></figure></li><li><p>说明</p><ul><li>列表 list可以是命令替换、变量名替换、字符串和文件名列表 ( 可包含通配符 )，每个列表项以<strong>空格</strong>间隔</li><li>for循环执行的次数取决于列表 list中单词的个数</li><li>可以省略 <code>in list</code>，<strong>省略</strong>时相当于 <code>in &quot;$@&quot;</code></li></ul></li><li><p>实际案例</p><p><img src="/2020/03/29/shell/C:%5CUsers%5C79450%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200330170256916.png" alt="image-20200330170256916"></p><p><img src="/2020/03/29/shell/C:%5CUsers%5C79450%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200330170309544.png" alt="image-20200330170309544"></p><p><img src="/2020/03/29/shell/C:%5CUsers%5C79450%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200330170323128.png" alt="image-20200330170323128"></p><p><img src="/2020/03/29/shell/C:%5CUsers%5C79450%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200330170330462.png" alt="image-20200330170330462"></p></li></ul></li><li><p>break和continue</p><ul><li><p>break</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">break [n]</span><br></pre></td></tr></table></figure><ul><li>用于强行退出当前循环。</li><li>如果是嵌套循环，则 break命令后面可以跟一数字 n，表示退出第 n重循环（最里面的为第一重循环）。</li></ul></li><li><p>continue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">continue [n]</span><br></pre></td></tr></table></figure><ul><li>用于忽略本次循环的剩余部分，回到循环的顶部，继续下一次循环。</li><li>如果是嵌套循环，continue命令后面也可跟一数字n，表示回到第 n重循环的顶部。</li></ul></li><li><p>实际案例</p><p><img src="/2020/03/29/shell/C:%5CUsers%5C79450%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200330170619724.png" alt="image-20200330170619724"></p></li></ul></li></ul><ul><li><p>c语言型</p><ul><li><p>语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for ((expr1;expr2;expr3))   # 执行 expr1</span><br><span class="line">do                          # 若 expr2的值为真时进入循环，否则退出 for循环</span><br><span class="line">commands                    # 执行循环体，之后执行 expr3</span><br><span class="line">done                        # 循环结束的标志，返回循环顶部</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>说明</p><ul><li>通常 expr1和 expr3是算数表达式； expr2是逻辑表达式</li><li>expr1仅在循环开始之初执行一次</li><li>expr2在每次执行循环体之前执行一次</li><li>expr3 在每次执行循环体之后执行一次</li></ul></li><li><p>实际案例</p><p><img src="/2020/03/29/shell/C:%5CUsers%5C79450%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200330170903106.png" alt="image-20200330170903106"></p></li></ul><h3 id="4-循环结构-while、-until-循环语法"><a href="#4-循环结构-while、-until-循环语法" class="headerlink" title="4.循环结构| while、 until 循环语法"></a>4.循环结构| while、 until 循环语法</h3><ul><li><p>while 语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while expr     # 执行 expr</span><br><span class="line">do             # 若expr的退出状态为0，进入循环，否则退出while</span><br><span class="line">commands   # 循环体</span><br><span class="line">done           # 循环结束标志，返回循环顶部</span><br></pre></td></tr></table></figure><p><img src="/2020/03/29/shell/C:%5CUsers%5C79450%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200330171136255.png" alt="image-20200330171136255"></p></li></ul><ul><li><p>ubtil 语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">until expr    # 执行 expr</span><br><span class="line">do            # 若expr的退出状态非0，进入循环，否则退出until</span><br><span class="line">commands  # 循环体</span><br><span class="line">done          # 循环结束标志，返回循环顶部</span><br></pre></td></tr></table></figure><p><img src="/2020/03/29/shell/C:%5CUsers%5C79450%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200330171144632.png" alt="image-20200330171144632"></p></li><li><p>实际案例</p><p><img src="/2020/03/29/shell/C:%5CUsers%5C79450%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200330171527731.png" alt="image-20200330171527731"></p><p><img src="/2020/03/29/shell/C:%5CUsers%5C79450%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200330171536848.png" alt="image-20200330171536848"></p></li><li><p>while / untile /for 循环案例</p><p><img src="/2020/03/29/shell/C:%5CUsers%5C79450%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200330171624392.png" alt="image-20200330171624392"></p><p><img src="/2020/03/29/shell/C:%5CUsers%5C79450%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200330171642775.png" alt="image-20200330171642775"></p></li></ul><h3 id="5-循环结构-select语法"><a href="#5-循环结构-select语法" class="headerlink" title="5.循环结构 | select语法"></a>5.循环结构 | select语法</h3><ul><li><p>语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select variable in list</span><br><span class="line">do              # 循环开始的标志</span><br><span class="line">commands    # 循环变量每取一次值，循环体就执行一遍</span><br><span class="line">done            # 循环结束的标志</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>说明</p><ul><li>按数值顺序排列的菜单项（listitem）会显示到标准错误</li><li>菜单项的间隔符由环境变量 IFS 决定</li><li>用于引导用户输入的提示信息存放在环境变量 PS3 中</li><li>用户输入的值会被存储在内置变量 RELAY 中</li><li>用户直接输入回车将重新显示菜单</li><li>与 for循环类似，省略 in list时等价于 in “$*”</li></ul></li><li><p>实际案例</p><p><img src="/2020/03/29/shell/C:%5CUsers%5C79450%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200330171506942.png" alt="image-20200330171506942"></p></li></ul><h2 id="七、参数控制"><a href="#七、参数控制" class="headerlink" title="七、参数控制"></a>七、参数控制</h2><p>在脚本中经常使用流程控制处理位置参数</p><ul><li>循环结构： while for</li><li>多分枝结构：case</li></ul><p>脚本中经常使用如下命令配合位置参数处理</p><ul><li>shift</li><li>getopts</li></ul><h2 id="八、shell函数"><a href="#八、shell函数" class="headerlink" title="八、shell函数"></a>八、shell函数</h2><h2 id="1-定义-2"><a href="#1-定义-2" class="headerlink" title="1.定义"></a>1.定义</h2><ul><li>Shell函数就是一个子程序，用于完成特定任务。<ul><li>例如，添加一个用户、判断用户是否为管理员的等</li></ul></li><li>函数㐉之后可以被用它 的主程序调用<ul><li>调用函数的方法和执行Shell命令一样</li><li>可以在Shell脚本中直接调用（函数需先定义）</li><li>也可在命令行上直接调用（定义函数的文件需先加载）</li></ul></li></ul><ol><li><p>函数定义</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 函数定义 1</span></span><br><span class="line">function 函数名 &#123;</span><br><span class="line">commands</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 函数定义 2</span></span><br><span class="line">函数名()&#123;</span><br><span class="line">commands</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>函数调用</p><ul><li>只需输入函数名即可调用函数</li><li>函数必须在调用<strong>之前</strong>定义</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 函数调用 1</span></span><br><span class="line">函数名</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 函数调用 2</span></span><br><span class="line">函数名 参数1 参数2 ....</span><br></pre></td></tr></table></figure></li></ol><hr><p>实际案例分析：</p><p><img src="/2020/03/29/shell/C:%5CUsers%5C79450%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200330163751659.png" alt="image-20200330163751659"></p><p><img src="/2020/03/29/shell/C:%5CUsers%5C79450%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200330163802706.png" alt="image-20200330163802706"></p><hr><h2 id="2-函数的存储方式"><a href="#2-函数的存储方式" class="headerlink" title="2.函数的存储方式"></a>2.函数的存储方式</h2><ul><li>函数和调用它的主程序保存在<strong>同一个文件中</strong><ul><li>函数的定义必须出现在调用之前</li></ul></li><li>函数和调用它的主程序保存在<strong>不同的文件中</strong><ul><li>主程序必须先使用  <code>source  被调用函数的文件</code></li></ul></li></ul><h2 id="3-函数的显示"><a href="#3-函数的显示" class="headerlink" title="3.函数的显示"></a>3.函数的显示</h2><ul><li><p>显示当前Shell可见的所有<strong>函数名</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">declare -F</span><br></pre></td></tr></table></figure></li><li><p>显示当前Shell可见的所有（或指定）的<strong>函数定义</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">declare -f</span><br><span class="line">declare -f &lt;functionName&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-函数的参数与变量"><a href="#4-函数的参数与变量" class="headerlink" title="4.函数的参数与变量"></a>4.函数的参数与变量</h2><ol><li><p>参数</p><ul><li><p>调用参数时，使用位置参数的形式为函数传递参数</p></li><li><p>函数内的<code>$1-${n}</code>  <code>$*</code>和 <code>$@</code>将被重置为调用函数之前的值</p></li><li><p>在主程序和函数中，<code>$0</code>始终代表脚本名</p></li></ul></li></ol><ol start="2"><li><p>变量</p><ul><li>函数内<strong>使用</strong> <code>local</code>声明变量是<strong>局部变量</strong><ul><li>局部变量的作用域是当前函数以及其调用的所有函数</li></ul></li><li>函数内<strong>未使用</strong><code>local</code>声明变量是<strong>全局变量</strong><ul><li>主程序和函数中的同名变量是一个变量（地址一致）</li></ul></li></ul></li></ol><hr><p>实际案例分析：</p><p><img src="/2020/03/29/shell/C:%5CUsers%5C79450%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200330163910794.png" alt="image-20200330163910794"></p><p><img src="/2020/03/29/shell/C:%5CUsers%5C79450%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200330163921494.png" alt="image-20200330163921494"></p><h3 id="5-函数的结束与返回值"><a href="#5-函数的结束与返回值" class="headerlink" title="5.函数的结束与返回值"></a>5.函数的结束与返回值</h3><ul><li>当函数的最后一条命令执行结束函数即结束<ul><li>函数的返回值就是最后一条命令的退出码</li><li>其返回值被保存在系统变量$?中</li></ul></li><li>可以使用 return 或 exit 显式地结束函数<ul><li>return [N]<ul><li>return 将结束函数的执行</li><li>可以使用 N 指定函数返回值</li></ul></li><li>exit  [N]<ul><li>exit 将中断当前函数及当前Shell的执行</li><li>可以使用 N 指定返回值</li></ul></li></ul></li></ul><p><em>注意：</em></p><ul><li>使用全局变量引用函数的值 <strong>不利于结构化编程</strong></li><li>使用<code>return</code>和<code>exit</code>只能返回整数值</li></ul><hr><p>实际案例分析;</p><p><img src="/2020/03/29/shell/C:%5CUsers%5C79450%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200330164137396.png" alt="image-20200330164137396"></p><hr><ul><li><p>使用<strong>标准输出</strong>实现函数的返回值</p><ul><li><p>是一种通用的方法，既能返回整数又能返回字符串</p></li><li><p>函数结束前使用echo 命令将结果显示到标准输出</p></li><li><p>调用函数时使用如下的格式将函数的输出结果存到变量RES 中，之后便可使用变量$RES 的值（或输出、或执行测试、或进一步处理等）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RES=$(functionName)</span><br><span class="line">echo $RES</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><p>实际案例分析：</p><p><img src="/2020/03/29/shell/C:%5CUsers%5C79450%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200330164631427.png" alt="image-20200330164631427"></p><hr><h2 id="课后习题"><a href="#课后习题" class="headerlink" title="课后习题"></a>课后习题</h2><ol><li>写shell程序，从键盘输入一个数字，判断其为奇数还是偶数</li><li>写shell程序，输入一个数字，计算阶乘</li><li>写shell程序，获取当前用户名、ip地址</li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python|变量和数据类型| 变量 | ch_02</title>
      <link href="/2020/03/28/ch_02%20Python%20%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B_%E6%95%B0%E5%AD%97/"/>
      <url>/2020/03/28/ch_02%20Python%20%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B_%E6%95%B0%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-变量和数据类型-数据类型-数据类型-数字-ch-02"><a href="#Python-变量和数据类型-数据类型-数据类型-数字-ch-02" class="headerlink" title="Python|变量和数据类型|数据类型| 数据类型_数字|ch_02"></a>Python|变量和数据类型|数据类型| 数据类型_数字|ch_02</h1><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>函数 type() 可以打印出数据类型。</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">1</span></span><br><span class="line">list_1=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">array=np.array(list_1)</span><br><span class="line"></span><br><span class="line">print(type(a))</span><br><span class="line">print(type(list_1))</span><br><span class="line">print(type(array))</span><br></pre></td></tr></table></figure><h2 id="一-、Number-数字"><a href="#一-、Number-数字" class="headerlink" title="一 、Number|数字"></a>一 、Number|数字</h2><p>python中数字类型没有大小限制，体现了其简洁性。</p><h4 id="1-int-有符号整型"><a href="#1-int-有符号整型" class="headerlink" title="1. int  | 有符号整型"></a>1. int  | 有符号整型</h4><p>整型是没有小数部分，表示个数的数字。如自然数，0，负自然数。</p><ul><li><p>整数进制数</p><ul><li>二进制 | 0b<ul><li>计算机常用</li><li>是计算机唯一能直接理解的数字</li><li>表示为0b开头的0,1代码</li><li>例如 0b01101, 0b10001</li></ul></li><li>八进制 |0o<ul><li>不常用</li><li>以0o开头的包含0-7的数字</li><li>例如 0o24</li></ul></li></ul></li><li><p>十六进制 |0x</p><pre><code>- 逢16进1- 其实是每四位二进制表示一位十六进制数- 包含0-9， a-f- 数字上以0x开头表示</code></pre><ul><li>十进制 |0d<ul><li>18， 89， 178</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 二进制</span></span><br><span class="line">age = <span class="number">0b10010</span></span><br><span class="line">print(age)</span><br><span class="line"></span><br><span class="line"><span class="comment">#八进制</span></span><br><span class="line">age = <span class="number">0o102</span></span><br><span class="line">print(age)</span><br><span class="line"></span><br><span class="line"><span class="comment">#十六进制</span></span><br><span class="line">age = <span class="number">0xff</span> <span class="comment">#ff表示二进制的1111 1111</span></span><br><span class="line">print(age)</span><br><span class="line"></span><br><span class="line"><span class="comment">#十进制</span></span><br><span class="line">age = <span class="number">18</span></span><br><span class="line">print(<span class="number">18</span>)</span><br></pre></td></tr></table></figure><h4 id="2-float-浮点型"><a href="#2-float-浮点型" class="headerlink" title="2. float | 浮点型"></a>2. float | 浮点型</h4><p>浮点数即小数，计算机里边表示浮点数可以有条件省略。</p><p>浮点数如：3.1415   3.   0.14  .14</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">height = <span class="number">3.1415</span></span><br><span class="line">print(height)</span><br><span class="line"> </span><br><span class="line">weight = <span class="number">.14</span></span><br><span class="line">print(weight)</span><br><span class="line"></span><br><span class="line">s = <span class="number">3.</span></span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure><ul><li><p>科学计数法</p><p>根数学定义中的科学计数法一样。在python中的写法是在e或者E的后面跟整数表示10的指数，如：</p><ul><li>123.45 = 1.2345e2</li><li>0.1415 ==  1.415e-1</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">height = <span class="number">1.2345e2</span></span><br><span class="line">weight = <span class="number">1.1415e-1</span></span><br><span class="line"></span><br><span class="line">print(height)</span><br><span class="line">print(weight)</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-bool-布尔型"><a href="#3-bool-布尔型" class="headerlink" title="3. bool | 布尔型"></a>3. bool | 布尔型</h4><p>bool值是表示真假的值，它只有两个值，True/False </p><p>布尔值可以直接跟数字操作</p><ul><li>如果布尔值当数字使用 True=1，False=0 </li><li>如果数字当布尔值使用 0=False，其余当作 True</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#布尔值当数字操作</span></span><br><span class="line">age = <span class="number">18</span> + <span class="literal">True</span></span><br><span class="line">print(age)</span><br><span class="line"></span><br><span class="line"><span class="comment">#数字当布尔值使用</span></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> a:</span><br><span class="line">    print(<span class="string">"a是True"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"a是False"</span>)</span><br></pre></td></tr></table></figure><h4 id="4-complex-复数型"><a href="#4-complex-复数型" class="headerlink" title="4. complex | 复数型"></a>4. complex | 复数型</h4><p>python中添加了对复数的计算，是其简便性的体现。</p><p>在python中负数的定义同数学定义一致，其虚部用 j 或者 J 来表示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">5</span>+<span class="number">3j</span></span><br><span class="line">b = <span class="number">3j</span></span><br><span class="line">c =（<span class="number">3j</span>）</span><br></pre></td></tr></table></figure><h3 id="5-实例"><a href="#5-实例" class="headerlink" title="5. 实例"></a>5. 实例</h3><p>一些数值类型的实例：</p><table><thead><tr><th align="left">int</th><th align="left">long</th><th align="left">float</th><th align="left">complex</th></tr></thead><tbody><tr><td align="left">10</td><td align="left">51924361L</td><td align="left">0.0</td><td align="left">3.14j</td></tr><tr><td align="left">100</td><td align="left">-0x19323L</td><td align="left">15.20</td><td align="left">45.j</td></tr><tr><td align="left">-786</td><td align="left">0122L</td><td align="left">-21.9</td><td align="left">9.322e-36j</td></tr><tr><td align="left">080</td><td align="left">0xDEFABCECBDAECBFBAEl</td><td align="left">32.3e+18</td><td align="left">.876j</td></tr><tr><td align="left">-0490</td><td align="left">535633629843L</td><td align="left">-90.</td><td align="left">-.6545+0J</td></tr><tr><td align="left">-0x260</td><td align="left">-052318172735L</td><td align="left">-32.54e100</td><td align="left">3e+26J</td></tr><tr><td align="left">0x69</td><td align="left">-4721885298529L</td><td align="left">70.2E-12</td><td align="left">4.53e-7j</td></tr></tbody></table><h2 id="二、String-字符串"><a href="#二、String-字符串" class="headerlink" title="二、String|字符串"></a>二、String|字符串</h2><h2 id="三、List-列表"><a href="#三、List-列表" class="headerlink" title="三、List|列表"></a>三、List|列表</h2><h2 id="四、Tuple-元组"><a href="#四、Tuple-元组" class="headerlink" title="四、Tuple|元组"></a>四、Tuple|元组</h2><h2 id="五、Dictionary-字典"><a href="#五、Dictionary-字典" class="headerlink" title="五、Dictionary|字典"></a>五、Dictionary|字典</h2><h2 id="六、Sets-集合"><a href="#六、Sets-集合" class="headerlink" title="六、Sets|集合"></a>六、Sets|集合</h2>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 变量和数据类型 </category>
          
          <category> 数据类型 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人生苦短我学Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python|变量和数据类型| 变量 | ch_01</title>
      <link href="/2020/03/27/ch_01%20Python%20%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%20%E5%8F%98%E9%87%8F/"/>
      <url>/2020/03/27/ch_01%20Python%20%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%20%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-变量和数据类型-变量-ch-01"><a href="#Python-变量和数据类型-变量-ch-01" class="headerlink" title="Python|变量和数据类型| 变量 | ch_01"></a>Python|变量和数据类型| 变量 | ch_01</h1><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p><strong>变量就是可以重复使用的一个量，或者叫一个代号。</strong></p><p>变量是存储在内存中的值。这就意味着在创建变量时会在内存中开辟一个空间。</p><p>基于变量的数据类型，解释器会分配指定内存，并决定什么数据可以被存储在内存中。</p><p>因此，变量可以指定不同的数据类型，这些变量可以存储整数，小数或字符。</p><a id="more"></a><h3 id="变量命名的规则"><a href="#变量命名的规则" class="headerlink" title="变量命名的规则"></a>变量命名的规则</h3><p> 变量命名可以包含数字，下划线，大小写字母或者更多，一般不推荐除了前三种内容之外的符号。</p><ul><li><p><strong>数字</strong> </p><p>数字不可以打头 。 </p><ul><li>4man, 5for 是不可以的  X  </li><li>man4, for5是可以的      ✔  </li></ul></li><li><p><strong>下划线</strong><br>一般在python中，以下划线开头的内容具有特殊含义，不建议使用。</p><ul><li>比如 _age, _name，理论可以，但强烈不推荐，在工程项目中容易引起不必要的理解混乱。（包括但不限于一个下划线开头和两个连续下划线开头）</li></ul></li><li><p><strong>大小写敏感</strong></p><p>大小写不一样，俗称大小写敏感。同一个单词大小写不一样，在变量命名上看，变量来是不同的。</p><ul><li>ForMan 跟 forMan不是一个变量名称</li></ul></li><li><p><strong>推荐使用命名规则</strong>：</p><ul><li><p>使用具有固定含义的英文单词或者缩写， srv=server skt=socket,一般以posix命名规则为主</p></li><li><p>驼峰命名法</p><p>名称以单词自动连接，且每个单词首字母大写的命名方法。</p><ul><li><p>大驼峰，每个单词第一个字母均大写</p><ul><li>在Python中给<strong>类</strong>命名使用此法</li><li>MyFirstLove, IntOne</li></ul></li><li><p>小驼峰，类似大驼峰，但第一个字母小写</p><ul><li>在Python中一般给<strong>普通变量</strong>或者<strong>函数</strong>命名</li><li>myFirstLove, intOne</li></ul></li><li><p>posix写法</p><ul><li>多个单词用下划线链接</li><li>单词全部小写</li><li>my_first_love, int_one</li></ul></li></ul></li></ul></li><li><p><strong>不推荐的命名</strong></p><p>不建议命名使用“保留字”和“关键字”，会造成代码</p><ul><li>变量命名必须避开，不能跟关键字和保留字重复</li><li>例如class， def， break，for</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 查看关键字的方法</span><br><span class="line">import keyword #引入关键字模块</span><br><span class="line"># 打印出系统全部关键字</span><br><span class="line">print(keyword.kwlist)</span><br></pre></td></tr></table></figure><h3 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h3><p>变量的声明主要分为三种方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var_name &#x3D; var_value</span><br><span class="line">var1 &#x3D; var2 &#x3D; var3 &#x3D; var_value</span><br><span class="line">var1, var2, var3 &#x3D; v1, v2, v3</span><br></pre></td></tr></table></figure><ul><li><p>单个变量赋值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 定义变量qzp_age，把18放入变量qzp_age中</span><br><span class="line">qzp_age &#x3D; 18</span><br><span class="line">print(qzp_age)</span><br></pre></td></tr></table></figure></li><li><p>多个变量赋值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 给age1， age2， age3 放入同样一个内容或值</span><br><span class="line">age1 &#x3D; age2 &#x3D; age3 &#x3D; 3</span><br><span class="line">print(age1)</span><br><span class="line">print(age2)</span><br><span class="line">print(age3)</span><br></pre></td></tr></table></figure></li><li><p>多个不同定义  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 一行内给多个变量赋值</span><br><span class="line">age4, age5, age6 &#x3D; 4, 5, 6</span><br><span class="line">print(age4)</span><br><span class="line">print(age5)</span><br><span class="line">print(age6)</span><br></pre></td></tr></table></figure></li></ul><h3 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h3><p>也称之为数据类型，按照标准数据来分类可分为六种：</p><ul><li>数字类型 | Number</li><li>字符串类型 | string</li><li>列表 | list</li><li>元组 | tuple</li><li>字典 | Dictionary</li><li>集合 | set</li></ul><p>其中<strong>列表（list） 元组（tuple） 字典（dictionary） 集合（set)</strong>  称之为内置数据结构</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 变量和数据类型 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人生苦短我学Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建测试</title>
      <link href="/2019/12/12/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%B5%8B%E8%AF%95/"/>
      <url>/2019/12/12/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<center>此篇为测试，如若符合要求后期会自动删除</center><center><img src="/2019/12/12/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%B5%8B%E8%AF%95/1.jpg" class title="系小鹏鹏(❤ ω ❤)呀"></center><a id="more"></a><h1 id="创建一篇新文章"><a href="#创建一篇新文章" class="headerlink" title="创建一篇新文章"></a>创建一篇新文章</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"博客搭建测试"</span>1111111111</span><br></pre></td></tr></table></figure><p>有一说一 qzp牛逼</p><h1 id="本地查看静态网页"><a href="#本地查看静态网页" class="headerlink" title="本地查看静态网页"></a>本地查看静态网页</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>我宣布 现在这里称之为qzp广场 全体起立 qzp牛逼</p><h1 id="上传网页同步"><a href="#上传网页同步" class="headerlink" title="上传网页同步"></a>上传网页同步</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>奥里给！<br>qzp牛批！qzp牛批！qzp牛批！qzp牛批！qzp牛批！qzp牛批！qzp牛批！</p>]]></content>
      
      
      <categories>
          
          <category> 测试类 </category>
          
          <category> test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
